
////////////////////////////////////////////////////////////////////////////////////////////
// This file is generated by Speakeasy and any edits will be lost in generation updates.
//
// If you wish to customize this file then place those customizations in `build-extras.gradle` which 
// is not touched by generation updates.
//
// Additions to the plugins block can be made by setting the `additionalPlugins` property (an array 
// of string where each string value is an additional line in the block) in gen.yaml.
////////////////////////////////////////////////////////////////////////////////////////////

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

compileJava.options.encoding = "UTF-8"
compileJava.options.compilerArgs += '-Xlint:unchecked'
compileTestJava.options.encoding = "UTF-8"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

java {
    withSourcesJar()
    withJavadocJar()
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/pom.xml")
    }
}

version = "${version}"
group = "${groupId}"

jar {
    dependsOn(":generatePomFileForMavenPublication")

    into("META-INF/maven/com.formance/formance-sdk") {
        from("$buildDir/pom.xml")
    }
}

javadoc {
    options.encoding = "UTF-8"

    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(Javadoc) {
  failOnError = false
  options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(JavaCompile).configureEach {
    options.release = 11
}

sourcesJar {
    archiveBaseName = "${artifactId}"
}

javadocJar {
    archiveBaseName = "${artifactId}"
}


publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
          }
        }
    }

    publications {
        maven(MavenPublication) {
            // note that properties can't yet be used below!
            // https://github.com/gradle/gradle/issues/18619
            groupId = "com.formance"
            artifactId = "formance-sdk"
            version = "7.2.2"

            from components.java

            pom {
                properties = [
                    'maven.compiler.source': '11',
                    'maven.compiler.target': '11',
                ]
                name = 'Formance Java SDK'
                description = 'SDK enabling Java developers to easily integrate with the Formance API.'
                url = 'https://github.com/formancehq/formance-sdk-java'
                scm {
                    url = 'github.com/formancehq/formance-sdk-java'
                    connection = 'scm:git:ssh://git@github.com/formancehq/formance-sdk-java.git'
                }
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://mit-license.org/'
                    }
                }
                developers {
                    developer {
                        name = 'Formance'
                        organization = 'Formance'
                        email = 'support@formance.com'
                    }
                }
                organization {
                    name = 'Formance'
                    url = 'https://www.formance.com'
                }
            }
        }
    }
}

if (!project.hasProperty('skip.signing')) {
    signing {
        def signingKey = findProperty("signingKey")
        def signingPassphrase = findProperty("signingPassphrase")
        useInMemoryPgpKeys(signingKey, signingPassphrase)
        sign publishing.publications.maven
    }
}



dependencies {
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.2'
    api 'com.fasterxml.jackson.core:jackson-annotations:2.18.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.18.2'
    api('org.openapitools:jackson-databind-nullable:0.2.6') {exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'}
    implementation 'commons-io:commons-io:2.18.0'
}

apply from: 'build-extras.gradle'