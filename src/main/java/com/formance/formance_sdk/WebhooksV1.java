/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;

import com.formance.formance_sdk.models.operations.ActivateConfigRequest;
import com.formance.formance_sdk.models.operations.ActivateConfigRequestBuilder;
import com.formance.formance_sdk.models.operations.ActivateConfigResponse;
import com.formance.formance_sdk.models.operations.ChangeConfigSecretRequest;
import com.formance.formance_sdk.models.operations.ChangeConfigSecretRequestBuilder;
import com.formance.formance_sdk.models.operations.ChangeConfigSecretResponse;
import com.formance.formance_sdk.models.operations.DeactivateConfigRequest;
import com.formance.formance_sdk.models.operations.DeactivateConfigRequestBuilder;
import com.formance.formance_sdk.models.operations.DeactivateConfigResponse;
import com.formance.formance_sdk.models.operations.DeleteConfigRequest;
import com.formance.formance_sdk.models.operations.DeleteConfigRequestBuilder;
import com.formance.formance_sdk.models.operations.DeleteConfigResponse;
import com.formance.formance_sdk.models.operations.GetManyConfigsRequest;
import com.formance.formance_sdk.models.operations.GetManyConfigsRequestBuilder;
import com.formance.formance_sdk.models.operations.GetManyConfigsResponse;
import com.formance.formance_sdk.models.operations.InsertConfigRequestBuilder;
import com.formance.formance_sdk.models.operations.InsertConfigResponse;
import com.formance.formance_sdk.models.operations.TestConfigRequest;
import com.formance.formance_sdk.models.operations.TestConfigRequestBuilder;
import com.formance.formance_sdk.models.operations.TestConfigResponse;
import com.formance.formance_sdk.models.operations.UpdateConfigRequest;
import com.formance.formance_sdk.models.operations.UpdateConfigRequestBuilder;
import com.formance.formance_sdk.models.operations.UpdateConfigResponse;
import com.formance.formance_sdk.models.shared.ConfigUser;
import com.formance.formance_sdk.operations.ActivateConfig;
import com.formance.formance_sdk.operations.ChangeConfigSecret;
import com.formance.formance_sdk.operations.DeactivateConfig;
import com.formance.formance_sdk.operations.DeleteConfig;
import com.formance.formance_sdk.operations.GetManyConfigs;
import com.formance.formance_sdk.operations.InsertConfig;
import com.formance.formance_sdk.operations.TestConfig;
import com.formance.formance_sdk.operations.UpdateConfig;
import java.lang.Exception;


public class WebhooksV1 {
    private final SDKConfiguration sdkConfiguration;

    WebhooksV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Activate one config
     * 
     * <p>Activate a webhooks config by ID, to start receiving webhooks to its endpoint.
     * 
     * @return The call builder
     */
    public ActivateConfigRequestBuilder activateConfig() {
        return new ActivateConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * Activate one config
     * 
     * <p>Activate a webhooks config by ID, to start receiving webhooks to its endpoint.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ActivateConfigResponse activateConfig(ActivateConfigRequest request) throws Exception {
        RequestOperation<ActivateConfigRequest, ActivateConfigResponse> operation
              = new ActivateConfig.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Change the signing secret of a config
     * 
     * <p>Change the signing secret of the endpoint of a webhooks config.
     * 
     * <p>If not passed or empty, a secret is automatically generated.
     * The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
     * 
     * @return The call builder
     */
    public ChangeConfigSecretRequestBuilder changeConfigSecret() {
        return new ChangeConfigSecretRequestBuilder(sdkConfiguration);
    }

    /**
     * Change the signing secret of a config
     * 
     * <p>Change the signing secret of the endpoint of a webhooks config.
     * 
     * <p>If not passed or empty, a secret is automatically generated.
     * The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ChangeConfigSecretResponse changeConfigSecret(ChangeConfigSecretRequest request) throws Exception {
        RequestOperation<ChangeConfigSecretRequest, ChangeConfigSecretResponse> operation
              = new ChangeConfigSecret.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Deactivate one config
     * 
     * <p>Deactivate a webhooks config by ID, to stop receiving webhooks to its endpoint.
     * 
     * @return The call builder
     */
    public DeactivateConfigRequestBuilder deactivateConfig() {
        return new DeactivateConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * Deactivate one config
     * 
     * <p>Deactivate a webhooks config by ID, to stop receiving webhooks to its endpoint.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeactivateConfigResponse deactivateConfig(DeactivateConfigRequest request) throws Exception {
        RequestOperation<DeactivateConfigRequest, DeactivateConfigResponse> operation
              = new DeactivateConfig.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete one config
     * 
     * <p>Delete a webhooks config by ID.
     * 
     * @return The call builder
     */
    public DeleteConfigRequestBuilder deleteConfig() {
        return new DeleteConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete one config
     * 
     * <p>Delete a webhooks config by ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteConfigResponse deleteConfig(DeleteConfigRequest request) throws Exception {
        RequestOperation<DeleteConfigRequest, DeleteConfigResponse> operation
              = new DeleteConfig.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get many configs
     * 
     * <p>Sorted by updated date descending
     * 
     * @return The call builder
     */
    public GetManyConfigsRequestBuilder getManyConfigs() {
        return new GetManyConfigsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get many configs
     * 
     * <p>Sorted by updated date descending
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetManyConfigsResponse getManyConfigs(GetManyConfigsRequest request) throws Exception {
        RequestOperation<GetManyConfigsRequest, GetManyConfigsResponse> operation
              = new GetManyConfigs.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Insert a new config
     * 
     * <p>Insert a new webhooks config.
     * 
     * <p>The endpoint should be a valid https URL and be unique.
     * 
     * <p>The secret is the endpoint's verification secret.
     * If not passed or empty, a secret is automatically generated.
     * The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
     * 
     * <p>All eventTypes are converted to lower-case when inserted.
     * 
     * @return The call builder
     */
    public InsertConfigRequestBuilder insertConfig() {
        return new InsertConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * Insert a new config
     * 
     * <p>Insert a new webhooks config.
     * 
     * <p>The endpoint should be a valid https URL and be unique.
     * 
     * <p>The secret is the endpoint's verification secret.
     * If not passed or empty, a secret is automatically generated.
     * The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
     * 
     * <p>All eventTypes are converted to lower-case when inserted.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public InsertConfigResponse insertConfig(ConfigUser request) throws Exception {
        RequestOperation<ConfigUser, InsertConfigResponse> operation
              = new InsertConfig.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Test one config
     * 
     * <p>Test a config by sending a webhook to its endpoint.
     * 
     * @return The call builder
     */
    public TestConfigRequestBuilder testConfig() {
        return new TestConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * Test one config
     * 
     * <p>Test a config by sending a webhook to its endpoint.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public TestConfigResponse testConfig(TestConfigRequest request) throws Exception {
        RequestOperation<TestConfigRequest, TestConfigResponse> operation
              = new TestConfig.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update one config
     * 
     * <p>Update a webhooks config by ID.
     * 
     * @return The call builder
     */
    public UpdateConfigRequestBuilder updateConfig() {
        return new UpdateConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * Update one config
     * 
     * <p>Update a webhooks config by ID.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateConfigResponse updateConfig(UpdateConfigRequest request) throws Exception {
        RequestOperation<UpdateConfigRequest, UpdateConfigResponse> operation
              = new UpdateConfig.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
