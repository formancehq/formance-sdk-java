/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.operations;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.SDKConfiguration;
import com.formance.formance_sdk.SecuritySource;
import com.formance.formance_sdk.models.errors.ReconciliationErrorResponse;
import com.formance.formance_sdk.models.errors.SDKError;
import com.formance.formance_sdk.models.operations.CreatePolicyResponse;
import com.formance.formance_sdk.models.shared.PolicyRequest;
import com.formance.formance_sdk.models.shared.PolicyResponse;
import com.formance.formance_sdk.utils.HTTPClient;
import com.formance.formance_sdk.utils.HTTPRequest;
import com.formance.formance_sdk.utils.Hook.AfterErrorContextImpl;
import com.formance.formance_sdk.utils.Hook.AfterSuccessContextImpl;
import com.formance.formance_sdk.utils.Hook.BeforeRequestContextImpl;
import com.formance.formance_sdk.utils.SerializedBody;
import com.formance.formance_sdk.utils.Utils.JsonShape;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Optional;



public class CreatePolicy {

    static abstract class Base {
        final SDKConfiguration sdkConfiguration;
        final String baseUrl;
        final SecuritySource securitySource;
        final HTTPClient client;

        public Base(SDKConfiguration sdkConfiguration) {
            this.sdkConfiguration = sdkConfiguration;
            this.baseUrl = Utils.templateUrl(
                    this.sdkConfiguration.serverUrl(), this.sdkConfiguration.getServerVariableDefaults());
            this.securitySource = this.sdkConfiguration.securitySource();
            this.client = this.sdkConfiguration.client();
        }

        Optional<SecuritySource> securitySource() {
            return Optional.ofNullable(this.securitySource);
        }

        BeforeRequestContextImpl createBeforeRequestContext() {
            return new BeforeRequestContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "createPolicy",
                    java.util.Optional.of(java.util.List.of("auth:read", "reconciliation:write")),
                    securitySource());
        }

        AfterSuccessContextImpl createAfterSuccessContext() {
            return new AfterSuccessContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "createPolicy",
                    java.util.Optional.of(java.util.List.of("auth:read", "reconciliation:write")),
                    securitySource());
        }

        AfterErrorContextImpl createAfterErrorContext() {
            return new AfterErrorContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "createPolicy",
                    java.util.Optional.of(java.util.List.of("auth:read", "reconciliation:write")),
                    securitySource());
        }

        HttpRequest buildRequest(PolicyRequest request) throws Exception {
            String url = Utils.generateURL(
                    this.baseUrl,
                    "/api/reconciliation/policies");
            HTTPRequest req = new HTTPRequest(url, "POST");
            Object convertedRequest = Utils.convertToShape(
                    request,
                    JsonShape.DEFAULT,
                    new TypeReference<PolicyRequest>() {
                    });
            SerializedBody serializedRequestBody = Utils.serializeRequestBody(
                    convertedRequest,
                    "request",
                    "json",
                    false);
            if (serializedRequestBody == null) {
                throw new Exception("Request body is required");
            }
            req.setBody(Optional.ofNullable(serializedRequestBody));
            req.addHeader("Accept", "application/json")
                    .addHeader("user-agent", SDKConfiguration.USER_AGENT);
            Utils.configureSecurity(req, this.sdkConfiguration.securitySource().getSecurity());

            return req.build();
        }
    }

    public static class Sync extends Base
            implements RequestOperation<PolicyRequest, CreatePolicyResponse> {
        public Sync(SDKConfiguration sdkConfiguration) {
            super(sdkConfiguration);
        }

        private HttpRequest onBuildRequest(PolicyRequest request) throws Exception {
            HttpRequest req = buildRequest(request);
            return sdkConfiguration.hooks().beforeRequest(createBeforeRequestContext(), req);
        }

        private HttpResponse<InputStream> onError(HttpResponse<InputStream> response, Exception error) throws Exception {
            return sdkConfiguration.hooks().afterError(
                    createAfterErrorContext(),
                    Optional.ofNullable(response),
                    Optional.ofNullable(error));
        }

        private HttpResponse<InputStream> onSuccess(HttpResponse<InputStream> response) throws Exception {
            return sdkConfiguration.hooks().afterSuccess(createAfterSuccessContext(), response);
        }

        @Override
        public HttpResponse<InputStream> doRequest(PolicyRequest request) throws Exception {
            HttpRequest r = onBuildRequest(request);
            HttpResponse<InputStream> httpRes;
            try {
                httpRes = client.send(r);
                if (Utils.statusCodeMatches(httpRes.statusCode(), "default")) {
                    httpRes = onError(httpRes, null);
                } else {
                    httpRes = onSuccess(httpRes);
                }
            } catch (Exception e) {
                httpRes = onError(null, e);
            }

            return httpRes;
        }


        @Override
        public CreatePolicyResponse handleResponse(HttpResponse<InputStream> response) throws Exception {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            CreatePolicyResponse.Builder resBuilder =
                    CreatePolicyResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            CreatePolicyResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "201")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    PolicyResponse out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                    res.withPolicyResponse(out);
                    return res;
                } else {
                    throw new SDKError(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "default")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    ReconciliationErrorResponse out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                    throw out;
                } else {
                    throw new SDKError(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            throw new SDKError(
                    response,
                    response.statusCode(),
                    "Unexpected status code received: " + response.statusCode(),
                    Utils.extractByteArrayFromBody(response));
        }
    }
}
