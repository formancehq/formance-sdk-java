/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.formance.formance_sdk;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.formance.formance_sdk.models.errors.SDKError;
import com.formance.formance_sdk.models.operations.SDKMethodInterfaces.*;
import com.formance.formance_sdk.utils.HTTPClient;
import com.formance.formance_sdk.utils.HTTPRequest;
import com.formance.formance_sdk.utils.JSON;
import com.formance.formance_sdk.utils.SerializedBody;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

public class Payments implements
            MethodCallAddAccountToPool,
            MethodCallConnectorsTransfer,
            MethodCallCreateBankAccount,
            MethodCallCreatePayment,
            MethodCallCreatePool,
            MethodCallCreateTransferInitiation,
            MethodCallDeletePool,
            MethodCallDeleteTransferInitiation,
            MethodCallForwardBankAccount,
            MethodCallGetAccountBalances,
            MethodCallGetBankAccount,
            MethodCallGetConnectorTask,
            MethodCallGetConnectorTaskV1,
            MethodCallGetPayment,
            MethodCallGetPool,
            MethodCallGetPoolBalances,
            MethodCallGetTransferInitiation,
            MethodCallInstallConnector,
            MethodCallListAllConnectors,
            MethodCallListBankAccounts,
            MethodCallListConfigsAvailableConnectors,
            MethodCallListConnectorTasks,
            MethodCallListConnectorTasksV1,
            MethodCallListPayments,
            MethodCallListPools,
            MethodCallListTransferInitiations,
            MethodCallPaymentsgetAccount,
            MethodCallPaymentsgetServerInfo,
            MethodCallPaymentslistAccounts,
            MethodCallReadConnectorConfig,
            MethodCallReadConnectorConfigV1,
            MethodCallRemoveAccountFromPool,
            MethodCallResetConnector,
            MethodCallResetConnectorV1,
            MethodCallRetryTransferInitiation,
            MethodCallReverseTransferInitiation,
            MethodCallUdpateTransferInitiationStatus,
            MethodCallUninstallConnector,
            MethodCallUninstallConnectorV1,
            MethodCallUpdateBankAccountMetadata,
            MethodCallUpdateConnectorConfigV1,
            MethodCallUpdateMetadata {

    private final SDKConfiguration sdkConfiguration;

    Payments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.formance.formance_sdk.models.operations.AddAccountToPoolRequestBuilder addAccountToPool() {
        return new com.formance.formance_sdk.models.operations.AddAccountToPoolRequestBuilder(this);
    }

    /**
     * Add an account to a pool
     * Add an account to a pool
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.AddAccountToPoolResponse addAccountToPool(
            com.formance.formance_sdk.models.operations.AddAccountToPoolRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.AddAccountToPoolRequest.class,
                baseUrl,
                "/api/payments/pools/{poolId}/accounts",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.AddAccountToPoolRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "addAccountToPoolRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.AddAccountToPoolResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.AddAccountToPoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.AddAccountToPoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ConnectorsTransferRequestBuilder connectorsTransfer() {
        return new com.formance.formance_sdk.models.operations.ConnectorsTransferRequestBuilder(this);
    }

    /**
     * Transfer funds between Connector accounts
     * Execute a transfer between two accounts.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ConnectorsTransferResponse connectorsTransfer(
            com.formance.formance_sdk.models.operations.ConnectorsTransferRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ConnectorsTransferRequest.class,
                baseUrl,
                "/api/payments/connectors/{connector}/transfers",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.ConnectorsTransferRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "transferRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ConnectorsTransferResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ConnectorsTransferResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ConnectorsTransferResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TransferResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TransferResponse>() {});
                res.withTransferResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.CreateBankAccountRequestBuilder createBankAccount() {
        return new com.formance.formance_sdk.models.operations.CreateBankAccountRequestBuilder(this);
    }

    /**
     * Create a BankAccount in Payments and on the PSP
     * Create a bank account in Payments and on the PSP.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.CreateBankAccountResponse createBankAccount(
            com.formance.formance_sdk.models.shared.BankAccountRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/bank-accounts");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.shared.BankAccountRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.CreateBankAccountResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.CreateBankAccountResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.CreateBankAccountResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.BankAccountResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.BankAccountResponse>() {});
                res.withBankAccountResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.CreatePaymentRequestBuilder createPayment() {
        return new com.formance.formance_sdk.models.operations.CreatePaymentRequestBuilder(this);
    }

    /**
     * Create a payment
     * Create a payment
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.CreatePaymentResponse createPayment(
            com.formance.formance_sdk.models.shared.PaymentRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/payments");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.shared.PaymentRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.CreatePaymentResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.CreatePaymentResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.CreatePaymentResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PaymentResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PaymentResponse>() {});
                res.withPaymentResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.CreatePoolRequestBuilder createPool() {
        return new com.formance.formance_sdk.models.operations.CreatePoolRequestBuilder(this);
    }

    /**
     * Create a Pool
     * Create a Pool
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.CreatePoolResponse createPool(
            com.formance.formance_sdk.models.shared.PoolRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/pools");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.shared.PoolRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.CreatePoolResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.CreatePoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.CreatePoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PoolResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PoolResponse>() {});
                res.withPoolResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.CreateTransferInitiationRequestBuilder createTransferInitiation() {
        return new com.formance.formance_sdk.models.operations.CreateTransferInitiationRequestBuilder(this);
    }

    /**
     * Create a TransferInitiation
     * Create a transfer initiation
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.CreateTransferInitiationResponse createTransferInitiation(
            com.formance.formance_sdk.models.shared.TransferInitiationRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/transfer-initiations");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.shared.TransferInitiationRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.CreateTransferInitiationResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.CreateTransferInitiationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.CreateTransferInitiationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TransferInitiationResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TransferInitiationResponse>() {});
                res.withTransferInitiationResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.DeletePoolRequestBuilder deletePool() {
        return new com.formance.formance_sdk.models.operations.DeletePoolRequestBuilder(this);
    }

    /**
     * Delete a Pool
     * Delete a pool by its id.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.DeletePoolResponse deletePool(
            com.formance.formance_sdk.models.operations.DeletePoolRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.DeletePoolRequest.class,
                baseUrl,
                "/api/payments/pools/{poolId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.DeletePoolResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.DeletePoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.DeletePoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.DeleteTransferInitiationRequestBuilder deleteTransferInitiation() {
        return new com.formance.formance_sdk.models.operations.DeleteTransferInitiationRequestBuilder(this);
    }

    /**
     * Delete a transfer initiation
     * Delete a transfer initiation by its id.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.DeleteTransferInitiationResponse deleteTransferInitiation(
            com.formance.formance_sdk.models.operations.DeleteTransferInitiationRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.DeleteTransferInitiationRequest.class,
                baseUrl,
                "/api/payments/transfer-initiations/{transferId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.DeleteTransferInitiationResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.DeleteTransferInitiationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.DeleteTransferInitiationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ForwardBankAccountRequestBuilder forwardBankAccount() {
        return new com.formance.formance_sdk.models.operations.ForwardBankAccountRequestBuilder(this);
    }

    /**
     * Forward a bank account to a connector
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ForwardBankAccountResponse forwardBankAccount(
            com.formance.formance_sdk.models.operations.ForwardBankAccountRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ForwardBankAccountRequest.class,
                baseUrl,
                "/api/payments/bank-accounts/{bankAccountId}/forward",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.ForwardBankAccountRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "forwardBankAccountRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ForwardBankAccountResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ForwardBankAccountResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ForwardBankAccountResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.BankAccountResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.BankAccountResponse>() {});
                res.withBankAccountResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetAccountBalancesRequestBuilder getAccountBalances() {
        return new com.formance.formance_sdk.models.operations.GetAccountBalancesRequestBuilder(this);
    }

    /**
     * Get account balances
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetAccountBalancesResponse getAccountBalances(
            com.formance.formance_sdk.models.operations.GetAccountBalancesRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetAccountBalancesRequest.class,
                baseUrl,
                "/api/payments/accounts/{accountId}/balances",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.GetAccountBalancesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetAccountBalancesResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetAccountBalancesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetAccountBalancesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.BalancesCursor out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.BalancesCursor>() {});
                res.withBalancesCursor(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetBankAccountRequestBuilder getBankAccount() {
        return new com.formance.formance_sdk.models.operations.GetBankAccountRequestBuilder(this);
    }

    /**
     * Get a bank account created by user on Formance
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetBankAccountResponse getBankAccount(
            com.formance.formance_sdk.models.operations.GetBankAccountRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetBankAccountRequest.class,
                baseUrl,
                "/api/payments/bank-accounts/{bankAccountId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetBankAccountResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetBankAccountResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetBankAccountResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.BankAccountResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.BankAccountResponse>() {});
                res.withBankAccountResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetConnectorTaskRequestBuilder getConnectorTask() {
        return new com.formance.formance_sdk.models.operations.GetConnectorTaskRequestBuilder(this);
    }

    /**
     * Read a specific task of the connector
     * Get a specific task associated to the connector.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.formance.formance_sdk.models.operations.GetConnectorTaskResponse getConnectorTask(
            com.formance.formance_sdk.models.operations.GetConnectorTaskRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetConnectorTaskRequest.class,
                baseUrl,
                "/api/payments/connectors/{connector}/tasks/{taskId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetConnectorTaskResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetConnectorTaskResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetConnectorTaskResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TaskResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TaskResponse>() {});
                res.withTaskResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetConnectorTaskV1RequestBuilder getConnectorTaskV1() {
        return new com.formance.formance_sdk.models.operations.GetConnectorTaskV1RequestBuilder(this);
    }

    /**
     * Read a specific task of the connector
     * Get a specific task associated to the connector.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetConnectorTaskV1Response getConnectorTaskV1(
            com.formance.formance_sdk.models.operations.GetConnectorTaskV1Request request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetConnectorTaskV1Request.class,
                baseUrl,
                "/api/payments/connectors/{connector}/{connectorId}/tasks/{taskId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetConnectorTaskV1Response.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetConnectorTaskV1Response
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetConnectorTaskV1Response res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TaskResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TaskResponse>() {});
                res.withTaskResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetPaymentRequestBuilder getPayment() {
        return new com.formance.formance_sdk.models.operations.GetPaymentRequestBuilder(this);
    }

    /**
     * Get a payment
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetPaymentResponse getPayment(
            com.formance.formance_sdk.models.operations.GetPaymentRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetPaymentRequest.class,
                baseUrl,
                "/api/payments/payments/{paymentId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetPaymentResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetPaymentResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetPaymentResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PaymentResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PaymentResponse>() {});
                res.withPaymentResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetPoolRequestBuilder getPool() {
        return new com.formance.formance_sdk.models.operations.GetPoolRequestBuilder(this);
    }

    /**
     * Get a Pool
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetPoolResponse getPool(
            com.formance.formance_sdk.models.operations.GetPoolRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetPoolRequest.class,
                baseUrl,
                "/api/payments/pools/{poolId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetPoolResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetPoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetPoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PoolResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PoolResponse>() {});
                res.withPoolResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetPoolBalancesRequestBuilder getPoolBalances() {
        return new com.formance.formance_sdk.models.operations.GetPoolBalancesRequestBuilder(this);
    }

    /**
     * Get pool balances
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetPoolBalancesResponse getPoolBalances(
            com.formance.formance_sdk.models.operations.GetPoolBalancesRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetPoolBalancesRequest.class,
                baseUrl,
                "/api/payments/pools/{poolId}/balances",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.GetPoolBalancesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetPoolBalancesResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetPoolBalancesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetPoolBalancesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PoolBalancesResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PoolBalancesResponse>() {});
                res.withPoolBalancesResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetTransferInitiationRequestBuilder getTransferInitiation() {
        return new com.formance.formance_sdk.models.operations.GetTransferInitiationRequestBuilder(this);
    }

    /**
     * Get a transfer initiation
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetTransferInitiationResponse getTransferInitiation(
            com.formance.formance_sdk.models.operations.GetTransferInitiationRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetTransferInitiationRequest.class,
                baseUrl,
                "/api/payments/transfer-initiations/{transferId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetTransferInitiationResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetTransferInitiationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetTransferInitiationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TransferInitiationResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TransferInitiationResponse>() {});
                res.withTransferInitiationResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.InstallConnectorRequestBuilder installConnector() {
        return new com.formance.formance_sdk.models.operations.InstallConnectorRequestBuilder(this);
    }

    /**
     * Install a connector
     * Install a connector by its name and config.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.InstallConnectorResponse installConnector(
            com.formance.formance_sdk.models.operations.InstallConnectorRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.InstallConnectorRequest.class,
                baseUrl,
                "/api/payments/connectors/{connector}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.InstallConnectorRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "connectorConfig", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.InstallConnectorResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.InstallConnectorResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.InstallConnectorResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 201) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ConnectorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ConnectorResponse>() {});
                res.withConnectorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListAllConnectorsRequestBuilder listAllConnectors() {
        return new com.formance.formance_sdk.models.operations.ListAllConnectorsRequestBuilder(this);
    }

    /**
     * List all installed connectors
     * List all installed connectors.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListAllConnectorsResponse listAllConnectorsDirect() throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/connectors");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListAllConnectorsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListAllConnectorsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListAllConnectorsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ConnectorsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ConnectorsResponse>() {});
                res.withConnectorsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListBankAccountsRequestBuilder listBankAccounts() {
        return new com.formance.formance_sdk.models.operations.ListBankAccountsRequestBuilder(this);
    }

    /**
     * List bank accounts created by user on Formance
     * List all bank accounts created by user on Formance.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListBankAccountsResponse listBankAccounts(
            com.formance.formance_sdk.models.operations.ListBankAccountsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/bank-accounts");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListBankAccountsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListBankAccountsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListBankAccountsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListBankAccountsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.BankAccountsCursor out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.BankAccountsCursor>() {});
                res.withBankAccountsCursor(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListConfigsAvailableConnectorsRequestBuilder listConfigsAvailableConnectors() {
        return new com.formance.formance_sdk.models.operations.ListConfigsAvailableConnectorsRequestBuilder(this);
    }

    /**
     * List the configs of each available connector
     * List the configs of each available connector.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListConfigsAvailableConnectorsResponse listConfigsAvailableConnectorsDirect() throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/connectors/configs");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListConfigsAvailableConnectorsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListConfigsAvailableConnectorsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListConfigsAvailableConnectorsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ConnectorsConfigsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ConnectorsConfigsResponse>() {});
                res.withConnectorsConfigsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListConnectorTasksRequestBuilder listConnectorTasks() {
        return new com.formance.formance_sdk.models.operations.ListConnectorTasksRequestBuilder(this);
    }

    /**
     * List tasks from a connector
     * List all tasks associated with this connector.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.formance.formance_sdk.models.operations.ListConnectorTasksResponse listConnectorTasks(
            com.formance.formance_sdk.models.operations.ListConnectorTasksRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ListConnectorTasksRequest.class,
                baseUrl,
                "/api/payments/connectors/{connector}/tasks",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListConnectorTasksRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListConnectorTasksResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListConnectorTasksResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListConnectorTasksResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TasksCursor out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TasksCursor>() {});
                res.withTasksCursor(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListConnectorTasksV1RequestBuilder listConnectorTasksV1() {
        return new com.formance.formance_sdk.models.operations.ListConnectorTasksV1RequestBuilder(this);
    }

    /**
     * List tasks from a connector
     * List all tasks associated with this connector.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListConnectorTasksV1Response listConnectorTasksV1(
            com.formance.formance_sdk.models.operations.ListConnectorTasksV1Request request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ListConnectorTasksV1Request.class,
                baseUrl,
                "/api/payments/connectors/{connector}/{connectorId}/tasks",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListConnectorTasksV1Request.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListConnectorTasksV1Response.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListConnectorTasksV1Response
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListConnectorTasksV1Response res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TasksCursor out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TasksCursor>() {});
                res.withTasksCursor(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListPaymentsRequestBuilder listPayments() {
        return new com.formance.formance_sdk.models.operations.ListPaymentsRequestBuilder(this);
    }

    /**
     * List payments
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListPaymentsResponse listPayments(
            com.formance.formance_sdk.models.operations.ListPaymentsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/payments");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListPaymentsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListPaymentsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListPaymentsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListPaymentsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PaymentsCursor out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PaymentsCursor>() {});
                res.withPaymentsCursor(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListPoolsRequestBuilder listPools() {
        return new com.formance.formance_sdk.models.operations.ListPoolsRequestBuilder(this);
    }

    /**
     * List Pools
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListPoolsResponse listPools(
            com.formance.formance_sdk.models.operations.ListPoolsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/pools");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListPoolsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListPoolsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListPoolsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListPoolsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PoolsCursor out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PoolsCursor>() {});
                res.withPoolsCursor(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListTransferInitiationsRequestBuilder listTransferInitiations() {
        return new com.formance.formance_sdk.models.operations.ListTransferInitiationsRequestBuilder(this);
    }

    /**
     * List Transfer Initiations
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListTransferInitiationsResponse listTransferInitiations(
            com.formance.formance_sdk.models.operations.ListTransferInitiationsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/transfer-initiations");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListTransferInitiationsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListTransferInitiationsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListTransferInitiationsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListTransferInitiationsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TransferInitiationsCursor out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TransferInitiationsCursor>() {});
                res.withTransferInitiationsCursor(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.PaymentsgetAccountRequestBuilder paymentsgetAccount() {
        return new com.formance.formance_sdk.models.operations.PaymentsgetAccountRequestBuilder(this);
    }

    /**
     * Get an account
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.PaymentsgetAccountResponse paymentsgetAccount(
            com.formance.formance_sdk.models.operations.PaymentsgetAccountRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.PaymentsgetAccountRequest.class,
                baseUrl,
                "/api/payments/accounts/{accountId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.PaymentsgetAccountResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.PaymentsgetAccountResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.PaymentsgetAccountResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PaymentsAccountResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PaymentsAccountResponse>() {});
                res.withPaymentsAccountResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.PaymentsgetServerInfoRequestBuilder paymentsgetServerInfo() {
        return new com.formance.formance_sdk.models.operations.PaymentsgetServerInfoRequestBuilder(this);
    }

    /**
     * Get server info
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.PaymentsgetServerInfoResponse paymentsgetServerInfoDirect() throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/_info");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.PaymentsgetServerInfoResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.PaymentsgetServerInfoResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.PaymentsgetServerInfoResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ServerInfo out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ServerInfo>() {});
                res.withServerInfo(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.PaymentslistAccountsRequestBuilder paymentslistAccounts() {
        return new com.formance.formance_sdk.models.operations.PaymentslistAccountsRequestBuilder(this);
    }

    /**
     * List accounts
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.PaymentslistAccountsResponse paymentslistAccounts(
            com.formance.formance_sdk.models.operations.PaymentslistAccountsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/payments/accounts");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.PaymentslistAccountsRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.PaymentslistAccountsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.PaymentslistAccountsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.PaymentslistAccountsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.PaymentslistAccountsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.AccountsCursor out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.AccountsCursor>() {});
                res.withAccountsCursor(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ReadConnectorConfigRequestBuilder readConnectorConfig() {
        return new com.formance.formance_sdk.models.operations.ReadConnectorConfigRequestBuilder(this);
    }

    /**
     * Read the config of a connector
     * Read connector config
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.formance.formance_sdk.models.operations.ReadConnectorConfigResponse readConnectorConfig(
            com.formance.formance_sdk.models.operations.ReadConnectorConfigRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ReadConnectorConfigRequest.class,
                baseUrl,
                "/api/payments/connectors/{connector}/config",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ReadConnectorConfigResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ReadConnectorConfigResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ReadConnectorConfigResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ConnectorConfigResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ConnectorConfigResponse>() {});
                res.withConnectorConfigResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ReadConnectorConfigV1RequestBuilder readConnectorConfigV1() {
        return new com.formance.formance_sdk.models.operations.ReadConnectorConfigV1RequestBuilder(this);
    }

    /**
     * Read the config of a connector
     * Read connector config
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ReadConnectorConfigV1Response readConnectorConfigV1(
            com.formance.formance_sdk.models.operations.ReadConnectorConfigV1Request request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ReadConnectorConfigV1Request.class,
                baseUrl,
                "/api/payments/connectors/{connector}/{connectorId}/config",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ReadConnectorConfigV1Response.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ReadConnectorConfigV1Response
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ReadConnectorConfigV1Response res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ConnectorConfigResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ConnectorConfigResponse>() {});
                res.withConnectorConfigResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.RemoveAccountFromPoolRequestBuilder removeAccountFromPool() {
        return new com.formance.formance_sdk.models.operations.RemoveAccountFromPoolRequestBuilder(this);
    }

    /**
     * Remove an account from a pool
     * Remove an account from a pool by its id.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.RemoveAccountFromPoolResponse removeAccountFromPool(
            com.formance.formance_sdk.models.operations.RemoveAccountFromPoolRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.RemoveAccountFromPoolRequest.class,
                baseUrl,
                "/api/payments/pools/{poolId}/accounts/{accountId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.RemoveAccountFromPoolResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.RemoveAccountFromPoolResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.RemoveAccountFromPoolResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ResetConnectorRequestBuilder resetConnector() {
        return new com.formance.formance_sdk.models.operations.ResetConnectorRequestBuilder(this);
    }

    /**
     * Reset a connector
     * Reset a connector by its name.
     * It will remove the connector and ALL PAYMENTS generated with it.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.formance.formance_sdk.models.operations.ResetConnectorResponse resetConnector(
            com.formance.formance_sdk.models.operations.ResetConnectorRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ResetConnectorRequest.class,
                baseUrl,
                "/api/payments/connectors/{connector}/reset",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ResetConnectorResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ResetConnectorResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ResetConnectorResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ResetConnectorV1RequestBuilder resetConnectorV1() {
        return new com.formance.formance_sdk.models.operations.ResetConnectorV1RequestBuilder(this);
    }

    /**
     * Reset a connector
     * Reset a connector by its name.
     * It will remove the connector and ALL PAYMENTS generated with it.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ResetConnectorV1Response resetConnectorV1(
            com.formance.formance_sdk.models.operations.ResetConnectorV1Request request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ResetConnectorV1Request.class,
                baseUrl,
                "/api/payments/connectors/{connector}/{connectorId}/reset",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ResetConnectorV1Response.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ResetConnectorV1Response
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ResetConnectorV1Response res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.RetryTransferInitiationRequestBuilder retryTransferInitiation() {
        return new com.formance.formance_sdk.models.operations.RetryTransferInitiationRequestBuilder(this);
    }

    /**
     * Retry a failed transfer initiation
     * Retry a failed transfer initiation
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.RetryTransferInitiationResponse retryTransferInitiation(
            com.formance.formance_sdk.models.operations.RetryTransferInitiationRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.RetryTransferInitiationRequest.class,
                baseUrl,
                "/api/payments/transfer-initiations/{transferId}/retry",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.RetryTransferInitiationResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.RetryTransferInitiationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.RetryTransferInitiationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ReverseTransferInitiationRequestBuilder reverseTransferInitiation() {
        return new com.formance.formance_sdk.models.operations.ReverseTransferInitiationRequestBuilder(this);
    }

    /**
     * Reverse a transfer initiation
     * Reverse transfer initiation
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ReverseTransferInitiationResponse reverseTransferInitiation(
            com.formance.formance_sdk.models.operations.ReverseTransferInitiationRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ReverseTransferInitiationRequest.class,
                baseUrl,
                "/api/payments/transfer-initiations/{transferId}/reverse",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.ReverseTransferInitiationRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "reverseTransferInitiationRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ReverseTransferInitiationResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ReverseTransferInitiationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ReverseTransferInitiationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusRequestBuilder udpateTransferInitiationStatus() {
        return new com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusRequestBuilder(this);
    }

    /**
     * Update the status of a transfer initiation
     * Update a transfer initiation status
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusResponse udpateTransferInitiationStatus(
            com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusRequest.class,
                baseUrl,
                "/api/payments/transfer-initiations/{transferId}/status",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "updateTransferInitiationStatusRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.UninstallConnectorRequestBuilder uninstallConnector() {
        return new com.formance.formance_sdk.models.operations.UninstallConnectorRequestBuilder(this);
    }

    /**
     * Uninstall a connector
     * Uninstall a connector by its name.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.formance.formance_sdk.models.operations.UninstallConnectorResponse uninstallConnector(
            com.formance.formance_sdk.models.operations.UninstallConnectorRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.UninstallConnectorRequest.class,
                baseUrl,
                "/api/payments/connectors/{connector}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.UninstallConnectorResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.UninstallConnectorResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.UninstallConnectorResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.UninstallConnectorV1RequestBuilder uninstallConnectorV1() {
        return new com.formance.formance_sdk.models.operations.UninstallConnectorV1RequestBuilder(this);
    }

    /**
     * Uninstall a connector
     * Uninstall a connector by its name.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.UninstallConnectorV1Response uninstallConnectorV1(
            com.formance.formance_sdk.models.operations.UninstallConnectorV1Request request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.UninstallConnectorV1Request.class,
                baseUrl,
                "/api/payments/connectors/{connector}/{connectorId}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.UninstallConnectorV1Response.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.UninstallConnectorV1Response
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.UninstallConnectorV1Response res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataRequestBuilder updateBankAccountMetadata() {
        return new com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataRequestBuilder(this);
    }

    /**
     * Update metadata of a bank account
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataResponse updateBankAccountMetadata(
            com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataRequest.class,
                baseUrl,
                "/api/payments/bank-accounts/{bankAccountId}/metadata",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "updateBankAccountMetadataRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1RequestBuilder updateConnectorConfigV1() {
        return new com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1RequestBuilder(this);
    }

    /**
     * Update the config of a connector
     * Update connector config
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Response updateConnectorConfigV1(
            com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Request request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Request.class,
                baseUrl,
                "/api/payments/connectors/{connector}/{connectorId}/config",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Request>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "connectorConfig", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Response.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Response
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Response res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.UpdateMetadataRequestBuilder updateMetadata() {
        return new com.formance.formance_sdk.models.operations.UpdateMetadataRequestBuilder(this);
    }

    /**
     * Update metadata
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.UpdateMetadataResponse updateMetadata(
            com.formance.formance_sdk.models.operations.UpdateMetadataRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.UpdateMetadataRequest.class,
                baseUrl,
                "/api/payments/payments/{paymentId}/metadata",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.UpdateMetadataRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", true);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.UpdateMetadataResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.UpdateMetadataResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.UpdateMetadataResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }

}
