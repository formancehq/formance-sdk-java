/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;
import static com.formance.formance_sdk.operations.Operations.RequestlessOperation;

import com.formance.formance_sdk.models.operations.CreateClientRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateClientResponse;
import com.formance.formance_sdk.models.operations.CreateSecretRequest;
import com.formance.formance_sdk.models.operations.CreateSecretRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateSecretResponse;
import com.formance.formance_sdk.models.operations.DeleteClientRequest;
import com.formance.formance_sdk.models.operations.DeleteClientRequestBuilder;
import com.formance.formance_sdk.models.operations.DeleteClientResponse;
import com.formance.formance_sdk.models.operations.DeleteSecretRequest;
import com.formance.formance_sdk.models.operations.DeleteSecretRequestBuilder;
import com.formance.formance_sdk.models.operations.DeleteSecretResponse;
import com.formance.formance_sdk.models.operations.GetOIDCWellKnownsRequestBuilder;
import com.formance.formance_sdk.models.operations.GetOIDCWellKnownsResponse;
import com.formance.formance_sdk.models.operations.GetServerInfoRequestBuilder;
import com.formance.formance_sdk.models.operations.GetServerInfoResponse;
import com.formance.formance_sdk.models.operations.ListClientsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListClientsResponse;
import com.formance.formance_sdk.models.operations.ListUsersRequestBuilder;
import com.formance.formance_sdk.models.operations.ListUsersResponse;
import com.formance.formance_sdk.models.operations.ReadClientRequest;
import com.formance.formance_sdk.models.operations.ReadClientRequestBuilder;
import com.formance.formance_sdk.models.operations.ReadClientResponse;
import com.formance.formance_sdk.models.operations.ReadUserRequest;
import com.formance.formance_sdk.models.operations.ReadUserRequestBuilder;
import com.formance.formance_sdk.models.operations.ReadUserResponse;
import com.formance.formance_sdk.models.operations.UpdateClientRequest;
import com.formance.formance_sdk.models.operations.UpdateClientRequestBuilder;
import com.formance.formance_sdk.models.operations.UpdateClientResponse;
import com.formance.formance_sdk.models.shared.ClientOptions;
import com.formance.formance_sdk.operations.CreateClient;
import com.formance.formance_sdk.operations.CreateSecret;
import com.formance.formance_sdk.operations.DeleteClient;
import com.formance.formance_sdk.operations.DeleteSecret;
import com.formance.formance_sdk.operations.GetOIDCWellKnowns;
import com.formance.formance_sdk.operations.GetServerInfo;
import com.formance.formance_sdk.operations.ListClients;
import com.formance.formance_sdk.operations.ListUsers;
import com.formance.formance_sdk.operations.ReadClient;
import com.formance.formance_sdk.operations.ReadUser;
import com.formance.formance_sdk.operations.UpdateClient;
import java.lang.Exception;
import java.util.Optional;


public class AuthV1 {
    private final SDKConfiguration sdkConfiguration;

    AuthV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create client
     * 
     * @return The call builder
     */
    public CreateClientRequestBuilder createClient() {
        return new CreateClientRequestBuilder(sdkConfiguration);
    }

    /**
     * Create client
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateClientResponse createClientDirect() throws Exception {
        return createClient(Optional.empty());
    }

    /**
     * Create client
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateClientResponse createClient(Optional<? extends ClientOptions> request) throws Exception {
        RequestOperation<Optional<? extends ClientOptions>, CreateClientResponse> operation
              = new CreateClient.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Add a secret to a client
     * 
     * @return The call builder
     */
    public CreateSecretRequestBuilder createSecret() {
        return new CreateSecretRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a secret to a client
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateSecretResponse createSecret(CreateSecretRequest request) throws Exception {
        RequestOperation<CreateSecretRequest, CreateSecretResponse> operation
              = new CreateSecret.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete client
     * 
     * @return The call builder
     */
    public DeleteClientRequestBuilder deleteClient() {
        return new DeleteClientRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete client
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteClientResponse deleteClient(DeleteClientRequest request) throws Exception {
        RequestOperation<DeleteClientRequest, DeleteClientResponse> operation
              = new DeleteClient.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a secret from a client
     * 
     * @return The call builder
     */
    public DeleteSecretRequestBuilder deleteSecret() {
        return new DeleteSecretRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a secret from a client
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteSecretResponse deleteSecret(DeleteSecretRequest request) throws Exception {
        RequestOperation<DeleteSecretRequest, DeleteSecretResponse> operation
              = new DeleteSecret.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve OpenID connect well-knowns.
     * 
     * @return The call builder
     */
    public GetOIDCWellKnownsRequestBuilder getOIDCWellKnowns() {
        return new GetOIDCWellKnownsRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve OpenID connect well-knowns.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOIDCWellKnownsResponse getOIDCWellKnownsDirect() throws Exception {
        RequestlessOperation<GetOIDCWellKnownsResponse> operation
            = new GetOIDCWellKnowns.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get server info
     * 
     * @return The call builder
     */
    public GetServerInfoRequestBuilder getServerInfo() {
        return new GetServerInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get server info
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetServerInfoResponse getServerInfoDirect() throws Exception {
        RequestlessOperation<GetServerInfoResponse> operation
            = new GetServerInfo.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * List clients
     * 
     * @return The call builder
     */
    public ListClientsRequestBuilder listClients() {
        return new ListClientsRequestBuilder(sdkConfiguration);
    }

    /**
     * List clients
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListClientsResponse listClientsDirect() throws Exception {
        RequestlessOperation<ListClientsResponse> operation
            = new ListClients.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * List users
     * 
     * <p>List users
     * 
     * @return The call builder
     */
    public ListUsersRequestBuilder listUsers() {
        return new ListUsersRequestBuilder(sdkConfiguration);
    }

    /**
     * List users
     * 
     * <p>List users
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListUsersResponse listUsersDirect() throws Exception {
        RequestlessOperation<ListUsersResponse> operation
            = new ListUsers.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Read client
     * 
     * @return The call builder
     */
    public ReadClientRequestBuilder readClient() {
        return new ReadClientRequestBuilder(sdkConfiguration);
    }

    /**
     * Read client
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ReadClientResponse readClient(ReadClientRequest request) throws Exception {
        RequestOperation<ReadClientRequest, ReadClientResponse> operation
              = new ReadClient.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Read user
     * 
     * <p>Read user
     * 
     * @return The call builder
     */
    public ReadUserRequestBuilder readUser() {
        return new ReadUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Read user
     * 
     * <p>Read user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ReadUserResponse readUser(ReadUserRequest request) throws Exception {
        RequestOperation<ReadUserRequest, ReadUserResponse> operation
              = new ReadUser.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update client
     * 
     * @return The call builder
     */
    public UpdateClientRequestBuilder updateClient() {
        return new UpdateClientRequestBuilder(sdkConfiguration);
    }

    /**
     * Update client
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateClientResponse updateClient(UpdateClientRequest request) throws Exception {
        RequestOperation<UpdateClientRequest, UpdateClientResponse> operation
              = new UpdateClient.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
