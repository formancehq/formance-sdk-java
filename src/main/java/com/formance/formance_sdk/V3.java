/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;
import static com.formance.formance_sdk.operations.Operations.RequestlessOperation;

import com.formance.formance_sdk.models.operations.V3AddAccountToPoolRequest;
import com.formance.formance_sdk.models.operations.V3AddAccountToPoolRequestBuilder;
import com.formance.formance_sdk.models.operations.V3AddAccountToPoolResponse;
import com.formance.formance_sdk.models.operations.V3AddBankAccountToPaymentServiceUserRequest;
import com.formance.formance_sdk.models.operations.V3AddBankAccountToPaymentServiceUserRequestBuilder;
import com.formance.formance_sdk.models.operations.V3AddBankAccountToPaymentServiceUserResponse;
import com.formance.formance_sdk.models.operations.V3ApprovePaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3ApprovePaymentInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ApprovePaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3CreateAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.V3CreateAccountResponse;
import com.formance.formance_sdk.models.operations.V3CreateBankAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.V3CreateBankAccountResponse;
import com.formance.formance_sdk.models.operations.V3CreatePaymentRequestBuilder;
import com.formance.formance_sdk.models.operations.V3CreatePaymentResponse;
import com.formance.formance_sdk.models.operations.V3CreatePaymentServiceUserRequestBuilder;
import com.formance.formance_sdk.models.operations.V3CreatePaymentServiceUserResponse;
import com.formance.formance_sdk.models.operations.V3CreatePoolRequestBuilder;
import com.formance.formance_sdk.models.operations.V3CreatePoolResponse;
import com.formance.formance_sdk.models.operations.V3DeletePaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3DeletePaymentInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.V3DeletePaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3DeletePoolRequest;
import com.formance.formance_sdk.models.operations.V3DeletePoolRequestBuilder;
import com.formance.formance_sdk.models.operations.V3DeletePoolResponse;
import com.formance.formance_sdk.models.operations.V3ForwardBankAccountRequest;
import com.formance.formance_sdk.models.operations.V3ForwardBankAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ForwardBankAccountResponse;
import com.formance.formance_sdk.models.operations.V3ForwardPaymentServiceUserBankAccountRequest;
import com.formance.formance_sdk.models.operations.V3ForwardPaymentServiceUserBankAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ForwardPaymentServiceUserBankAccountResponse;
import com.formance.formance_sdk.models.operations.V3GetAccountBalancesRequest;
import com.formance.formance_sdk.models.operations.V3GetAccountBalancesRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetAccountBalancesResponse;
import com.formance.formance_sdk.models.operations.V3GetAccountRequest;
import com.formance.formance_sdk.models.operations.V3GetAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetAccountResponse;
import com.formance.formance_sdk.models.operations.V3GetBankAccountRequest;
import com.formance.formance_sdk.models.operations.V3GetBankAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetBankAccountResponse;
import com.formance.formance_sdk.models.operations.V3GetConnectorConfigRequest;
import com.formance.formance_sdk.models.operations.V3GetConnectorConfigRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetConnectorConfigResponse;
import com.formance.formance_sdk.models.operations.V3GetConnectorScheduleRequest;
import com.formance.formance_sdk.models.operations.V3GetConnectorScheduleRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetConnectorScheduleResponse;
import com.formance.formance_sdk.models.operations.V3GetPaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3GetPaymentInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetPaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3GetPaymentRequest;
import com.formance.formance_sdk.models.operations.V3GetPaymentRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetPaymentResponse;
import com.formance.formance_sdk.models.operations.V3GetPaymentServiceUserRequest;
import com.formance.formance_sdk.models.operations.V3GetPaymentServiceUserRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetPaymentServiceUserResponse;
import com.formance.formance_sdk.models.operations.V3GetPoolBalancesLatestRequest;
import com.formance.formance_sdk.models.operations.V3GetPoolBalancesLatestRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetPoolBalancesLatestResponse;
import com.formance.formance_sdk.models.operations.V3GetPoolBalancesRequest;
import com.formance.formance_sdk.models.operations.V3GetPoolBalancesRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetPoolBalancesResponse;
import com.formance.formance_sdk.models.operations.V3GetPoolRequest;
import com.formance.formance_sdk.models.operations.V3GetPoolRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetPoolResponse;
import com.formance.formance_sdk.models.operations.V3GetTaskRequest;
import com.formance.formance_sdk.models.operations.V3GetTaskRequestBuilder;
import com.formance.formance_sdk.models.operations.V3GetTaskResponse;
import com.formance.formance_sdk.models.operations.V3InitiatePaymentRequest;
import com.formance.formance_sdk.models.operations.V3InitiatePaymentRequestBuilder;
import com.formance.formance_sdk.models.operations.V3InitiatePaymentResponse;
import com.formance.formance_sdk.models.operations.V3InstallConnectorRequest;
import com.formance.formance_sdk.models.operations.V3InstallConnectorRequestBuilder;
import com.formance.formance_sdk.models.operations.V3InstallConnectorResponse;
import com.formance.formance_sdk.models.operations.V3ListAccountsRequest;
import com.formance.formance_sdk.models.operations.V3ListAccountsRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListAccountsResponse;
import com.formance.formance_sdk.models.operations.V3ListBankAccountsRequest;
import com.formance.formance_sdk.models.operations.V3ListBankAccountsRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListBankAccountsResponse;
import com.formance.formance_sdk.models.operations.V3ListConnectorConfigsRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListConnectorConfigsResponse;
import com.formance.formance_sdk.models.operations.V3ListConnectorScheduleInstancesRequest;
import com.formance.formance_sdk.models.operations.V3ListConnectorScheduleInstancesRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListConnectorScheduleInstancesResponse;
import com.formance.formance_sdk.models.operations.V3ListConnectorSchedulesRequest;
import com.formance.formance_sdk.models.operations.V3ListConnectorSchedulesRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListConnectorSchedulesResponse;
import com.formance.formance_sdk.models.operations.V3ListConnectorsRequest;
import com.formance.formance_sdk.models.operations.V3ListConnectorsRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListConnectorsResponse;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationAdjustmentsRequest;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationAdjustmentsRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationAdjustmentsResponse;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationRelatedPaymentsRequest;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationRelatedPaymentsRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationRelatedPaymentsResponse;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationsRequest;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationsRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationsResponse;
import com.formance.formance_sdk.models.operations.V3ListPaymentServiceUsersRequest;
import com.formance.formance_sdk.models.operations.V3ListPaymentServiceUsersRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListPaymentServiceUsersResponse;
import com.formance.formance_sdk.models.operations.V3ListPaymentsRequest;
import com.formance.formance_sdk.models.operations.V3ListPaymentsRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListPaymentsResponse;
import com.formance.formance_sdk.models.operations.V3ListPoolsRequest;
import com.formance.formance_sdk.models.operations.V3ListPoolsRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ListPoolsResponse;
import com.formance.formance_sdk.models.operations.V3RejectPaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3RejectPaymentInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.V3RejectPaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3RemoveAccountFromPoolRequest;
import com.formance.formance_sdk.models.operations.V3RemoveAccountFromPoolRequestBuilder;
import com.formance.formance_sdk.models.operations.V3RemoveAccountFromPoolResponse;
import com.formance.formance_sdk.models.operations.V3ResetConnectorRequest;
import com.formance.formance_sdk.models.operations.V3ResetConnectorRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ResetConnectorResponse;
import com.formance.formance_sdk.models.operations.V3RetryPaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3RetryPaymentInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.V3RetryPaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3ReversePaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3ReversePaymentInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.V3ReversePaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3UninstallConnectorRequest;
import com.formance.formance_sdk.models.operations.V3UninstallConnectorRequestBuilder;
import com.formance.formance_sdk.models.operations.V3UninstallConnectorResponse;
import com.formance.formance_sdk.models.operations.V3UpdateBankAccountMetadataRequest;
import com.formance.formance_sdk.models.operations.V3UpdateBankAccountMetadataRequestBuilder;
import com.formance.formance_sdk.models.operations.V3UpdateBankAccountMetadataResponse;
import com.formance.formance_sdk.models.operations.V3UpdateConnectorConfigRequest;
import com.formance.formance_sdk.models.operations.V3UpdateConnectorConfigRequestBuilder;
import com.formance.formance_sdk.models.operations.V3UpdateConnectorConfigResponse;
import com.formance.formance_sdk.models.operations.V3UpdatePaymentMetadataRequest;
import com.formance.formance_sdk.models.operations.V3UpdatePaymentMetadataRequestBuilder;
import com.formance.formance_sdk.models.operations.V3UpdatePaymentMetadataResponse;
import com.formance.formance_sdk.models.shared.V3CreateAccountRequest;
import com.formance.formance_sdk.models.shared.V3CreateBankAccountRequest;
import com.formance.formance_sdk.models.shared.V3CreatePaymentRequest;
import com.formance.formance_sdk.models.shared.V3CreatePaymentServiceUserRequest;
import com.formance.formance_sdk.models.shared.V3CreatePoolRequest;
import com.formance.formance_sdk.operations.V3AddAccountToPool;
import com.formance.formance_sdk.operations.V3AddBankAccountToPaymentServiceUser;
import com.formance.formance_sdk.operations.V3ApprovePaymentInitiation;
import com.formance.formance_sdk.operations.V3CreateAccount;
import com.formance.formance_sdk.operations.V3CreateBankAccount;
import com.formance.formance_sdk.operations.V3CreatePayment;
import com.formance.formance_sdk.operations.V3CreatePaymentServiceUser;
import com.formance.formance_sdk.operations.V3CreatePool;
import com.formance.formance_sdk.operations.V3DeletePaymentInitiation;
import com.formance.formance_sdk.operations.V3DeletePool;
import com.formance.formance_sdk.operations.V3ForwardBankAccount;
import com.formance.formance_sdk.operations.V3ForwardPaymentServiceUserBankAccount;
import com.formance.formance_sdk.operations.V3GetAccount;
import com.formance.formance_sdk.operations.V3GetAccountBalances;
import com.formance.formance_sdk.operations.V3GetBankAccount;
import com.formance.formance_sdk.operations.V3GetConnectorConfig;
import com.formance.formance_sdk.operations.V3GetConnectorSchedule;
import com.formance.formance_sdk.operations.V3GetPayment;
import com.formance.formance_sdk.operations.V3GetPaymentInitiation;
import com.formance.formance_sdk.operations.V3GetPaymentServiceUser;
import com.formance.formance_sdk.operations.V3GetPool;
import com.formance.formance_sdk.operations.V3GetPoolBalances;
import com.formance.formance_sdk.operations.V3GetPoolBalancesLatest;
import com.formance.formance_sdk.operations.V3GetTask;
import com.formance.formance_sdk.operations.V3InitiatePayment;
import com.formance.formance_sdk.operations.V3InstallConnector;
import com.formance.formance_sdk.operations.V3ListAccounts;
import com.formance.formance_sdk.operations.V3ListBankAccounts;
import com.formance.formance_sdk.operations.V3ListConnectorConfigs;
import com.formance.formance_sdk.operations.V3ListConnectorScheduleInstances;
import com.formance.formance_sdk.operations.V3ListConnectorSchedules;
import com.formance.formance_sdk.operations.V3ListConnectors;
import com.formance.formance_sdk.operations.V3ListPaymentInitiationAdjustments;
import com.formance.formance_sdk.operations.V3ListPaymentInitiationRelatedPayments;
import com.formance.formance_sdk.operations.V3ListPaymentInitiations;
import com.formance.formance_sdk.operations.V3ListPaymentServiceUsers;
import com.formance.formance_sdk.operations.V3ListPayments;
import com.formance.formance_sdk.operations.V3ListPools;
import com.formance.formance_sdk.operations.V3RejectPaymentInitiation;
import com.formance.formance_sdk.operations.V3RemoveAccountFromPool;
import com.formance.formance_sdk.operations.V3ResetConnector;
import com.formance.formance_sdk.operations.V3RetryPaymentInitiation;
import com.formance.formance_sdk.operations.V3ReversePaymentInitiation;
import com.formance.formance_sdk.operations.V3UninstallConnector;
import com.formance.formance_sdk.operations.V3UpdateBankAccountMetadata;
import com.formance.formance_sdk.operations.V3UpdateConnectorConfig;
import com.formance.formance_sdk.operations.V3UpdatePaymentMetadata;
import java.lang.Exception;
import java.util.Optional;


public class V3 {
    private final SDKConfiguration sdkConfiguration;

    V3(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Add an account to a pool
     * 
     * @return The call builder
     */
    public V3AddAccountToPoolRequestBuilder addAccountToPool() {
        return new V3AddAccountToPoolRequestBuilder(sdkConfiguration);
    }

    /**
     * Add an account to a pool
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3AddAccountToPoolResponse addAccountToPool(V3AddAccountToPoolRequest request) throws Exception {
        RequestOperation<V3AddAccountToPoolRequest, V3AddAccountToPoolResponse> operation
              = new V3AddAccountToPool.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Add a bank account to a payment service user
     * 
     * @return The call builder
     */
    public V3AddBankAccountToPaymentServiceUserRequestBuilder addBankAccountToPaymentServiceUser() {
        return new V3AddBankAccountToPaymentServiceUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a bank account to a payment service user
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3AddBankAccountToPaymentServiceUserResponse addBankAccountToPaymentServiceUser(V3AddBankAccountToPaymentServiceUserRequest request) throws Exception {
        RequestOperation<V3AddBankAccountToPaymentServiceUserRequest, V3AddBankAccountToPaymentServiceUserResponse> operation
              = new V3AddBankAccountToPaymentServiceUser.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Approve a payment initiation
     * 
     * @return The call builder
     */
    public V3ApprovePaymentInitiationRequestBuilder approvePaymentInitiation() {
        return new V3ApprovePaymentInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Approve a payment initiation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ApprovePaymentInitiationResponse approvePaymentInitiation(V3ApprovePaymentInitiationRequest request) throws Exception {
        RequestOperation<V3ApprovePaymentInitiationRequest, V3ApprovePaymentInitiationResponse> operation
              = new V3ApprovePaymentInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a formance account object. This object will not be forwarded to the connector. It is only used for internal purposes.
     * 
     * @return The call builder
     */
    public V3CreateAccountRequestBuilder createAccount() {
        return new V3CreateAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a formance account object. This object will not be forwarded to the connector. It is only used for internal purposes.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CreateAccountResponse createAccountDirect() throws Exception {
        return createAccount(Optional.empty());
    }

    /**
     * Create a formance account object. This object will not be forwarded to the connector. It is only used for internal purposes.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CreateAccountResponse createAccount(Optional<? extends V3CreateAccountRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3CreateAccountRequest>, V3CreateAccountResponse> operation
              = new V3CreateAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a formance bank account object. This object will not be forwarded to the connector until you called the forwardBankAccount method.
     * 
     * @return The call builder
     */
    public V3CreateBankAccountRequestBuilder createBankAccount() {
        return new V3CreateBankAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a formance bank account object. This object will not be forwarded to the connector until you called the forwardBankAccount method.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CreateBankAccountResponse createBankAccountDirect() throws Exception {
        return createBankAccount(Optional.empty());
    }

    /**
     * Create a formance bank account object. This object will not be forwarded to the connector until you called the forwardBankAccount method.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CreateBankAccountResponse createBankAccount(Optional<? extends V3CreateBankAccountRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3CreateBankAccountRequest>, V3CreateBankAccountResponse> operation
              = new V3CreateBankAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a formance payment object. This object will not be forwarded to the connector. It is only used for internal purposes.
     * 
     * @return The call builder
     */
    public V3CreatePaymentRequestBuilder createPayment() {
        return new V3CreatePaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a formance payment object. This object will not be forwarded to the connector. It is only used for internal purposes.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CreatePaymentResponse createPaymentDirect() throws Exception {
        return createPayment(Optional.empty());
    }

    /**
     * Create a formance payment object. This object will not be forwarded to the connector. It is only used for internal purposes.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CreatePaymentResponse createPayment(Optional<? extends V3CreatePaymentRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3CreatePaymentRequest>, V3CreatePaymentResponse> operation
              = new V3CreatePayment.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a formance payment service user object
     * 
     * @return The call builder
     */
    public V3CreatePaymentServiceUserRequestBuilder createPaymentServiceUser() {
        return new V3CreatePaymentServiceUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a formance payment service user object
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CreatePaymentServiceUserResponse createPaymentServiceUserDirect() throws Exception {
        return createPaymentServiceUser(Optional.empty());
    }

    /**
     * Create a formance payment service user object
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CreatePaymentServiceUserResponse createPaymentServiceUser(Optional<? extends V3CreatePaymentServiceUserRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3CreatePaymentServiceUserRequest>, V3CreatePaymentServiceUserResponse> operation
              = new V3CreatePaymentServiceUser.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a formance pool object
     * 
     * @return The call builder
     */
    public V3CreatePoolRequestBuilder createPool() {
        return new V3CreatePoolRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a formance pool object
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CreatePoolResponse createPoolDirect() throws Exception {
        return createPool(Optional.empty());
    }

    /**
     * Create a formance pool object
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3CreatePoolResponse createPool(Optional<? extends V3CreatePoolRequest> request) throws Exception {
        RequestOperation<Optional<? extends V3CreatePoolRequest>, V3CreatePoolResponse> operation
              = new V3CreatePool.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a payment initiation by ID
     * 
     * @return The call builder
     */
    public V3DeletePaymentInitiationRequestBuilder deletePaymentInitiation() {
        return new V3DeletePaymentInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a payment initiation by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DeletePaymentInitiationResponse deletePaymentInitiation(V3DeletePaymentInitiationRequest request) throws Exception {
        RequestOperation<V3DeletePaymentInitiationRequest, V3DeletePaymentInitiationResponse> operation
              = new V3DeletePaymentInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a pool by ID
     * 
     * @return The call builder
     */
    public V3DeletePoolRequestBuilder deletePool() {
        return new V3DeletePoolRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a pool by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3DeletePoolResponse deletePool(V3DeletePoolRequest request) throws Exception {
        RequestOperation<V3DeletePoolRequest, V3DeletePoolResponse> operation
              = new V3DeletePool.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Forward a Bank Account to a PSP for creation
     * 
     * @return The call builder
     */
    public V3ForwardBankAccountRequestBuilder forwardBankAccount() {
        return new V3ForwardBankAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Forward a Bank Account to a PSP for creation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ForwardBankAccountResponse forwardBankAccount(V3ForwardBankAccountRequest request) throws Exception {
        RequestOperation<V3ForwardBankAccountRequest, V3ForwardBankAccountResponse> operation
              = new V3ForwardBankAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Forward a payment service user's bank account to a connector
     * 
     * @return The call builder
     */
    public V3ForwardPaymentServiceUserBankAccountRequestBuilder forwardPaymentServiceUserBankAccount() {
        return new V3ForwardPaymentServiceUserBankAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Forward a payment service user's bank account to a connector
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ForwardPaymentServiceUserBankAccountResponse forwardPaymentServiceUserBankAccount(V3ForwardPaymentServiceUserBankAccountRequest request) throws Exception {
        RequestOperation<V3ForwardPaymentServiceUserBankAccountRequest, V3ForwardPaymentServiceUserBankAccountResponse> operation
              = new V3ForwardPaymentServiceUserBankAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get an account by ID
     * 
     * @return The call builder
     */
    public V3GetAccountRequestBuilder getAccount() {
        return new V3GetAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get an account by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetAccountResponse getAccount(V3GetAccountRequest request) throws Exception {
        RequestOperation<V3GetAccountRequest, V3GetAccountResponse> operation
              = new V3GetAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get account balances
     * 
     * @return The call builder
     */
    public V3GetAccountBalancesRequestBuilder getAccountBalances() {
        return new V3GetAccountBalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get account balances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetAccountBalancesResponse getAccountBalances(V3GetAccountBalancesRequest request) throws Exception {
        RequestOperation<V3GetAccountBalancesRequest, V3GetAccountBalancesResponse> operation
              = new V3GetAccountBalances.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a Bank Account by ID
     * 
     * @return The call builder
     */
    public V3GetBankAccountRequestBuilder getBankAccount() {
        return new V3GetBankAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a Bank Account by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetBankAccountResponse getBankAccount(V3GetBankAccountRequest request) throws Exception {
        RequestOperation<V3GetBankAccountRequest, V3GetBankAccountResponse> operation
              = new V3GetBankAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a connector configuration by ID
     * 
     * @return The call builder
     */
    public V3GetConnectorConfigRequestBuilder getConnectorConfig() {
        return new V3GetConnectorConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a connector configuration by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetConnectorConfigResponse getConnectorConfig(V3GetConnectorConfigRequest request) throws Exception {
        RequestOperation<V3GetConnectorConfigRequest, V3GetConnectorConfigResponse> operation
              = new V3GetConnectorConfig.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a connector schedule by ID
     * 
     * @return The call builder
     */
    public V3GetConnectorScheduleRequestBuilder getConnectorSchedule() {
        return new V3GetConnectorScheduleRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a connector schedule by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetConnectorScheduleResponse getConnectorSchedule(V3GetConnectorScheduleRequest request) throws Exception {
        RequestOperation<V3GetConnectorScheduleRequest, V3GetConnectorScheduleResponse> operation
              = new V3GetConnectorSchedule.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a payment by ID
     * 
     * @return The call builder
     */
    public V3GetPaymentRequestBuilder getPayment() {
        return new V3GetPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a payment by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetPaymentResponse getPayment(V3GetPaymentRequest request) throws Exception {
        RequestOperation<V3GetPaymentRequest, V3GetPaymentResponse> operation
              = new V3GetPayment.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a payment initiation by ID
     * 
     * @return The call builder
     */
    public V3GetPaymentInitiationRequestBuilder getPaymentInitiation() {
        return new V3GetPaymentInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a payment initiation by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetPaymentInitiationResponse getPaymentInitiation(V3GetPaymentInitiationRequest request) throws Exception {
        RequestOperation<V3GetPaymentInitiationRequest, V3GetPaymentInitiationResponse> operation
              = new V3GetPaymentInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a payment service user by ID
     * 
     * @return The call builder
     */
    public V3GetPaymentServiceUserRequestBuilder getPaymentServiceUser() {
        return new V3GetPaymentServiceUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a payment service user by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetPaymentServiceUserResponse getPaymentServiceUser(V3GetPaymentServiceUserRequest request) throws Exception {
        RequestOperation<V3GetPaymentServiceUserRequest, V3GetPaymentServiceUserResponse> operation
              = new V3GetPaymentServiceUser.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a pool by ID
     * 
     * @return The call builder
     */
    public V3GetPoolRequestBuilder getPool() {
        return new V3GetPoolRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a pool by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetPoolResponse getPool(V3GetPoolRequest request) throws Exception {
        RequestOperation<V3GetPoolRequest, V3GetPoolResponse> operation
              = new V3GetPool.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get historical pool balances from a particular point in time
     * 
     * @return The call builder
     */
    public V3GetPoolBalancesRequestBuilder getPoolBalances() {
        return new V3GetPoolBalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get historical pool balances from a particular point in time
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetPoolBalancesResponse getPoolBalances(V3GetPoolBalancesRequest request) throws Exception {
        RequestOperation<V3GetPoolBalancesRequest, V3GetPoolBalancesResponse> operation
              = new V3GetPoolBalances.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get latest pool balances
     * 
     * @return The call builder
     */
    public V3GetPoolBalancesLatestRequestBuilder getPoolBalancesLatest() {
        return new V3GetPoolBalancesLatestRequestBuilder(sdkConfiguration);
    }

    /**
     * Get latest pool balances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetPoolBalancesLatestResponse getPoolBalancesLatest(V3GetPoolBalancesLatestRequest request) throws Exception {
        RequestOperation<V3GetPoolBalancesLatestRequest, V3GetPoolBalancesLatestResponse> operation
              = new V3GetPoolBalancesLatest.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a task and its result by ID
     * 
     * @return The call builder
     */
    public V3GetTaskRequestBuilder getTask() {
        return new V3GetTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a task and its result by ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3GetTaskResponse getTask(V3GetTaskRequest request) throws Exception {
        RequestOperation<V3GetTaskRequest, V3GetTaskResponse> operation
              = new V3GetTask.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Initiate a payment
     * 
     * @return The call builder
     */
    public V3InitiatePaymentRequestBuilder initiatePayment() {
        return new V3InitiatePaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Initiate a payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3InitiatePaymentResponse initiatePayment(V3InitiatePaymentRequest request) throws Exception {
        RequestOperation<V3InitiatePaymentRequest, V3InitiatePaymentResponse> operation
              = new V3InitiatePayment.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Install a connector
     * 
     * @return The call builder
     */
    public V3InstallConnectorRequestBuilder installConnector() {
        return new V3InstallConnectorRequestBuilder(sdkConfiguration);
    }

    /**
     * Install a connector
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3InstallConnectorResponse installConnector(V3InstallConnectorRequest request) throws Exception {
        RequestOperation<V3InstallConnectorRequest, V3InstallConnectorResponse> operation
              = new V3InstallConnector.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all accounts
     * 
     * @return The call builder
     */
    public V3ListAccountsRequestBuilder listAccounts() {
        return new V3ListAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListAccountsResponse listAccounts(V3ListAccountsRequest request) throws Exception {
        RequestOperation<V3ListAccountsRequest, V3ListAccountsResponse> operation
              = new V3ListAccounts.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all bank accounts
     * 
     * @return The call builder
     */
    public V3ListBankAccountsRequestBuilder listBankAccounts() {
        return new V3ListBankAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all bank accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListBankAccountsResponse listBankAccounts(V3ListBankAccountsRequest request) throws Exception {
        RequestOperation<V3ListBankAccountsRequest, V3ListBankAccountsResponse> operation
              = new V3ListBankAccounts.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all connector configurations
     * 
     * @return The call builder
     */
    public V3ListConnectorConfigsRequestBuilder listConnectorConfigs() {
        return new V3ListConnectorConfigsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all connector configurations
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListConnectorConfigsResponse listConnectorConfigsDirect() throws Exception {
        RequestlessOperation<V3ListConnectorConfigsResponse> operation
            = new V3ListConnectorConfigs.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * List all connector schedule instances
     * 
     * @return The call builder
     */
    public V3ListConnectorScheduleInstancesRequestBuilder listConnectorScheduleInstances() {
        return new V3ListConnectorScheduleInstancesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all connector schedule instances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListConnectorScheduleInstancesResponse listConnectorScheduleInstances(V3ListConnectorScheduleInstancesRequest request) throws Exception {
        RequestOperation<V3ListConnectorScheduleInstancesRequest, V3ListConnectorScheduleInstancesResponse> operation
              = new V3ListConnectorScheduleInstances.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all connector schedules
     * 
     * @return The call builder
     */
    public V3ListConnectorSchedulesRequestBuilder listConnectorSchedules() {
        return new V3ListConnectorSchedulesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all connector schedules
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListConnectorSchedulesResponse listConnectorSchedules(V3ListConnectorSchedulesRequest request) throws Exception {
        RequestOperation<V3ListConnectorSchedulesRequest, V3ListConnectorSchedulesResponse> operation
              = new V3ListConnectorSchedules.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all connectors
     * 
     * @return The call builder
     */
    public V3ListConnectorsRequestBuilder listConnectors() {
        return new V3ListConnectorsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all connectors
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListConnectorsResponse listConnectors(V3ListConnectorsRequest request) throws Exception {
        RequestOperation<V3ListConnectorsRequest, V3ListConnectorsResponse> operation
              = new V3ListConnectors.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all payment initiation adjustments
     * 
     * @return The call builder
     */
    public V3ListPaymentInitiationAdjustmentsRequestBuilder listPaymentInitiationAdjustments() {
        return new V3ListPaymentInitiationAdjustmentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payment initiation adjustments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListPaymentInitiationAdjustmentsResponse listPaymentInitiationAdjustments(V3ListPaymentInitiationAdjustmentsRequest request) throws Exception {
        RequestOperation<V3ListPaymentInitiationAdjustmentsRequest, V3ListPaymentInitiationAdjustmentsResponse> operation
              = new V3ListPaymentInitiationAdjustments.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all payments related to a payment initiation
     * 
     * @return The call builder
     */
    public V3ListPaymentInitiationRelatedPaymentsRequestBuilder listPaymentInitiationRelatedPayments() {
        return new V3ListPaymentInitiationRelatedPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payments related to a payment initiation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListPaymentInitiationRelatedPaymentsResponse listPaymentInitiationRelatedPayments(V3ListPaymentInitiationRelatedPaymentsRequest request) throws Exception {
        RequestOperation<V3ListPaymentInitiationRelatedPaymentsRequest, V3ListPaymentInitiationRelatedPaymentsResponse> operation
              = new V3ListPaymentInitiationRelatedPayments.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all payment initiations
     * 
     * @return The call builder
     */
    public V3ListPaymentInitiationsRequestBuilder listPaymentInitiations() {
        return new V3ListPaymentInitiationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payment initiations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListPaymentInitiationsResponse listPaymentInitiations(V3ListPaymentInitiationsRequest request) throws Exception {
        RequestOperation<V3ListPaymentInitiationsRequest, V3ListPaymentInitiationsResponse> operation
              = new V3ListPaymentInitiations.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all payment service users
     * 
     * @return The call builder
     */
    public V3ListPaymentServiceUsersRequestBuilder listPaymentServiceUsers() {
        return new V3ListPaymentServiceUsersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payment service users
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListPaymentServiceUsersResponse listPaymentServiceUsers(V3ListPaymentServiceUsersRequest request) throws Exception {
        RequestOperation<V3ListPaymentServiceUsersRequest, V3ListPaymentServiceUsersResponse> operation
              = new V3ListPaymentServiceUsers.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all payments
     * 
     * @return The call builder
     */
    public V3ListPaymentsRequestBuilder listPayments() {
        return new V3ListPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListPaymentsResponse listPayments(V3ListPaymentsRequest request) throws Exception {
        RequestOperation<V3ListPaymentsRequest, V3ListPaymentsResponse> operation
              = new V3ListPayments.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all pools
     * 
     * @return The call builder
     */
    public V3ListPoolsRequestBuilder listPools() {
        return new V3ListPoolsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all pools
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ListPoolsResponse listPools(V3ListPoolsRequest request) throws Exception {
        RequestOperation<V3ListPoolsRequest, V3ListPoolsResponse> operation
              = new V3ListPools.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Reject a payment initiation
     * 
     * @return The call builder
     */
    public V3RejectPaymentInitiationRequestBuilder rejectPaymentInitiation() {
        return new V3RejectPaymentInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Reject a payment initiation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3RejectPaymentInitiationResponse rejectPaymentInitiation(V3RejectPaymentInitiationRequest request) throws Exception {
        RequestOperation<V3RejectPaymentInitiationRequest, V3RejectPaymentInitiationResponse> operation
              = new V3RejectPaymentInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove an account from a pool
     * 
     * @return The call builder
     */
    public V3RemoveAccountFromPoolRequestBuilder removeAccountFromPool() {
        return new V3RemoveAccountFromPoolRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an account from a pool
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3RemoveAccountFromPoolResponse removeAccountFromPool(V3RemoveAccountFromPoolRequest request) throws Exception {
        RequestOperation<V3RemoveAccountFromPoolRequest, V3RemoveAccountFromPoolResponse> operation
              = new V3RemoveAccountFromPool.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Reset a connector. Be aware that this will delete all data and stop all existing tasks like payment initiations and bank account creations.
     * 
     * @return The call builder
     */
    public V3ResetConnectorRequestBuilder resetConnector() {
        return new V3ResetConnectorRequestBuilder(sdkConfiguration);
    }

    /**
     * Reset a connector. Be aware that this will delete all data and stop all existing tasks like payment initiations and bank account creations.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ResetConnectorResponse resetConnector(V3ResetConnectorRequest request) throws Exception {
        RequestOperation<V3ResetConnectorRequest, V3ResetConnectorResponse> operation
              = new V3ResetConnector.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retry a payment initiation
     * 
     * @return The call builder
     */
    public V3RetryPaymentInitiationRequestBuilder retryPaymentInitiation() {
        return new V3RetryPaymentInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Retry a payment initiation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3RetryPaymentInitiationResponse retryPaymentInitiation(V3RetryPaymentInitiationRequest request) throws Exception {
        RequestOperation<V3RetryPaymentInitiationRequest, V3RetryPaymentInitiationResponse> operation
              = new V3RetryPaymentInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Reverse a payment initiation
     * 
     * @return The call builder
     */
    public V3ReversePaymentInitiationRequestBuilder reversePaymentInitiation() {
        return new V3ReversePaymentInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Reverse a payment initiation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3ReversePaymentInitiationResponse reversePaymentInitiation(V3ReversePaymentInitiationRequest request) throws Exception {
        RequestOperation<V3ReversePaymentInitiationRequest, V3ReversePaymentInitiationResponse> operation
              = new V3ReversePaymentInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Uninstall a connector
     * 
     * @return The call builder
     */
    public V3UninstallConnectorRequestBuilder uninstallConnector() {
        return new V3UninstallConnectorRequestBuilder(sdkConfiguration);
    }

    /**
     * Uninstall a connector
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3UninstallConnectorResponse uninstallConnector(V3UninstallConnectorRequest request) throws Exception {
        RequestOperation<V3UninstallConnectorRequest, V3UninstallConnectorResponse> operation
              = new V3UninstallConnector.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a bank account's metadata
     * 
     * @return The call builder
     */
    public V3UpdateBankAccountMetadataRequestBuilder updateBankAccountMetadata() {
        return new V3UpdateBankAccountMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a bank account's metadata
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3UpdateBankAccountMetadataResponse updateBankAccountMetadata(V3UpdateBankAccountMetadataRequest request) throws Exception {
        RequestOperation<V3UpdateBankAccountMetadataRequest, V3UpdateBankAccountMetadataResponse> operation
              = new V3UpdateBankAccountMetadata.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a payment's metadata
     * 
     * @return The call builder
     */
    public V3UpdatePaymentMetadataRequestBuilder updatePaymentMetadata() {
        return new V3UpdatePaymentMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a payment's metadata
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3UpdatePaymentMetadataResponse updatePaymentMetadata(V3UpdatePaymentMetadataRequest request) throws Exception {
        RequestOperation<V3UpdatePaymentMetadataRequest, V3UpdatePaymentMetadataResponse> operation
              = new V3UpdatePaymentMetadata.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update the config of a connector
     * 
     * <p>Update connector config
     * 
     * @return The call builder
     */
    public V3UpdateConnectorConfigRequestBuilder v3UpdateConnectorConfig() {
        return new V3UpdateConnectorConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * Update the config of a connector
     * 
     * <p>Update connector config
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V3UpdateConnectorConfigResponse v3UpdateConnectorConfig(V3UpdateConnectorConfigRequest request) throws Exception {
        RequestOperation<V3UpdateConnectorConfigRequest, V3UpdateConnectorConfigResponse> operation
              = new V3UpdateConnectorConfig.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
