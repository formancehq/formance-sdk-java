/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class V3PaymentInitiation {

    @JsonProperty("amount")
    private BigInteger amount;

    @JsonProperty("asset")
    private String asset;

    @JsonProperty("connectorID")
    private String connectorID;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("description")
    private String description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationAccountID")
    private Optional<String> destinationAccountID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private JsonNullable<String> error;

    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    @JsonProperty("provider")
    private String provider;

    @JsonProperty("reference")
    private String reference;

    @JsonProperty("scheduledAt")
    private OffsetDateTime scheduledAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAccountID")
    private Optional<String> sourceAccountID;

    @JsonProperty("status")
    private V3PaymentInitiationStatusEnum status;

    @JsonProperty("type")
    private V3PaymentInitiationTypeEnum type;

    @JsonCreator
    public V3PaymentInitiation(
            @JsonProperty("amount") BigInteger amount,
            @JsonProperty("asset") String asset,
            @JsonProperty("connectorID") String connectorID,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("description") String description,
            @JsonProperty("destinationAccountID") Optional<String> destinationAccountID,
            @JsonProperty("error") JsonNullable<String> error,
            @JsonProperty("id") String id,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("provider") String provider,
            @JsonProperty("reference") String reference,
            @JsonProperty("scheduledAt") OffsetDateTime scheduledAt,
            @JsonProperty("sourceAccountID") Optional<String> sourceAccountID,
            @JsonProperty("status") V3PaymentInitiationStatusEnum status,
            @JsonProperty("type") V3PaymentInitiationTypeEnum type) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(asset, "asset");
        Utils.checkNotNull(connectorID, "connectorID");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(scheduledAt, "scheduledAt");
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(type, "type");
        this.amount = amount;
        this.asset = asset;
        this.connectorID = connectorID;
        this.createdAt = createdAt;
        this.description = description;
        this.destinationAccountID = destinationAccountID;
        this.error = error;
        this.id = id;
        this.metadata = metadata;
        this.provider = provider;
        this.reference = reference;
        this.scheduledAt = scheduledAt;
        this.sourceAccountID = sourceAccountID;
        this.status = status;
        this.type = type;
    }
    
    public V3PaymentInitiation(
            BigInteger amount,
            String asset,
            String connectorID,
            OffsetDateTime createdAt,
            String description,
            String id,
            String provider,
            String reference,
            OffsetDateTime scheduledAt,
            V3PaymentInitiationStatusEnum status,
            V3PaymentInitiationTypeEnum type) {
        this(amount, asset, connectorID, createdAt, description, Optional.empty(), JsonNullable.undefined(), id, JsonNullable.undefined(), provider, reference, scheduledAt, Optional.empty(), status, type);
    }

    @JsonIgnore
    public BigInteger amount() {
        return amount;
    }

    @JsonIgnore
    public String asset() {
        return asset;
    }

    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> destinationAccountID() {
        return destinationAccountID;
    }

    @JsonIgnore
    public JsonNullable<String> error() {
        return error;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    @JsonIgnore
    public String provider() {
        return provider;
    }

    @JsonIgnore
    public String reference() {
        return reference;
    }

    @JsonIgnore
    public OffsetDateTime scheduledAt() {
        return scheduledAt;
    }

    @JsonIgnore
    public Optional<String> sourceAccountID() {
        return sourceAccountID;
    }

    @JsonIgnore
    public V3PaymentInitiationStatusEnum status() {
        return status;
    }

    @JsonIgnore
    public V3PaymentInitiationTypeEnum type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public V3PaymentInitiation withAmount(long amount) {
        this.amount = BigInteger.valueOf(amount);
        return this;
    }

    public V3PaymentInitiation withAmount(BigInteger amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public V3PaymentInitiation withAsset(String asset) {
        Utils.checkNotNull(asset, "asset");
        this.asset = asset;
        return this;
    }

    public V3PaymentInitiation withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    public V3PaymentInitiation withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public V3PaymentInitiation withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public V3PaymentInitiation withDestinationAccountID(String destinationAccountID) {
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        this.destinationAccountID = Optional.ofNullable(destinationAccountID);
        return this;
    }

    public V3PaymentInitiation withDestinationAccountID(Optional<String> destinationAccountID) {
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        this.destinationAccountID = destinationAccountID;
        return this;
    }

    public V3PaymentInitiation withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = JsonNullable.of(error);
        return this;
    }

    public V3PaymentInitiation withError(JsonNullable<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public V3PaymentInitiation withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public V3PaymentInitiation withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public V3PaymentInitiation withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public V3PaymentInitiation withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public V3PaymentInitiation withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public V3PaymentInitiation withScheduledAt(OffsetDateTime scheduledAt) {
        Utils.checkNotNull(scheduledAt, "scheduledAt");
        this.scheduledAt = scheduledAt;
        return this;
    }

    public V3PaymentInitiation withSourceAccountID(String sourceAccountID) {
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        this.sourceAccountID = Optional.ofNullable(sourceAccountID);
        return this;
    }

    public V3PaymentInitiation withSourceAccountID(Optional<String> sourceAccountID) {
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        this.sourceAccountID = sourceAccountID;
        return this;
    }

    public V3PaymentInitiation withStatus(V3PaymentInitiationStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public V3PaymentInitiation withType(V3PaymentInitiationTypeEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3PaymentInitiation other = (V3PaymentInitiation) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.asset, other.asset) &&
            Objects.deepEquals(this.connectorID, other.connectorID) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.destinationAccountID, other.destinationAccountID) &&
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.provider, other.provider) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.scheduledAt, other.scheduledAt) &&
            Objects.deepEquals(this.sourceAccountID, other.sourceAccountID) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            asset,
            connectorID,
            createdAt,
            description,
            destinationAccountID,
            error,
            id,
            metadata,
            provider,
            reference,
            scheduledAt,
            sourceAccountID,
            status,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3PaymentInitiation.class,
                "amount", amount,
                "asset", asset,
                "connectorID", connectorID,
                "createdAt", createdAt,
                "description", description,
                "destinationAccountID", destinationAccountID,
                "error", error,
                "id", id,
                "metadata", metadata,
                "provider", provider,
                "reference", reference,
                "scheduledAt", scheduledAt,
                "sourceAccountID", sourceAccountID,
                "status", status,
                "type", type);
    }
    
    public final static class Builder {
 
        private BigInteger amount;
 
        private String asset;
 
        private String connectorID;
 
        private OffsetDateTime createdAt;
 
        private String description;
 
        private Optional<String> destinationAccountID = Optional.empty();
 
        private JsonNullable<String> error = JsonNullable.undefined();
 
        private String id;
 
        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();
 
        private String provider;
 
        private String reference;
 
        private OffsetDateTime scheduledAt;
 
        private Optional<String> sourceAccountID = Optional.empty();
 
        private V3PaymentInitiationStatusEnum status;
 
        private V3PaymentInitiationTypeEnum type;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(long amount) {
            this.amount = BigInteger.valueOf(amount);
            return this;
        }

        public Builder amount(BigInteger amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder asset(String asset) {
            Utils.checkNotNull(asset, "asset");
            this.asset = asset;
            return this;
        }

        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder destinationAccountID(String destinationAccountID) {
            Utils.checkNotNull(destinationAccountID, "destinationAccountID");
            this.destinationAccountID = Optional.ofNullable(destinationAccountID);
            return this;
        }

        public Builder destinationAccountID(Optional<String> destinationAccountID) {
            Utils.checkNotNull(destinationAccountID, "destinationAccountID");
            this.destinationAccountID = destinationAccountID;
            return this;
        }

        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = JsonNullable.of(error);
            return this;
        }

        public Builder error(JsonNullable<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder scheduledAt(OffsetDateTime scheduledAt) {
            Utils.checkNotNull(scheduledAt, "scheduledAt");
            this.scheduledAt = scheduledAt;
            return this;
        }

        public Builder sourceAccountID(String sourceAccountID) {
            Utils.checkNotNull(sourceAccountID, "sourceAccountID");
            this.sourceAccountID = Optional.ofNullable(sourceAccountID);
            return this;
        }

        public Builder sourceAccountID(Optional<String> sourceAccountID) {
            Utils.checkNotNull(sourceAccountID, "sourceAccountID");
            this.sourceAccountID = sourceAccountID;
            return this;
        }

        public Builder status(V3PaymentInitiationStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder type(V3PaymentInitiationTypeEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public V3PaymentInitiation build() {
            return new V3PaymentInitiation(
                amount,
                asset,
                connectorID,
                createdAt,
                description,
                destinationAccountID,
                error,
                id,
                metadata,
                provider,
                reference,
                scheduledAt,
                sourceAccountID,
                status,
                type);
        }
    }
}
