/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class V2BulkResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends List<V2BulkElementResult>> data;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorCode")
    private Optional<? extends V2ErrorsEnum> errorCode;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    private Optional<String> errorMessage;

    @JsonCreator
    public V2BulkResponse(
            @JsonProperty("data") Optional<? extends List<V2BulkElementResult>> data,
            @JsonProperty("errorCode") Optional<? extends V2ErrorsEnum> errorCode,
            @JsonProperty("errorMessage") Optional<String> errorMessage) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.data = data;
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
    }
    
    public V2BulkResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<V2BulkElementResult>> data() {
        return (Optional<List<V2BulkElementResult>>) data;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<V2ErrorsEnum> errorCode() {
        return (Optional<V2ErrorsEnum>) errorCode;
    }

    @JsonIgnore
    public Optional<String> errorMessage() {
        return errorMessage;
    }

    public static Builder builder() {
        return new Builder();
    }


    public V2BulkResponse withData(List<V2BulkElementResult> data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }


    public V2BulkResponse withData(Optional<? extends List<V2BulkElementResult>> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public V2BulkResponse withErrorCode(V2ErrorsEnum errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = Optional.ofNullable(errorCode);
        return this;
    }


    public V2BulkResponse withErrorCode(Optional<? extends V2ErrorsEnum> errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    public V2BulkResponse withErrorMessage(String errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = Optional.ofNullable(errorMessage);
        return this;
    }


    public V2BulkResponse withErrorMessage(Optional<String> errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = errorMessage;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2BulkResponse other = (V2BulkResponse) o;
        return 
            Utils.enhancedDeepEquals(this.data, other.data) &&
            Utils.enhancedDeepEquals(this.errorCode, other.errorCode) &&
            Utils.enhancedDeepEquals(this.errorMessage, other.errorMessage);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            data, errorCode, errorMessage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2BulkResponse.class,
                "data", data,
                "errorCode", errorCode,
                "errorMessage", errorMessage);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<V2BulkElementResult>> data = Optional.empty();

        private Optional<? extends V2ErrorsEnum> errorCode = Optional.empty();

        private Optional<String> errorMessage = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder data(List<V2BulkElementResult> data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        public Builder data(Optional<? extends List<V2BulkElementResult>> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }


        public Builder errorCode(V2ErrorsEnum errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = Optional.ofNullable(errorCode);
            return this;
        }

        public Builder errorCode(Optional<? extends V2ErrorsEnum> errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }


        public Builder errorMessage(String errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = Optional.ofNullable(errorMessage);
            return this;
        }

        public Builder errorMessage(Optional<String> errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = errorMessage;
            return this;
        }

        public V2BulkResponse build() {

            return new V2BulkResponse(
                data, errorCode, errorMessage);
        }

    }
}
