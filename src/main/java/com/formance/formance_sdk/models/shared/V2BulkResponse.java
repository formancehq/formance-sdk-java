/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class V2BulkResponse {

    @JsonProperty("data")
    private List<V2BulkElementResult> data;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    private Optional<String> details;

    @JsonProperty("errorCode")
    private V2ErrorsEnum errorCode;

    @JsonProperty("errorMessage")
    private String errorMessage;

    @JsonCreator
    public V2BulkResponse(
            @JsonProperty("data") List<V2BulkElementResult> data,
            @JsonProperty("details") Optional<String> details,
            @JsonProperty("errorCode") V2ErrorsEnum errorCode,
            @JsonProperty("errorMessage") String errorMessage) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(details, "details");
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.data = data;
        this.details = details;
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
    }
    
    public V2BulkResponse(
            List<V2BulkElementResult> data,
            V2ErrorsEnum errorCode,
            String errorMessage) {
        this(data, Optional.empty(), errorCode, errorMessage);
    }

    @JsonIgnore
    public List<V2BulkElementResult> data() {
        return data;
    }

    @JsonIgnore
    public Optional<String> details() {
        return details;
    }

    @JsonIgnore
    public V2ErrorsEnum errorCode() {
        return errorCode;
    }

    @JsonIgnore
    public String errorMessage() {
        return errorMessage;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public V2BulkResponse withData(List<V2BulkElementResult> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public V2BulkResponse withDetails(String details) {
        Utils.checkNotNull(details, "details");
        this.details = Optional.ofNullable(details);
        return this;
    }

    public V2BulkResponse withDetails(Optional<String> details) {
        Utils.checkNotNull(details, "details");
        this.details = details;
        return this;
    }

    public V2BulkResponse withErrorCode(V2ErrorsEnum errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    public V2BulkResponse withErrorMessage(String errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = errorMessage;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2BulkResponse other = (V2BulkResponse) o;
        return 
            Objects.deepEquals(this.data, other.data) &&
            Objects.deepEquals(this.details, other.details) &&
            Objects.deepEquals(this.errorCode, other.errorCode) &&
            Objects.deepEquals(this.errorMessage, other.errorMessage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            data,
            details,
            errorCode,
            errorMessage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2BulkResponse.class,
                "data", data,
                "details", details,
                "errorCode", errorCode,
                "errorMessage", errorMessage);
    }
    
    public final static class Builder {
 
        private List<V2BulkElementResult> data;
 
        private Optional<String> details = Optional.empty();
 
        private V2ErrorsEnum errorCode;
 
        private String errorMessage;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder data(List<V2BulkElementResult> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder details(String details) {
            Utils.checkNotNull(details, "details");
            this.details = Optional.ofNullable(details);
            return this;
        }

        public Builder details(Optional<String> details) {
            Utils.checkNotNull(details, "details");
            this.details = details;
            return this;
        }

        public Builder errorCode(V2ErrorsEnum errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }

        public Builder errorMessage(String errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = errorMessage;
            return this;
        }
        
        public V2BulkResponse build() {
            return new V2BulkResponse(
                data,
                details,
                errorCode,
                errorMessage);
        }
    }
}
