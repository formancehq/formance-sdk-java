/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class WalletWithBalancesBalances {

    @JsonProperty("main")
    private AssetHolder main;

    @JsonCreator
    public WalletWithBalancesBalances(
            @JsonProperty("main") AssetHolder main) {
        Utils.checkNotNull(main, "main");
        this.main = main;
    }

    @JsonIgnore
    public AssetHolder main() {
        return main;
    }

    public static Builder builder() {
        return new Builder();
    }


    public WalletWithBalancesBalances withMain(AssetHolder main) {
        Utils.checkNotNull(main, "main");
        this.main = main;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WalletWithBalancesBalances other = (WalletWithBalancesBalances) o;
        return 
            Utils.enhancedDeepEquals(this.main, other.main);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            main);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WalletWithBalancesBalances.class,
                "main", main);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AssetHolder main;

        private Builder() {
          // force use of static builder() method
        }


        public Builder main(AssetHolder main) {
            Utils.checkNotNull(main, "main");
            this.main = main;
            return this;
        }

        public WalletWithBalancesBalances build() {

            return new WalletWithBalancesBalances(
                main);
        }

    }
}
