/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class V3InitiatePaymentResponseData {

    /**
     * Related payment initiation object ID created.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentInitiationID")
    private Optional<String> paymentInitiationID;

    /**
     * Will be filled if the noValidation query parameter is set to true. Since this call is asynchronous, the response will contain the ID of the task that was created to create the payment on the PSP. You can use the task API to check the status of the task and get the resulting payment ID
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskID")
    private Optional<String> taskID;

    @JsonCreator
    public V3InitiatePaymentResponseData(
            @JsonProperty("paymentInitiationID") Optional<String> paymentInitiationID,
            @JsonProperty("taskID") Optional<String> taskID) {
        Utils.checkNotNull(paymentInitiationID, "paymentInitiationID");
        Utils.checkNotNull(taskID, "taskID");
        this.paymentInitiationID = paymentInitiationID;
        this.taskID = taskID;
    }
    
    public V3InitiatePaymentResponseData() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Related payment initiation object ID created.
     * 
     */
    @JsonIgnore
    public Optional<String> paymentInitiationID() {
        return paymentInitiationID;
    }

    /**
     * Will be filled if the noValidation query parameter is set to true. Since this call is asynchronous, the response will contain the ID of the task that was created to create the payment on the PSP. You can use the task API to check the status of the task and get the resulting payment ID
     * 
     */
    @JsonIgnore
    public Optional<String> taskID() {
        return taskID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Related payment initiation object ID created.
     * 
     */
    public V3InitiatePaymentResponseData withPaymentInitiationID(String paymentInitiationID) {
        Utils.checkNotNull(paymentInitiationID, "paymentInitiationID");
        this.paymentInitiationID = Optional.ofNullable(paymentInitiationID);
        return this;
    }

    /**
     * Related payment initiation object ID created.
     * 
     */
    public V3InitiatePaymentResponseData withPaymentInitiationID(Optional<String> paymentInitiationID) {
        Utils.checkNotNull(paymentInitiationID, "paymentInitiationID");
        this.paymentInitiationID = paymentInitiationID;
        return this;
    }

    /**
     * Will be filled if the noValidation query parameter is set to true. Since this call is asynchronous, the response will contain the ID of the task that was created to create the payment on the PSP. You can use the task API to check the status of the task and get the resulting payment ID
     * 
     */
    public V3InitiatePaymentResponseData withTaskID(String taskID) {
        Utils.checkNotNull(taskID, "taskID");
        this.taskID = Optional.ofNullable(taskID);
        return this;
    }

    /**
     * Will be filled if the noValidation query parameter is set to true. Since this call is asynchronous, the response will contain the ID of the task that was created to create the payment on the PSP. You can use the task API to check the status of the task and get the resulting payment ID
     * 
     */
    public V3InitiatePaymentResponseData withTaskID(Optional<String> taskID) {
        Utils.checkNotNull(taskID, "taskID");
        this.taskID = taskID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3InitiatePaymentResponseData other = (V3InitiatePaymentResponseData) o;
        return 
            Objects.deepEquals(this.paymentInitiationID, other.paymentInitiationID) &&
            Objects.deepEquals(this.taskID, other.taskID);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            paymentInitiationID,
            taskID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3InitiatePaymentResponseData.class,
                "paymentInitiationID", paymentInitiationID,
                "taskID", taskID);
    }
    
    public final static class Builder {
 
        private Optional<String> paymentInitiationID = Optional.empty();
 
        private Optional<String> taskID = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Related payment initiation object ID created.
         * 
         */
        public Builder paymentInitiationID(String paymentInitiationID) {
            Utils.checkNotNull(paymentInitiationID, "paymentInitiationID");
            this.paymentInitiationID = Optional.ofNullable(paymentInitiationID);
            return this;
        }

        /**
         * Related payment initiation object ID created.
         * 
         */
        public Builder paymentInitiationID(Optional<String> paymentInitiationID) {
            Utils.checkNotNull(paymentInitiationID, "paymentInitiationID");
            this.paymentInitiationID = paymentInitiationID;
            return this;
        }

        /**
         * Will be filled if the noValidation query parameter is set to true. Since this call is asynchronous, the response will contain the ID of the task that was created to create the payment on the PSP. You can use the task API to check the status of the task and get the resulting payment ID
         * 
         */
        public Builder taskID(String taskID) {
            Utils.checkNotNull(taskID, "taskID");
            this.taskID = Optional.ofNullable(taskID);
            return this;
        }

        /**
         * Will be filled if the noValidation query parameter is set to true. Since this call is asynchronous, the response will contain the ID of the task that was created to create the payment on the PSP. You can use the task API to check the status of the task and get the resulting payment ID
         * 
         */
        public Builder taskID(Optional<String> taskID) {
            Utils.checkNotNull(taskID, "taskID");
            this.taskID = taskID;
            return this;
        }
        
        public V3InitiatePaymentResponseData build() {
            return new V3InitiatePaymentResponseData(
                paymentInitiationID,
                taskID);
        }
    }
}

