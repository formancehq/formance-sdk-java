/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class V2BulkElementResultError implements V2BulkElementResult {

    @JsonProperty("errorCode")
    private String errorCode;


    @JsonProperty("errorDescription")
    private String errorDescription;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorDetails")
    private Optional<String> errorDetails;


    @JsonProperty("logID")
    private long logID;


    @JsonProperty("responseType")
    private String responseType;

    @JsonCreator
    public V2BulkElementResultError(
            @JsonProperty("errorCode") String errorCode,
            @JsonProperty("errorDescription") String errorDescription,
            @JsonProperty("errorDetails") Optional<String> errorDetails,
            @JsonProperty("logID") long logID,
            @JsonProperty("responseType") String responseType) {
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(errorDescription, "errorDescription");
        Utils.checkNotNull(errorDetails, "errorDetails");
        Utils.checkNotNull(logID, "logID");
        Utils.checkNotNull(responseType, "responseType");
        this.errorCode = errorCode;
        this.errorDescription = errorDescription;
        this.errorDetails = errorDetails;
        this.logID = logID;
        this.responseType = responseType;
    }
    
    public V2BulkElementResultError(
            String errorCode,
            String errorDescription,
            long logID,
            String responseType) {
        this(errorCode, errorDescription, Optional.empty(),
            logID, responseType);
    }

    @JsonIgnore
    public String errorCode() {
        return errorCode;
    }

    @JsonIgnore
    public String errorDescription() {
        return errorDescription;
    }

    @JsonIgnore
    public Optional<String> errorDetails() {
        return errorDetails;
    }

    @JsonIgnore
    public long logID() {
        return logID;
    }

    @JsonIgnore
    @Override
    public String responseType() {
        return Utils.discriminatorToString(responseType);
    }

    public static Builder builder() {
        return new Builder();
    }


    public V2BulkElementResultError withErrorCode(String errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    public V2BulkElementResultError withErrorDescription(String errorDescription) {
        Utils.checkNotNull(errorDescription, "errorDescription");
        this.errorDescription = errorDescription;
        return this;
    }

    public V2BulkElementResultError withErrorDetails(String errorDetails) {
        Utils.checkNotNull(errorDetails, "errorDetails");
        this.errorDetails = Optional.ofNullable(errorDetails);
        return this;
    }


    public V2BulkElementResultError withErrorDetails(Optional<String> errorDetails) {
        Utils.checkNotNull(errorDetails, "errorDetails");
        this.errorDetails = errorDetails;
        return this;
    }

    public V2BulkElementResultError withLogID(long logID) {
        Utils.checkNotNull(logID, "logID");
        this.logID = logID;
        return this;
    }

    public V2BulkElementResultError withResponseType(String responseType) {
        Utils.checkNotNull(responseType, "responseType");
        this.responseType = responseType;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2BulkElementResultError other = (V2BulkElementResultError) o;
        return 
            Utils.enhancedDeepEquals(this.errorCode, other.errorCode) &&
            Utils.enhancedDeepEquals(this.errorDescription, other.errorDescription) &&
            Utils.enhancedDeepEquals(this.errorDetails, other.errorDetails) &&
            Utils.enhancedDeepEquals(this.logID, other.logID) &&
            Utils.enhancedDeepEquals(this.responseType, other.responseType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            errorCode, errorDescription, errorDetails,
            logID, responseType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2BulkElementResultError.class,
                "errorCode", errorCode,
                "errorDescription", errorDescription,
                "errorDetails", errorDetails,
                "logID", logID,
                "responseType", responseType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String errorCode;

        private String errorDescription;

        private Optional<String> errorDetails = Optional.empty();

        private Long logID;

        private String responseType;

        private Builder() {
          // force use of static builder() method
        }


        public Builder errorCode(String errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }


        public Builder errorDescription(String errorDescription) {
            Utils.checkNotNull(errorDescription, "errorDescription");
            this.errorDescription = errorDescription;
            return this;
        }


        public Builder errorDetails(String errorDetails) {
            Utils.checkNotNull(errorDetails, "errorDetails");
            this.errorDetails = Optional.ofNullable(errorDetails);
            return this;
        }

        public Builder errorDetails(Optional<String> errorDetails) {
            Utils.checkNotNull(errorDetails, "errorDetails");
            this.errorDetails = errorDetails;
            return this;
        }


        public Builder logID(long logID) {
            Utils.checkNotNull(logID, "logID");
            this.logID = logID;
            return this;
        }


        public Builder responseType(String responseType) {
            Utils.checkNotNull(responseType, "responseType");
            this.responseType = responseType;
            return this;
        }

        public V2BulkElementResultError build() {

            return new V2BulkElementResultError(
                errorCode, errorDescription, errorDetails,
                logID, responseType);
        }

    }
}
