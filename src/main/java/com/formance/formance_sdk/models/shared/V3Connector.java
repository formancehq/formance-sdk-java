/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.formance.formance_sdk.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;

public class V3Connector {

    @JsonProperty("config")
    private V3ConnectorSchemasConfig config;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("id")
    private String id;

    @JsonProperty("name")
    private String name;

    @JsonProperty("provider")
    private String provider;

    @JsonProperty("reference")
    private String reference;

    @JsonProperty("scheduledForDeletion")
    private boolean scheduledForDeletion;

    @JsonCreator
    public V3Connector(
            @JsonProperty("config") V3ConnectorSchemasConfig config,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("provider") String provider,
            @JsonProperty("reference") String reference,
            @JsonProperty("scheduledForDeletion") boolean scheduledForDeletion) {
        Utils.checkNotNull(config, "config");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(scheduledForDeletion, "scheduledForDeletion");
        this.config = config;
        this.createdAt = createdAt;
        this.id = id;
        this.name = name;
        this.provider = provider;
        this.reference = reference;
        this.scheduledForDeletion = scheduledForDeletion;
    }

    @JsonIgnore
    public V3ConnectorSchemasConfig config() {
        return config;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String provider() {
        return provider;
    }

    @JsonIgnore
    public String reference() {
        return reference;
    }

    @JsonIgnore
    public boolean scheduledForDeletion() {
        return scheduledForDeletion;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V3Connector withConfig(V3ConnectorSchemasConfig config) {
        Utils.checkNotNull(config, "config");
        this.config = config;
        return this;
    }

    public V3Connector withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public V3Connector withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public V3Connector withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public V3Connector withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public V3Connector withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public V3Connector withScheduledForDeletion(boolean scheduledForDeletion) {
        Utils.checkNotNull(scheduledForDeletion, "scheduledForDeletion");
        this.scheduledForDeletion = scheduledForDeletion;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3Connector other = (V3Connector) o;
        return 
            Objects.deepEquals(this.config, other.config) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.provider, other.provider) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.scheduledForDeletion, other.scheduledForDeletion);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            config,
            createdAt,
            id,
            name,
            provider,
            reference,
            scheduledForDeletion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3Connector.class,
                "config", config,
                "createdAt", createdAt,
                "id", id,
                "name", name,
                "provider", provider,
                "reference", reference,
                "scheduledForDeletion", scheduledForDeletion);
    }
    
    public final static class Builder {
 
        private V3ConnectorSchemasConfig config;
 
        private OffsetDateTime createdAt;
 
        private String id;
 
        private String name;
 
        private String provider;
 
        private String reference;
 
        private Boolean scheduledForDeletion;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder config(V3ConnectorSchemasConfig config) {
            Utils.checkNotNull(config, "config");
            this.config = config;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder scheduledForDeletion(boolean scheduledForDeletion) {
            Utils.checkNotNull(scheduledForDeletion, "scheduledForDeletion");
            this.scheduledForDeletion = scheduledForDeletion;
            return this;
        }
        
        public V3Connector build() {
            return new V3Connector(
                config,
                createdAt,
                id,
                name,
                provider,
                reference,
                scheduledForDeletion);
        }
    }
}

