/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;

public class V2Wallet {

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    /**
     * The unique ID of the wallet.
     */
    @JsonProperty("id")
    private String id;

    @JsonProperty("ledger")
    private String ledger;

    /**
     * Metadata associated with the wallet.
     */
    @JsonProperty("metadata")
    private java.util.Map<String, String> metadata;

    @JsonProperty("name")
    private String name;

    @JsonCreator
    public V2Wallet(
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("id") String id,
            @JsonProperty("ledger") String ledger,
            @JsonProperty("metadata") java.util.Map<String, String> metadata,
            @JsonProperty("name") String name) {
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(ledger, "ledger");
        metadata = Utils.emptyMapIfNull(metadata);
        Utils.checkNotNull(name, "name");
        this.createdAt = createdAt;
        this.id = id;
        this.ledger = ledger;
        this.metadata = metadata;
        this.name = name;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The unique ID of the wallet.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String ledger() {
        return ledger;
    }

    /**
     * Metadata associated with the wallet.
     */
    @JsonIgnore
    public java.util.Map<String, String> metadata() {
        return metadata;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V2Wallet withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The unique ID of the wallet.
     */
    public V2Wallet withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public V2Wallet withLedger(String ledger) {
        Utils.checkNotNull(ledger, "ledger");
        this.ledger = ledger;
        return this;
    }

    /**
     * Metadata associated with the wallet.
     */
    public V2Wallet withMetadata(java.util.Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public V2Wallet withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2Wallet other = (V2Wallet) o;
        return 
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.ledger, other.ledger) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            createdAt,
            id,
            ledger,
            metadata,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2Wallet.class,
                "createdAt", createdAt,
                "id", id,
                "ledger", ledger,
                "metadata", metadata,
                "name", name);
    }
    
    public final static class Builder {
 
        private OffsetDateTime createdAt;
 
        private String id;
 
        private String ledger;
 
        private java.util.Map<String, String> metadata;
 
        private String name;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The unique ID of the wallet.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder ledger(String ledger) {
            Utils.checkNotNull(ledger, "ledger");
            this.ledger = ledger;
            return this;
        }

        /**
         * Metadata associated with the wallet.
         */
        public Builder metadata(java.util.Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public V2Wallet build() {
            return new V2Wallet(
                createdAt,
                id,
                ledger,
                metadata,
                name);
        }
    }
}

