/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public class ActivityAddAccountMetadata {

    @JsonProperty("id")
    private String id;

    @JsonProperty("ledger")
    private String ledger;

    @JsonProperty("metadata")
    private Map<String, String> metadata;

    @JsonCreator
    public ActivityAddAccountMetadata(
            @JsonProperty("id") String id,
            @JsonProperty("ledger") String ledger,
            @JsonProperty("metadata") Map<String, String> metadata) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(ledger, "ledger");
        metadata = Utils.emptyMapIfNull(metadata);
        this.id = id;
        this.ledger = ledger;
        this.metadata = metadata;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String ledger() {
        return ledger;
    }

    @JsonIgnore
    public Map<String, String> metadata() {
        return metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ActivityAddAccountMetadata withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ActivityAddAccountMetadata withLedger(String ledger) {
        Utils.checkNotNull(ledger, "ledger");
        this.ledger = ledger;
        return this;
    }

    public ActivityAddAccountMetadata withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivityAddAccountMetadata other = (ActivityAddAccountMetadata) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.ledger, other.ledger) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            ledger,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ActivityAddAccountMetadata.class,
                "id", id,
                "ledger", ledger,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String ledger;
 
        private Map<String, String> metadata;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder ledger(String ledger) {
            Utils.checkNotNull(ledger, "ledger");
            this.ledger = ledger;
            return this;
        }

        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public ActivityAddAccountMetadata build() {
            return new ActivityAddAccountMetadata(
                id,
                ledger,
                metadata);
        }
    }
}

