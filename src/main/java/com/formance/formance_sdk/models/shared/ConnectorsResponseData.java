/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class ConnectorsResponseData {

    @JsonProperty("connectorID")
    private String connectorID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<Boolean> enabled;

    @JsonProperty("name")
    private String name;

    @JsonProperty("provider")
    private Connector provider;

    @JsonCreator
    public ConnectorsResponseData(
            @JsonProperty("connectorID") String connectorID,
            @JsonProperty("enabled") Optional<Boolean> enabled,
            @JsonProperty("name") String name,
            @JsonProperty("provider") Connector provider) {
        Utils.checkNotNull(connectorID, "connectorID");
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(provider, "provider");
        this.connectorID = connectorID;
        this.enabled = enabled;
        this.name = name;
        this.provider = provider;
    }
    
    public ConnectorsResponseData(
            String connectorID,
            String name,
            Connector provider) {
        this(connectorID, Optional.empty(), name, provider);
    }

    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    @JsonIgnore
    public Optional<Boolean> enabled() {
        return enabled;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Connector provider() {
        return provider;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ConnectorsResponseData withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    public ConnectorsResponseData withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }

    public ConnectorsResponseData withEnabled(Optional<Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    public ConnectorsResponseData withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ConnectorsResponseData withProvider(Connector provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectorsResponseData other = (ConnectorsResponseData) o;
        return 
            Objects.deepEquals(this.connectorID, other.connectorID) &&
            Objects.deepEquals(this.enabled, other.enabled) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.provider, other.provider);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            connectorID,
            enabled,
            name,
            provider);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectorsResponseData.class,
                "connectorID", connectorID,
                "enabled", enabled,
                "name", name,
                "provider", provider);
    }
    
    public final static class Builder {
 
        private String connectorID;
 
        private Optional<Boolean> enabled = Optional.empty();
 
        private String name;
 
        private Connector provider;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }

        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        public Builder enabled(Optional<Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder provider(Connector provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }
        
        public ConnectorsResponseData build() {
            return new ConnectorsResponseData(
                connectorID,
                enabled,
                name,
                provider);
        }
    }
}

