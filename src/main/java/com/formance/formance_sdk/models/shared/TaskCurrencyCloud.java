/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class TaskCurrencyCloud {

    @JsonProperty("connectorID")
    private String connectorID;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("descriptor")
    private TaskCurrencyCloudDescriptor descriptor;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<String> error;

    @JsonProperty("id")
    private String id;

    @JsonProperty("state")
    private TaskCurrencyCloudState state;

    @JsonProperty("status")
    private PaymentStatus status;

    @JsonProperty("updatedAt")
    private OffsetDateTime updatedAt;

    @JsonCreator
    public TaskCurrencyCloud(
            @JsonProperty("connectorID") String connectorID,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("descriptor") TaskCurrencyCloudDescriptor descriptor,
            @JsonProperty("error") Optional<String> error,
            @JsonProperty("id") String id,
            @JsonProperty("state") TaskCurrencyCloudState state,
            @JsonProperty("status") PaymentStatus status,
            @JsonProperty("updatedAt") OffsetDateTime updatedAt) {
        Utils.checkNotNull(connectorID, "connectorID");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(descriptor, "descriptor");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.connectorID = connectorID;
        this.createdAt = createdAt;
        this.descriptor = descriptor;
        this.error = error;
        this.id = id;
        this.state = state;
        this.status = status;
        this.updatedAt = updatedAt;
    }
    
    public TaskCurrencyCloud(
            String connectorID,
            OffsetDateTime createdAt,
            TaskCurrencyCloudDescriptor descriptor,
            String id,
            TaskCurrencyCloudState state,
            PaymentStatus status,
            OffsetDateTime updatedAt) {
        this(connectorID, createdAt, descriptor, Optional.empty(), id, state, status, updatedAt);
    }

    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public TaskCurrencyCloudDescriptor descriptor() {
        return descriptor;
    }

    @JsonIgnore
    public Optional<String> error() {
        return error;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public TaskCurrencyCloudState state() {
        return state;
    }

    @JsonIgnore
    public PaymentStatus status() {
        return status;
    }

    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TaskCurrencyCloud withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    public TaskCurrencyCloud withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public TaskCurrencyCloud withDescriptor(TaskCurrencyCloudDescriptor descriptor) {
        Utils.checkNotNull(descriptor, "descriptor");
        this.descriptor = descriptor;
        return this;
    }

    public TaskCurrencyCloud withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public TaskCurrencyCloud withError(Optional<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public TaskCurrencyCloud withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public TaskCurrencyCloud withState(TaskCurrencyCloudState state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public TaskCurrencyCloud withStatus(PaymentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public TaskCurrencyCloud withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaskCurrencyCloud other = (TaskCurrencyCloud) o;
        return 
            Objects.deepEquals(this.connectorID, other.connectorID) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.descriptor, other.descriptor) &&
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            connectorID,
            createdAt,
            descriptor,
            error,
            id,
            state,
            status,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaskCurrencyCloud.class,
                "connectorID", connectorID,
                "createdAt", createdAt,
                "descriptor", descriptor,
                "error", error,
                "id", id,
                "state", state,
                "status", status,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String connectorID;
 
        private OffsetDateTime createdAt;
 
        private TaskCurrencyCloudDescriptor descriptor;
 
        private Optional<String> error = Optional.empty();
 
        private String id;
 
        private TaskCurrencyCloudState state;
 
        private PaymentStatus status;
 
        private OffsetDateTime updatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder descriptor(TaskCurrencyCloudDescriptor descriptor) {
            Utils.checkNotNull(descriptor, "descriptor");
            this.descriptor = descriptor;
            return this;
        }

        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder state(TaskCurrencyCloudState state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder status(PaymentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public TaskCurrencyCloud build() {
            return new TaskCurrencyCloud(
                connectorID,
                createdAt,
                descriptor,
                error,
                id,
                state,
                status,
                updatedAt);
        }
    }
}

