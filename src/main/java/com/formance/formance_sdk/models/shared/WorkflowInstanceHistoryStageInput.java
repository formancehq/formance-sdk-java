/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class WorkflowInstanceHistoryStageInput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AddAccountMetadata")
    private Optional<? extends ActivityAddAccountMetadata> addAccountMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ConfirmHold")
    private Optional<? extends ActivityConfirmHold> confirmHold;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreateTransaction")
    private Optional<? extends ActivityCreateTransaction> createTransaction;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditWallet")
    private Optional<? extends ActivityCreditWallet> creditWallet;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DebitWallet")
    private Optional<? extends ActivityDebitWallet> debitWallet;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GetAccount")
    private Optional<? extends ActivityGetAccount> getAccount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GetPayment")
    private Optional<? extends ActivityGetPayment> getPayment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GetWallet")
    private Optional<? extends ActivityGetWallet> getWallet;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ListWallets")
    private Optional<? extends ActivityListWallets> listWallets;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RevertTransaction")
    private Optional<? extends ActivityRevertTransaction> revertTransaction;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StripeTransfer")
    private Optional<? extends ActivityStripeTransfer> stripeTransfer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VoidHold")
    private Optional<? extends ActivityVoidHold> voidHold;

    @JsonCreator
    public WorkflowInstanceHistoryStageInput(
            @JsonProperty("AddAccountMetadata") Optional<? extends ActivityAddAccountMetadata> addAccountMetadata,
            @JsonProperty("ConfirmHold") Optional<? extends ActivityConfirmHold> confirmHold,
            @JsonProperty("CreateTransaction") Optional<? extends ActivityCreateTransaction> createTransaction,
            @JsonProperty("CreditWallet") Optional<? extends ActivityCreditWallet> creditWallet,
            @JsonProperty("DebitWallet") Optional<? extends ActivityDebitWallet> debitWallet,
            @JsonProperty("GetAccount") Optional<? extends ActivityGetAccount> getAccount,
            @JsonProperty("GetPayment") Optional<? extends ActivityGetPayment> getPayment,
            @JsonProperty("GetWallet") Optional<? extends ActivityGetWallet> getWallet,
            @JsonProperty("ListWallets") Optional<? extends ActivityListWallets> listWallets,
            @JsonProperty("RevertTransaction") Optional<? extends ActivityRevertTransaction> revertTransaction,
            @JsonProperty("StripeTransfer") Optional<? extends ActivityStripeTransfer> stripeTransfer,
            @JsonProperty("VoidHold") Optional<? extends ActivityVoidHold> voidHold) {
        Utils.checkNotNull(addAccountMetadata, "addAccountMetadata");
        Utils.checkNotNull(confirmHold, "confirmHold");
        Utils.checkNotNull(createTransaction, "createTransaction");
        Utils.checkNotNull(creditWallet, "creditWallet");
        Utils.checkNotNull(debitWallet, "debitWallet");
        Utils.checkNotNull(getAccount, "getAccount");
        Utils.checkNotNull(getPayment, "getPayment");
        Utils.checkNotNull(getWallet, "getWallet");
        Utils.checkNotNull(listWallets, "listWallets");
        Utils.checkNotNull(revertTransaction, "revertTransaction");
        Utils.checkNotNull(stripeTransfer, "stripeTransfer");
        Utils.checkNotNull(voidHold, "voidHold");
        this.addAccountMetadata = addAccountMetadata;
        this.confirmHold = confirmHold;
        this.createTransaction = createTransaction;
        this.creditWallet = creditWallet;
        this.debitWallet = debitWallet;
        this.getAccount = getAccount;
        this.getPayment = getPayment;
        this.getWallet = getWallet;
        this.listWallets = listWallets;
        this.revertTransaction = revertTransaction;
        this.stripeTransfer = stripeTransfer;
        this.voidHold = voidHold;
    }
    
    public WorkflowInstanceHistoryStageInput() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityAddAccountMetadata> addAccountMetadata() {
        return (Optional<ActivityAddAccountMetadata>) addAccountMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityConfirmHold> confirmHold() {
        return (Optional<ActivityConfirmHold>) confirmHold;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityCreateTransaction> createTransaction() {
        return (Optional<ActivityCreateTransaction>) createTransaction;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityCreditWallet> creditWallet() {
        return (Optional<ActivityCreditWallet>) creditWallet;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityDebitWallet> debitWallet() {
        return (Optional<ActivityDebitWallet>) debitWallet;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityGetAccount> getAccount() {
        return (Optional<ActivityGetAccount>) getAccount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityGetPayment> getPayment() {
        return (Optional<ActivityGetPayment>) getPayment;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityGetWallet> getWallet() {
        return (Optional<ActivityGetWallet>) getWallet;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityListWallets> listWallets() {
        return (Optional<ActivityListWallets>) listWallets;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityRevertTransaction> revertTransaction() {
        return (Optional<ActivityRevertTransaction>) revertTransaction;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityStripeTransfer> stripeTransfer() {
        return (Optional<ActivityStripeTransfer>) stripeTransfer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ActivityVoidHold> voidHold() {
        return (Optional<ActivityVoidHold>) voidHold;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WorkflowInstanceHistoryStageInput withAddAccountMetadata(ActivityAddAccountMetadata addAccountMetadata) {
        Utils.checkNotNull(addAccountMetadata, "addAccountMetadata");
        this.addAccountMetadata = Optional.ofNullable(addAccountMetadata);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withAddAccountMetadata(Optional<? extends ActivityAddAccountMetadata> addAccountMetadata) {
        Utils.checkNotNull(addAccountMetadata, "addAccountMetadata");
        this.addAccountMetadata = addAccountMetadata;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withConfirmHold(ActivityConfirmHold confirmHold) {
        Utils.checkNotNull(confirmHold, "confirmHold");
        this.confirmHold = Optional.ofNullable(confirmHold);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withConfirmHold(Optional<? extends ActivityConfirmHold> confirmHold) {
        Utils.checkNotNull(confirmHold, "confirmHold");
        this.confirmHold = confirmHold;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withCreateTransaction(ActivityCreateTransaction createTransaction) {
        Utils.checkNotNull(createTransaction, "createTransaction");
        this.createTransaction = Optional.ofNullable(createTransaction);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withCreateTransaction(Optional<? extends ActivityCreateTransaction> createTransaction) {
        Utils.checkNotNull(createTransaction, "createTransaction");
        this.createTransaction = createTransaction;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withCreditWallet(ActivityCreditWallet creditWallet) {
        Utils.checkNotNull(creditWallet, "creditWallet");
        this.creditWallet = Optional.ofNullable(creditWallet);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withCreditWallet(Optional<? extends ActivityCreditWallet> creditWallet) {
        Utils.checkNotNull(creditWallet, "creditWallet");
        this.creditWallet = creditWallet;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withDebitWallet(ActivityDebitWallet debitWallet) {
        Utils.checkNotNull(debitWallet, "debitWallet");
        this.debitWallet = Optional.ofNullable(debitWallet);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withDebitWallet(Optional<? extends ActivityDebitWallet> debitWallet) {
        Utils.checkNotNull(debitWallet, "debitWallet");
        this.debitWallet = debitWallet;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withGetAccount(ActivityGetAccount getAccount) {
        Utils.checkNotNull(getAccount, "getAccount");
        this.getAccount = Optional.ofNullable(getAccount);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withGetAccount(Optional<? extends ActivityGetAccount> getAccount) {
        Utils.checkNotNull(getAccount, "getAccount");
        this.getAccount = getAccount;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withGetPayment(ActivityGetPayment getPayment) {
        Utils.checkNotNull(getPayment, "getPayment");
        this.getPayment = Optional.ofNullable(getPayment);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withGetPayment(Optional<? extends ActivityGetPayment> getPayment) {
        Utils.checkNotNull(getPayment, "getPayment");
        this.getPayment = getPayment;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withGetWallet(ActivityGetWallet getWallet) {
        Utils.checkNotNull(getWallet, "getWallet");
        this.getWallet = Optional.ofNullable(getWallet);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withGetWallet(Optional<? extends ActivityGetWallet> getWallet) {
        Utils.checkNotNull(getWallet, "getWallet");
        this.getWallet = getWallet;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withListWallets(ActivityListWallets listWallets) {
        Utils.checkNotNull(listWallets, "listWallets");
        this.listWallets = Optional.ofNullable(listWallets);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withListWallets(Optional<? extends ActivityListWallets> listWallets) {
        Utils.checkNotNull(listWallets, "listWallets");
        this.listWallets = listWallets;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withRevertTransaction(ActivityRevertTransaction revertTransaction) {
        Utils.checkNotNull(revertTransaction, "revertTransaction");
        this.revertTransaction = Optional.ofNullable(revertTransaction);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withRevertTransaction(Optional<? extends ActivityRevertTransaction> revertTransaction) {
        Utils.checkNotNull(revertTransaction, "revertTransaction");
        this.revertTransaction = revertTransaction;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withStripeTransfer(ActivityStripeTransfer stripeTransfer) {
        Utils.checkNotNull(stripeTransfer, "stripeTransfer");
        this.stripeTransfer = Optional.ofNullable(stripeTransfer);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withStripeTransfer(Optional<? extends ActivityStripeTransfer> stripeTransfer) {
        Utils.checkNotNull(stripeTransfer, "stripeTransfer");
        this.stripeTransfer = stripeTransfer;
        return this;
    }

    public WorkflowInstanceHistoryStageInput withVoidHold(ActivityVoidHold voidHold) {
        Utils.checkNotNull(voidHold, "voidHold");
        this.voidHold = Optional.ofNullable(voidHold);
        return this;
    }

    public WorkflowInstanceHistoryStageInput withVoidHold(Optional<? extends ActivityVoidHold> voidHold) {
        Utils.checkNotNull(voidHold, "voidHold");
        this.voidHold = voidHold;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkflowInstanceHistoryStageInput other = (WorkflowInstanceHistoryStageInput) o;
        return 
            Objects.deepEquals(this.addAccountMetadata, other.addAccountMetadata) &&
            Objects.deepEquals(this.confirmHold, other.confirmHold) &&
            Objects.deepEquals(this.createTransaction, other.createTransaction) &&
            Objects.deepEquals(this.creditWallet, other.creditWallet) &&
            Objects.deepEquals(this.debitWallet, other.debitWallet) &&
            Objects.deepEquals(this.getAccount, other.getAccount) &&
            Objects.deepEquals(this.getPayment, other.getPayment) &&
            Objects.deepEquals(this.getWallet, other.getWallet) &&
            Objects.deepEquals(this.listWallets, other.listWallets) &&
            Objects.deepEquals(this.revertTransaction, other.revertTransaction) &&
            Objects.deepEquals(this.stripeTransfer, other.stripeTransfer) &&
            Objects.deepEquals(this.voidHold, other.voidHold);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            addAccountMetadata,
            confirmHold,
            createTransaction,
            creditWallet,
            debitWallet,
            getAccount,
            getPayment,
            getWallet,
            listWallets,
            revertTransaction,
            stripeTransfer,
            voidHold);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkflowInstanceHistoryStageInput.class,
                "addAccountMetadata", addAccountMetadata,
                "confirmHold", confirmHold,
                "createTransaction", createTransaction,
                "creditWallet", creditWallet,
                "debitWallet", debitWallet,
                "getAccount", getAccount,
                "getPayment", getPayment,
                "getWallet", getWallet,
                "listWallets", listWallets,
                "revertTransaction", revertTransaction,
                "stripeTransfer", stripeTransfer,
                "voidHold", voidHold);
    }
    
    public final static class Builder {
 
        private Optional<? extends ActivityAddAccountMetadata> addAccountMetadata = Optional.empty();
 
        private Optional<? extends ActivityConfirmHold> confirmHold = Optional.empty();
 
        private Optional<? extends ActivityCreateTransaction> createTransaction = Optional.empty();
 
        private Optional<? extends ActivityCreditWallet> creditWallet = Optional.empty();
 
        private Optional<? extends ActivityDebitWallet> debitWallet = Optional.empty();
 
        private Optional<? extends ActivityGetAccount> getAccount = Optional.empty();
 
        private Optional<? extends ActivityGetPayment> getPayment = Optional.empty();
 
        private Optional<? extends ActivityGetWallet> getWallet = Optional.empty();
 
        private Optional<? extends ActivityListWallets> listWallets = Optional.empty();
 
        private Optional<? extends ActivityRevertTransaction> revertTransaction = Optional.empty();
 
        private Optional<? extends ActivityStripeTransfer> stripeTransfer = Optional.empty();
 
        private Optional<? extends ActivityVoidHold> voidHold = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder addAccountMetadata(ActivityAddAccountMetadata addAccountMetadata) {
            Utils.checkNotNull(addAccountMetadata, "addAccountMetadata");
            this.addAccountMetadata = Optional.ofNullable(addAccountMetadata);
            return this;
        }

        public Builder addAccountMetadata(Optional<? extends ActivityAddAccountMetadata> addAccountMetadata) {
            Utils.checkNotNull(addAccountMetadata, "addAccountMetadata");
            this.addAccountMetadata = addAccountMetadata;
            return this;
        }

        public Builder confirmHold(ActivityConfirmHold confirmHold) {
            Utils.checkNotNull(confirmHold, "confirmHold");
            this.confirmHold = Optional.ofNullable(confirmHold);
            return this;
        }

        public Builder confirmHold(Optional<? extends ActivityConfirmHold> confirmHold) {
            Utils.checkNotNull(confirmHold, "confirmHold");
            this.confirmHold = confirmHold;
            return this;
        }

        public Builder createTransaction(ActivityCreateTransaction createTransaction) {
            Utils.checkNotNull(createTransaction, "createTransaction");
            this.createTransaction = Optional.ofNullable(createTransaction);
            return this;
        }

        public Builder createTransaction(Optional<? extends ActivityCreateTransaction> createTransaction) {
            Utils.checkNotNull(createTransaction, "createTransaction");
            this.createTransaction = createTransaction;
            return this;
        }

        public Builder creditWallet(ActivityCreditWallet creditWallet) {
            Utils.checkNotNull(creditWallet, "creditWallet");
            this.creditWallet = Optional.ofNullable(creditWallet);
            return this;
        }

        public Builder creditWallet(Optional<? extends ActivityCreditWallet> creditWallet) {
            Utils.checkNotNull(creditWallet, "creditWallet");
            this.creditWallet = creditWallet;
            return this;
        }

        public Builder debitWallet(ActivityDebitWallet debitWallet) {
            Utils.checkNotNull(debitWallet, "debitWallet");
            this.debitWallet = Optional.ofNullable(debitWallet);
            return this;
        }

        public Builder debitWallet(Optional<? extends ActivityDebitWallet> debitWallet) {
            Utils.checkNotNull(debitWallet, "debitWallet");
            this.debitWallet = debitWallet;
            return this;
        }

        public Builder getAccount(ActivityGetAccount getAccount) {
            Utils.checkNotNull(getAccount, "getAccount");
            this.getAccount = Optional.ofNullable(getAccount);
            return this;
        }

        public Builder getAccount(Optional<? extends ActivityGetAccount> getAccount) {
            Utils.checkNotNull(getAccount, "getAccount");
            this.getAccount = getAccount;
            return this;
        }

        public Builder getPayment(ActivityGetPayment getPayment) {
            Utils.checkNotNull(getPayment, "getPayment");
            this.getPayment = Optional.ofNullable(getPayment);
            return this;
        }

        public Builder getPayment(Optional<? extends ActivityGetPayment> getPayment) {
            Utils.checkNotNull(getPayment, "getPayment");
            this.getPayment = getPayment;
            return this;
        }

        public Builder getWallet(ActivityGetWallet getWallet) {
            Utils.checkNotNull(getWallet, "getWallet");
            this.getWallet = Optional.ofNullable(getWallet);
            return this;
        }

        public Builder getWallet(Optional<? extends ActivityGetWallet> getWallet) {
            Utils.checkNotNull(getWallet, "getWallet");
            this.getWallet = getWallet;
            return this;
        }

        public Builder listWallets(ActivityListWallets listWallets) {
            Utils.checkNotNull(listWallets, "listWallets");
            this.listWallets = Optional.ofNullable(listWallets);
            return this;
        }

        public Builder listWallets(Optional<? extends ActivityListWallets> listWallets) {
            Utils.checkNotNull(listWallets, "listWallets");
            this.listWallets = listWallets;
            return this;
        }

        public Builder revertTransaction(ActivityRevertTransaction revertTransaction) {
            Utils.checkNotNull(revertTransaction, "revertTransaction");
            this.revertTransaction = Optional.ofNullable(revertTransaction);
            return this;
        }

        public Builder revertTransaction(Optional<? extends ActivityRevertTransaction> revertTransaction) {
            Utils.checkNotNull(revertTransaction, "revertTransaction");
            this.revertTransaction = revertTransaction;
            return this;
        }

        public Builder stripeTransfer(ActivityStripeTransfer stripeTransfer) {
            Utils.checkNotNull(stripeTransfer, "stripeTransfer");
            this.stripeTransfer = Optional.ofNullable(stripeTransfer);
            return this;
        }

        public Builder stripeTransfer(Optional<? extends ActivityStripeTransfer> stripeTransfer) {
            Utils.checkNotNull(stripeTransfer, "stripeTransfer");
            this.stripeTransfer = stripeTransfer;
            return this;
        }

        public Builder voidHold(ActivityVoidHold voidHold) {
            Utils.checkNotNull(voidHold, "voidHold");
            this.voidHold = Optional.ofNullable(voidHold);
            return this;
        }

        public Builder voidHold(Optional<? extends ActivityVoidHold> voidHold) {
            Utils.checkNotNull(voidHold, "voidHold");
            this.voidHold = voidHold;
            return this;
        }
        
        public WorkflowInstanceHistoryStageInput build() {
            return new WorkflowInstanceHistoryStageInput(
                addAccountMetadata,
                confirmHold,
                createTransaction,
                creditWallet,
                debitWallet,
                getAccount,
                getPayment,
                getWallet,
                listWallets,
                revertTransaction,
                stripeTransfer,
                voidHold);
        }
    }
}

