/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigInteger;
import java.util.Objects;
import java.util.Optional;


public class ConfirmHoldRequest {

    /**
     * Define the amount to transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends BigInteger> amount;

    /**
     * Define a final confirmation. Remaining funds will be returned to the wallet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("final")
    private Optional<Boolean> final_;

    @JsonCreator
    public ConfirmHoldRequest(
            @JsonProperty("amount") Optional<? extends BigInteger> amount,
            @JsonProperty("final") Optional<Boolean> final_) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(final_, "final_");
        this.amount = amount;
        this.final_ = final_;
    }
    
    public ConfirmHoldRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Define the amount to transfer.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigInteger> amount() {
        return (Optional<BigInteger>) amount;
    }

    /**
     * Define a final confirmation. Remaining funds will be returned to the wallet.
     */
    @JsonIgnore
    public Optional<Boolean> final_() {
        return final_;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Define the amount to transfer.
     */
    public ConfirmHoldRequest withAmount(BigInteger amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * Define the amount to transfer.
     */
    public ConfirmHoldRequest withAmount(long amount) {
        this.amount = Optional.of(BigInteger.valueOf(amount));
        return this;
    }

    /**
     * Define the amount to transfer.
     */
    public ConfirmHoldRequest withAmount(Optional<? extends BigInteger> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Define a final confirmation. Remaining funds will be returned to the wallet.
     */
    public ConfirmHoldRequest withFinal(boolean final_) {
        Utils.checkNotNull(final_, "final_");
        this.final_ = Optional.ofNullable(final_);
        return this;
    }

    /**
     * Define a final confirmation. Remaining funds will be returned to the wallet.
     */
    public ConfirmHoldRequest withFinal(Optional<Boolean> final_) {
        Utils.checkNotNull(final_, "final_");
        this.final_ = final_;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConfirmHoldRequest other = (ConfirmHoldRequest) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.final_, other.final_);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            final_);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConfirmHoldRequest.class,
                "amount", amount,
                "final_", final_);
    }
    
    public final static class Builder {
 
        private Optional<? extends BigInteger> amount = Optional.empty();
 
        private Optional<Boolean> final_ = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Define the amount to transfer.
         */
        public Builder amount(BigInteger amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Define the amount to transfer.
         */
        public Builder amount(long amount) {
            this.amount = Optional.of(BigInteger.valueOf(amount));
            return this;
        }

        /**
         * Define the amount to transfer.
         */
        public Builder amount(Optional<? extends BigInteger> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Define a final confirmation. Remaining funds will be returned to the wallet.
         */
        public Builder final_(boolean final_) {
            Utils.checkNotNull(final_, "final_");
            this.final_ = Optional.ofNullable(final_);
            return this;
        }

        /**
         * Define a final confirmation. Remaining funds will be returned to the wallet.
         */
        public Builder final_(Optional<Boolean> final_) {
            Utils.checkNotNull(final_, "final_");
            this.final_ = final_;
            return this;
        }
        
        public ConfirmHoldRequest build() {
            return new ConfirmHoldRequest(
                amount,
                final_);
        }
    }
}

