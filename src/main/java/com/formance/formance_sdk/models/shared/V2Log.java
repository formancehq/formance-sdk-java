/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Objects;


public class V2Log {

    @JsonProperty("data")
    private Map<String, Object> data;

    @JsonProperty("date")
    private OffsetDateTime date;

    @JsonProperty("hash")
    private String hash;

    @JsonProperty("id")
    private BigInteger id;

    @JsonProperty("type")
    private V2LogType type;

    @JsonCreator
    public V2Log(
            @JsonProperty("data") Map<String, Object> data,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("hash") String hash,
            @JsonProperty("id") BigInteger id,
            @JsonProperty("type") V2LogType type) {
        data = Utils.emptyMapIfNull(data);
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(hash, "hash");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        this.data = data;
        this.date = date;
        this.hash = hash;
        this.id = id;
        this.type = type;
    }

    @JsonIgnore
    public Map<String, Object> data() {
        return data;
    }

    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    @JsonIgnore
    public String hash() {
        return hash;
    }

    @JsonIgnore
    public BigInteger id() {
        return id;
    }

    @JsonIgnore
    public V2LogType type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V2Log withData(Map<String, Object> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public V2Log withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public V2Log withHash(String hash) {
        Utils.checkNotNull(hash, "hash");
        this.hash = hash;
        return this;
    }

    public V2Log withId(long id) {
        this.id = BigInteger.valueOf(id);
        return this;
    }

    public V2Log withId(BigInteger id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public V2Log withType(V2LogType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2Log other = (V2Log) o;
        return 
            Objects.deepEquals(this.data, other.data) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.hash, other.hash) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            data,
            date,
            hash,
            id,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2Log.class,
                "data", data,
                "date", date,
                "hash", hash,
                "id", id,
                "type", type);
    }
    
    public final static class Builder {
 
        private Map<String, Object> data;
 
        private OffsetDateTime date;
 
        private String hash;
 
        private BigInteger id;
 
        private V2LogType type;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder data(Map<String, Object> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder hash(String hash) {
            Utils.checkNotNull(hash, "hash");
            this.hash = hash;
            return this;
        }

        public Builder id(long id) {
            this.id = BigInteger.valueOf(id);
            return this;
        }

        public Builder id(BigInteger id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder type(V2LogType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public V2Log build() {
            return new V2Log(
                data,
                date,
                hash,
                id,
                type);
        }
    }
}

