/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.utils.LazySingletonValue;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class V3AtlarConfig implements V3InstallConnectorRequest {

    @JsonProperty("accessKey")
    private String accessKey;


    @JsonProperty("baseUrl")
    private String baseUrl;


    @JsonProperty("name")
    private String name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageSize")
    private Optional<Long> pageSize;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pollingPeriod")
    private Optional<String> pollingPeriod;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider")
    private Optional<String> provider;


    @JsonProperty("secret")
    private String secret;

    @JsonCreator
    public V3AtlarConfig(
            @JsonProperty("accessKey") String accessKey,
            @JsonProperty("baseUrl") String baseUrl,
            @JsonProperty("name") String name,
            @JsonProperty("pageSize") Optional<Long> pageSize,
            @JsonProperty("pollingPeriod") Optional<String> pollingPeriod,
            @JsonProperty("provider") Optional<String> provider,
            @JsonProperty("secret") String secret) {
        Utils.checkNotNull(accessKey, "accessKey");
        Utils.checkNotNull(baseUrl, "baseUrl");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(pollingPeriod, "pollingPeriod");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(secret, "secret");
        this.accessKey = accessKey;
        this.baseUrl = baseUrl;
        this.name = name;
        this.pageSize = pageSize;
        this.pollingPeriod = pollingPeriod;
        this.provider = provider;
        this.secret = secret;
    }
    
    public V3AtlarConfig(
            String accessKey,
            String baseUrl,
            String name,
            String secret) {
        this(accessKey, baseUrl, name,
            Optional.empty(), Optional.empty(), Optional.empty(),
            secret);
    }

    @JsonIgnore
    public String accessKey() {
        return accessKey;
    }

    @JsonIgnore
    public String baseUrl() {
        return baseUrl;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    @JsonIgnore
    public Optional<String> pollingPeriod() {
        return pollingPeriod;
    }

    @JsonIgnore
    @Override
    public String provider() {
        return Utils.discriminatorToString(provider);
    }

    @JsonIgnore
    public String secret() {
        return secret;
    }

    public static Builder builder() {
        return new Builder();
    }


    public V3AtlarConfig withAccessKey(String accessKey) {
        Utils.checkNotNull(accessKey, "accessKey");
        this.accessKey = accessKey;
        return this;
    }

    public V3AtlarConfig withBaseUrl(String baseUrl) {
        Utils.checkNotNull(baseUrl, "baseUrl");
        this.baseUrl = baseUrl;
        return this;
    }

    public V3AtlarConfig withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public V3AtlarConfig withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }


    public V3AtlarConfig withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    public V3AtlarConfig withPollingPeriod(String pollingPeriod) {
        Utils.checkNotNull(pollingPeriod, "pollingPeriod");
        this.pollingPeriod = Optional.ofNullable(pollingPeriod);
        return this;
    }


    public V3AtlarConfig withPollingPeriod(Optional<String> pollingPeriod) {
        Utils.checkNotNull(pollingPeriod, "pollingPeriod");
        this.pollingPeriod = pollingPeriod;
        return this;
    }

    public V3AtlarConfig withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = Optional.ofNullable(provider);
        return this;
    }


    public V3AtlarConfig withProvider(Optional<String> provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public V3AtlarConfig withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3AtlarConfig other = (V3AtlarConfig) o;
        return 
            Utils.enhancedDeepEquals(this.accessKey, other.accessKey) &&
            Utils.enhancedDeepEquals(this.baseUrl, other.baseUrl) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.pageSize, other.pageSize) &&
            Utils.enhancedDeepEquals(this.pollingPeriod, other.pollingPeriod) &&
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.secret, other.secret);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accessKey, baseUrl, name,
            pageSize, pollingPeriod, provider,
            secret);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3AtlarConfig.class,
                "accessKey", accessKey,
                "baseUrl", baseUrl,
                "name", name,
                "pageSize", pageSize,
                "pollingPeriod", pollingPeriod,
                "provider", provider,
                "secret", secret);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accessKey;

        private String baseUrl;

        private String name;

        private Optional<Long> pageSize;

        private Optional<String> pollingPeriod;

        private Optional<String> provider;

        private String secret;

        private Builder() {
          // force use of static builder() method
        }


        public Builder accessKey(String accessKey) {
            Utils.checkNotNull(accessKey, "accessKey");
            this.accessKey = accessKey;
            return this;
        }


        public Builder baseUrl(String baseUrl) {
            Utils.checkNotNull(baseUrl, "baseUrl");
            this.baseUrl = baseUrl;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }


        public Builder pollingPeriod(String pollingPeriod) {
            Utils.checkNotNull(pollingPeriod, "pollingPeriod");
            this.pollingPeriod = Optional.ofNullable(pollingPeriod);
            return this;
        }

        public Builder pollingPeriod(Optional<String> pollingPeriod) {
            Utils.checkNotNull(pollingPeriod, "pollingPeriod");
            this.pollingPeriod = pollingPeriod;
            return this;
        }


        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        public Builder provider(Optional<String> provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }


        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }

        public V3AtlarConfig build() {
            if (pageSize == null) {
                pageSize = _SINGLETON_VALUE_PageSize.value();
            }
            if (pollingPeriod == null) {
                pollingPeriod = _SINGLETON_VALUE_PollingPeriod.value();
            }
            if (provider == null) {
                provider = _SINGLETON_VALUE_Provider.value();
            }

            return new V3AtlarConfig(
                accessKey, baseUrl, name,
                pageSize, pollingPeriod, provider,
                secret);
        }


        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_PageSize =
                new LazySingletonValue<>(
                        "pageSize",
                        "\"25\"",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_PollingPeriod =
                new LazySingletonValue<>(
                        "pollingPeriod",
                        "\"2m\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Provider =
                new LazySingletonValue<>(
                        "provider",
                        "\"Atlar\"",
                        new TypeReference<Optional<String>>() {});
    }
}
