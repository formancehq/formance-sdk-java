/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class PolicyRequest {

    @JsonProperty("ledgerName")
    private String ledgerName;

    @JsonProperty("ledgerQuery")
    private java.util.Map<String, java.lang.Object> ledgerQuery;

    @JsonProperty("name")
    private String name;

    @JsonProperty("paymentsPoolID")
    private String paymentsPoolID;

    @JsonCreator
    public PolicyRequest(
            @JsonProperty("ledgerName") String ledgerName,
            @JsonProperty("ledgerQuery") java.util.Map<String, java.lang.Object> ledgerQuery,
            @JsonProperty("name") String name,
            @JsonProperty("paymentsPoolID") String paymentsPoolID) {
        Utils.checkNotNull(ledgerName, "ledgerName");
        ledgerQuery = Utils.emptyMapIfNull(ledgerQuery);
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(paymentsPoolID, "paymentsPoolID");
        this.ledgerName = ledgerName;
        this.ledgerQuery = ledgerQuery;
        this.name = name;
        this.paymentsPoolID = paymentsPoolID;
    }

    @JsonIgnore
    public String ledgerName() {
        return ledgerName;
    }

    @JsonIgnore
    public java.util.Map<String, java.lang.Object> ledgerQuery() {
        return ledgerQuery;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String paymentsPoolID() {
        return paymentsPoolID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PolicyRequest withLedgerName(String ledgerName) {
        Utils.checkNotNull(ledgerName, "ledgerName");
        this.ledgerName = ledgerName;
        return this;
    }

    public PolicyRequest withLedgerQuery(java.util.Map<String, java.lang.Object> ledgerQuery) {
        Utils.checkNotNull(ledgerQuery, "ledgerQuery");
        this.ledgerQuery = ledgerQuery;
        return this;
    }

    public PolicyRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public PolicyRequest withPaymentsPoolID(String paymentsPoolID) {
        Utils.checkNotNull(paymentsPoolID, "paymentsPoolID");
        this.paymentsPoolID = paymentsPoolID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PolicyRequest other = (PolicyRequest) o;
        return 
            java.util.Objects.deepEquals(this.ledgerName, other.ledgerName) &&
            java.util.Objects.deepEquals(this.ledgerQuery, other.ledgerQuery) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.paymentsPoolID, other.paymentsPoolID);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            ledgerName,
            ledgerQuery,
            name,
            paymentsPoolID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PolicyRequest.class,
                "ledgerName", ledgerName,
                "ledgerQuery", ledgerQuery,
                "name", name,
                "paymentsPoolID", paymentsPoolID);
    }
    
    public final static class Builder {
 
        private String ledgerName;
 
        private java.util.Map<String, java.lang.Object> ledgerQuery;
 
        private String name;
 
        private String paymentsPoolID;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ledgerName(String ledgerName) {
            Utils.checkNotNull(ledgerName, "ledgerName");
            this.ledgerName = ledgerName;
            return this;
        }

        public Builder ledgerQuery(java.util.Map<String, java.lang.Object> ledgerQuery) {
            Utils.checkNotNull(ledgerQuery, "ledgerQuery");
            this.ledgerQuery = ledgerQuery;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder paymentsPoolID(String paymentsPoolID) {
            Utils.checkNotNull(paymentsPoolID, "paymentsPoolID");
            this.paymentsPoolID = paymentsPoolID;
            return this;
        }
        
        public PolicyRequest build() {
            return new PolicyRequest(
                ledgerName,
                ledgerQuery,
                name,
                paymentsPoolID);
        }
    }
}

