/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class TransferInitiationAdjusments {

    @JsonProperty("adjustmentID")
    private String adjustmentID;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("error")
    private String error;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    @JsonProperty("status")
    private TransferInitiationStatus status;

    @JsonCreator
    public TransferInitiationAdjusments(
            @JsonProperty("adjustmentID") String adjustmentID,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("error") String error,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("status") TransferInitiationStatus status) {
        Utils.checkNotNull(adjustmentID, "adjustmentID");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(status, "status");
        this.adjustmentID = adjustmentID;
        this.createdAt = createdAt;
        this.error = error;
        this.metadata = metadata;
        this.status = status;
    }
    
    public TransferInitiationAdjusments(
            String adjustmentID,
            OffsetDateTime createdAt,
            String error,
            TransferInitiationStatus status) {
        this(adjustmentID, createdAt, error, JsonNullable.undefined(), status);
    }

    @JsonIgnore
    public String adjustmentID() {
        return adjustmentID;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String error() {
        return error;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    @JsonIgnore
    public TransferInitiationStatus status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TransferInitiationAdjusments withAdjustmentID(String adjustmentID) {
        Utils.checkNotNull(adjustmentID, "adjustmentID");
        this.adjustmentID = adjustmentID;
        return this;
    }

    public TransferInitiationAdjusments withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public TransferInitiationAdjusments withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public TransferInitiationAdjusments withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public TransferInitiationAdjusments withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public TransferInitiationAdjusments withStatus(TransferInitiationStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransferInitiationAdjusments other = (TransferInitiationAdjusments) o;
        return 
            Objects.deepEquals(this.adjustmentID, other.adjustmentID) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            adjustmentID,
            createdAt,
            error,
            metadata,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransferInitiationAdjusments.class,
                "adjustmentID", adjustmentID,
                "createdAt", createdAt,
                "error", error,
                "metadata", metadata,
                "status", status);
    }
    
    public final static class Builder {
 
        private String adjustmentID;
 
        private OffsetDateTime createdAt;
 
        private String error;
 
        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();
 
        private TransferInitiationStatus status;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder adjustmentID(String adjustmentID) {
            Utils.checkNotNull(adjustmentID, "adjustmentID");
            this.adjustmentID = adjustmentID;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder status(TransferInitiationStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public TransferInitiationAdjusments build() {
            return new TransferInitiationAdjusments(
                adjustmentID,
                createdAt,
                error,
                metadata,
                status);
        }
    }
}

