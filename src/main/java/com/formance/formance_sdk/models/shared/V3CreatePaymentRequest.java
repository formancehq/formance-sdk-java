/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.formance.formance_sdk.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class V3CreatePaymentRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adjustments")
    private Optional<? extends List<V3CreatePaymentAdjustmentRequest>> adjustments;

    @JsonProperty("amount")
    private BigInteger amount;

    @JsonProperty("asset")
    private String asset;

    @JsonProperty("connectorID")
    private String connectorID;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationAccountID")
    private Optional<String> destinationAccountID;

    @JsonProperty("initialAmount")
    private BigInteger initialAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    @JsonProperty("reference")
    private String reference;

    @JsonProperty("scheme")
    private String scheme;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAccountID")
    private Optional<String> sourceAccountID;

    @JsonProperty("type")
    private V3PaymentTypeEnum type;

    @JsonCreator
    public V3CreatePaymentRequest(
            @JsonProperty("adjustments") Optional<? extends List<V3CreatePaymentAdjustmentRequest>> adjustments,
            @JsonProperty("amount") BigInteger amount,
            @JsonProperty("asset") String asset,
            @JsonProperty("connectorID") String connectorID,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("destinationAccountID") Optional<String> destinationAccountID,
            @JsonProperty("initialAmount") BigInteger initialAmount,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("reference") String reference,
            @JsonProperty("scheme") String scheme,
            @JsonProperty("sourceAccountID") Optional<String> sourceAccountID,
            @JsonProperty("type") V3PaymentTypeEnum type) {
        Utils.checkNotNull(adjustments, "adjustments");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(asset, "asset");
        Utils.checkNotNull(connectorID, "connectorID");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        Utils.checkNotNull(initialAmount, "initialAmount");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(scheme, "scheme");
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        Utils.checkNotNull(type, "type");
        this.adjustments = adjustments;
        this.amount = amount;
        this.asset = asset;
        this.connectorID = connectorID;
        this.createdAt = createdAt;
        this.destinationAccountID = destinationAccountID;
        this.initialAmount = initialAmount;
        this.metadata = metadata;
        this.reference = reference;
        this.scheme = scheme;
        this.sourceAccountID = sourceAccountID;
        this.type = type;
    }
    
    public V3CreatePaymentRequest(
            BigInteger amount,
            String asset,
            String connectorID,
            OffsetDateTime createdAt,
            BigInteger initialAmount,
            String reference,
            String scheme,
            V3PaymentTypeEnum type) {
        this(Optional.empty(), amount, asset, connectorID, createdAt, Optional.empty(), initialAmount, JsonNullable.undefined(), reference, scheme, Optional.empty(), type);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<V3CreatePaymentAdjustmentRequest>> adjustments() {
        return (Optional<List<V3CreatePaymentAdjustmentRequest>>) adjustments;
    }

    @JsonIgnore
    public BigInteger amount() {
        return amount;
    }

    @JsonIgnore
    public String asset() {
        return asset;
    }

    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> destinationAccountID() {
        return destinationAccountID;
    }

    @JsonIgnore
    public BigInteger initialAmount() {
        return initialAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    @JsonIgnore
    public String reference() {
        return reference;
    }

    @JsonIgnore
    public String scheme() {
        return scheme;
    }

    @JsonIgnore
    public Optional<String> sourceAccountID() {
        return sourceAccountID;
    }

    @JsonIgnore
    public V3PaymentTypeEnum type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V3CreatePaymentRequest withAdjustments(List<V3CreatePaymentAdjustmentRequest> adjustments) {
        Utils.checkNotNull(adjustments, "adjustments");
        this.adjustments = Optional.ofNullable(adjustments);
        return this;
    }

    public V3CreatePaymentRequest withAdjustments(Optional<? extends List<V3CreatePaymentAdjustmentRequest>> adjustments) {
        Utils.checkNotNull(adjustments, "adjustments");
        this.adjustments = adjustments;
        return this;
    }

    public V3CreatePaymentRequest withAmount(long amount) {
        this.amount = BigInteger.valueOf(amount);
        return this;
    }

    public V3CreatePaymentRequest withAmount(BigInteger amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public V3CreatePaymentRequest withAsset(String asset) {
        Utils.checkNotNull(asset, "asset");
        this.asset = asset;
        return this;
    }

    public V3CreatePaymentRequest withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    public V3CreatePaymentRequest withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public V3CreatePaymentRequest withDestinationAccountID(String destinationAccountID) {
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        this.destinationAccountID = Optional.ofNullable(destinationAccountID);
        return this;
    }

    public V3CreatePaymentRequest withDestinationAccountID(Optional<String> destinationAccountID) {
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        this.destinationAccountID = destinationAccountID;
        return this;
    }

    public V3CreatePaymentRequest withInitialAmount(long initialAmount) {
        this.initialAmount = BigInteger.valueOf(initialAmount);
        return this;
    }

    public V3CreatePaymentRequest withInitialAmount(BigInteger initialAmount) {
        Utils.checkNotNull(initialAmount, "initialAmount");
        this.initialAmount = initialAmount;
        return this;
    }

    public V3CreatePaymentRequest withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public V3CreatePaymentRequest withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public V3CreatePaymentRequest withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public V3CreatePaymentRequest withScheme(String scheme) {
        Utils.checkNotNull(scheme, "scheme");
        this.scheme = scheme;
        return this;
    }

    public V3CreatePaymentRequest withSourceAccountID(String sourceAccountID) {
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        this.sourceAccountID = Optional.ofNullable(sourceAccountID);
        return this;
    }

    public V3CreatePaymentRequest withSourceAccountID(Optional<String> sourceAccountID) {
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        this.sourceAccountID = sourceAccountID;
        return this;
    }

    public V3CreatePaymentRequest withType(V3PaymentTypeEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3CreatePaymentRequest other = (V3CreatePaymentRequest) o;
        return 
            Objects.deepEquals(this.adjustments, other.adjustments) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.asset, other.asset) &&
            Objects.deepEquals(this.connectorID, other.connectorID) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.destinationAccountID, other.destinationAccountID) &&
            Objects.deepEquals(this.initialAmount, other.initialAmount) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.scheme, other.scheme) &&
            Objects.deepEquals(this.sourceAccountID, other.sourceAccountID) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            adjustments,
            amount,
            asset,
            connectorID,
            createdAt,
            destinationAccountID,
            initialAmount,
            metadata,
            reference,
            scheme,
            sourceAccountID,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3CreatePaymentRequest.class,
                "adjustments", adjustments,
                "amount", amount,
                "asset", asset,
                "connectorID", connectorID,
                "createdAt", createdAt,
                "destinationAccountID", destinationAccountID,
                "initialAmount", initialAmount,
                "metadata", metadata,
                "reference", reference,
                "scheme", scheme,
                "sourceAccountID", sourceAccountID,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<V3CreatePaymentAdjustmentRequest>> adjustments = Optional.empty();
 
        private BigInteger amount;
 
        private String asset;
 
        private String connectorID;
 
        private OffsetDateTime createdAt;
 
        private Optional<String> destinationAccountID = Optional.empty();
 
        private BigInteger initialAmount;
 
        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();
 
        private String reference;
 
        private String scheme;
 
        private Optional<String> sourceAccountID = Optional.empty();
 
        private V3PaymentTypeEnum type;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder adjustments(List<V3CreatePaymentAdjustmentRequest> adjustments) {
            Utils.checkNotNull(adjustments, "adjustments");
            this.adjustments = Optional.ofNullable(adjustments);
            return this;
        }

        public Builder adjustments(Optional<? extends List<V3CreatePaymentAdjustmentRequest>> adjustments) {
            Utils.checkNotNull(adjustments, "adjustments");
            this.adjustments = adjustments;
            return this;
        }

        public Builder amount(long amount) {
            this.amount = BigInteger.valueOf(amount);
            return this;
        }

        public Builder amount(BigInteger amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder asset(String asset) {
            Utils.checkNotNull(asset, "asset");
            this.asset = asset;
            return this;
        }

        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder destinationAccountID(String destinationAccountID) {
            Utils.checkNotNull(destinationAccountID, "destinationAccountID");
            this.destinationAccountID = Optional.ofNullable(destinationAccountID);
            return this;
        }

        public Builder destinationAccountID(Optional<String> destinationAccountID) {
            Utils.checkNotNull(destinationAccountID, "destinationAccountID");
            this.destinationAccountID = destinationAccountID;
            return this;
        }

        public Builder initialAmount(long initialAmount) {
            this.initialAmount = BigInteger.valueOf(initialAmount);
            return this;
        }

        public Builder initialAmount(BigInteger initialAmount) {
            Utils.checkNotNull(initialAmount, "initialAmount");
            this.initialAmount = initialAmount;
            return this;
        }

        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder scheme(String scheme) {
            Utils.checkNotNull(scheme, "scheme");
            this.scheme = scheme;
            return this;
        }

        public Builder sourceAccountID(String sourceAccountID) {
            Utils.checkNotNull(sourceAccountID, "sourceAccountID");
            this.sourceAccountID = Optional.ofNullable(sourceAccountID);
            return this;
        }

        public Builder sourceAccountID(Optional<String> sourceAccountID) {
            Utils.checkNotNull(sourceAccountID, "sourceAccountID");
            this.sourceAccountID = sourceAccountID;
            return this;
        }

        public Builder type(V3PaymentTypeEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public V3CreatePaymentRequest build() {
            return new V3CreatePaymentRequest(
                adjustments,
                amount,
                asset,
                connectorID,
                createdAt,
                destinationAccountID,
                initialAmount,
                metadata,
                reference,
                scheme,
                sourceAccountID,
                type);
        }
    }
}

