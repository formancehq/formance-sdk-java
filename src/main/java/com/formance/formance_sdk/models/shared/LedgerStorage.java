/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class LedgerStorage {

    @JsonProperty("driver")
    private String driver;

    @JsonProperty("ledgers")
    private List<String> ledgers;

    @JsonCreator
    public LedgerStorage(
            @JsonProperty("driver") String driver,
            @JsonProperty("ledgers") List<String> ledgers) {
        Utils.checkNotNull(driver, "driver");
        Utils.checkNotNull(ledgers, "ledgers");
        this.driver = driver;
        this.ledgers = ledgers;
    }

    @JsonIgnore
    public String driver() {
        return driver;
    }

    @JsonIgnore
    public List<String> ledgers() {
        return ledgers;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public LedgerStorage withDriver(String driver) {
        Utils.checkNotNull(driver, "driver");
        this.driver = driver;
        return this;
    }

    public LedgerStorage withLedgers(List<String> ledgers) {
        Utils.checkNotNull(ledgers, "ledgers");
        this.ledgers = ledgers;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LedgerStorage other = (LedgerStorage) o;
        return 
            Objects.deepEquals(this.driver, other.driver) &&
            Objects.deepEquals(this.ledgers, other.ledgers);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            driver,
            ledgers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LedgerStorage.class,
                "driver", driver,
                "ledgers", ledgers);
    }
    
    public final static class Builder {
 
        private String driver;
 
        private List<String> ledgers;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder driver(String driver) {
            Utils.checkNotNull(driver, "driver");
            this.driver = driver;
            return this;
        }

        public Builder ledgers(List<String> ledgers) {
            Utils.checkNotNull(ledgers, "ledgers");
            this.ledgers = ledgers;
            return this;
        }
        
        public LedgerStorage build() {
            return new LedgerStorage(
                driver,
                ledgers);
        }
    }
}

