/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class V2LedgerInfoStorage {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("migrations")
    private Optional<? extends List<V2MigrationInfo>> migrations;

    @JsonCreator
    public V2LedgerInfoStorage(
            @JsonProperty("migrations") Optional<? extends List<V2MigrationInfo>> migrations) {
        Utils.checkNotNull(migrations, "migrations");
        this.migrations = migrations;
    }
    
    public V2LedgerInfoStorage() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<V2MigrationInfo>> migrations() {
        return (Optional<List<V2MigrationInfo>>) migrations;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V2LedgerInfoStorage withMigrations(List<V2MigrationInfo> migrations) {
        Utils.checkNotNull(migrations, "migrations");
        this.migrations = Optional.ofNullable(migrations);
        return this;
    }

    public V2LedgerInfoStorage withMigrations(Optional<? extends List<V2MigrationInfo>> migrations) {
        Utils.checkNotNull(migrations, "migrations");
        this.migrations = migrations;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2LedgerInfoStorage other = (V2LedgerInfoStorage) o;
        return 
            Objects.deepEquals(this.migrations, other.migrations);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            migrations);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2LedgerInfoStorage.class,
                "migrations", migrations);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<V2MigrationInfo>> migrations = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder migrations(List<V2MigrationInfo> migrations) {
            Utils.checkNotNull(migrations, "migrations");
            this.migrations = Optional.ofNullable(migrations);
            return this;
        }

        public Builder migrations(Optional<? extends List<V2MigrationInfo>> migrations) {
            Utils.checkNotNull(migrations, "migrations");
            this.migrations = migrations;
            return this;
        }
        
        public V2LedgerInfoStorage build() {
            return new V2LedgerInfoStorage(
                migrations);
        }
    }
}

