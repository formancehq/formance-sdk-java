/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class DebitWalletRequest {

    @JsonProperty("amount")
    private Monetary amount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balances")
    private Optional<? extends List<String>> balances;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    private Optional<? extends Subject> destination;

    /**
     * Metadata associated with the wallet.
     */
    @JsonProperty("metadata")
    private Map<String, String> metadata;

    /**
     * Set to true to create a pending hold. If false, the wallet will be debited immediately.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending")
    private Optional<Boolean> pending;

    /**
     * cannot be used in conjunction with `pending` property
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<OffsetDateTime> timestamp;

    @JsonCreator
    public DebitWalletRequest(
            @JsonProperty("amount") Monetary amount,
            @JsonProperty("balances") Optional<? extends List<String>> balances,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("destination") Optional<? extends Subject> destination,
            @JsonProperty("metadata") Map<String, String> metadata,
            @JsonProperty("pending") Optional<Boolean> pending,
            @JsonProperty("timestamp") Optional<OffsetDateTime> timestamp) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(balances, "balances");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(destination, "destination");
        metadata = Utils.emptyMapIfNull(metadata);
        Utils.checkNotNull(pending, "pending");
        Utils.checkNotNull(timestamp, "timestamp");
        this.amount = amount;
        this.balances = balances;
        this.description = description;
        this.destination = destination;
        this.metadata = metadata;
        this.pending = pending;
        this.timestamp = timestamp;
    }
    
    public DebitWalletRequest(
            Monetary amount,
            Map<String, String> metadata) {
        this(amount, Optional.empty(), Optional.empty(), Optional.empty(), metadata, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Monetary amount() {
        return amount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> balances() {
        return (Optional<List<String>>) balances;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Subject> destination() {
        return (Optional<Subject>) destination;
    }

    /**
     * Metadata associated with the wallet.
     */
    @JsonIgnore
    public Map<String, String> metadata() {
        return metadata;
    }

    /**
     * Set to true to create a pending hold. If false, the wallet will be debited immediately.
     */
    @JsonIgnore
    public Optional<Boolean> pending() {
        return pending;
    }

    /**
     * cannot be used in conjunction with `pending` property
     */
    @JsonIgnore
    public Optional<OffsetDateTime> timestamp() {
        return timestamp;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DebitWalletRequest withAmount(Monetary amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public DebitWalletRequest withBalances(List<String> balances) {
        Utils.checkNotNull(balances, "balances");
        this.balances = Optional.ofNullable(balances);
        return this;
    }

    public DebitWalletRequest withBalances(Optional<? extends List<String>> balances) {
        Utils.checkNotNull(balances, "balances");
        this.balances = balances;
        return this;
    }

    public DebitWalletRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public DebitWalletRequest withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public DebitWalletRequest withDestination(Subject destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = Optional.ofNullable(destination);
        return this;
    }

    public DebitWalletRequest withDestination(Optional<? extends Subject> destination) {
        Utils.checkNotNull(destination, "destination");
        this.destination = destination;
        return this;
    }

    /**
     * Metadata associated with the wallet.
     */
    public DebitWalletRequest withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Set to true to create a pending hold. If false, the wallet will be debited immediately.
     */
    public DebitWalletRequest withPending(boolean pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = Optional.ofNullable(pending);
        return this;
    }

    /**
     * Set to true to create a pending hold. If false, the wallet will be debited immediately.
     */
    public DebitWalletRequest withPending(Optional<Boolean> pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = pending;
        return this;
    }

    /**
     * cannot be used in conjunction with `pending` property
     */
    public DebitWalletRequest withTimestamp(OffsetDateTime timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    /**
     * cannot be used in conjunction with `pending` property
     */
    public DebitWalletRequest withTimestamp(Optional<OffsetDateTime> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DebitWalletRequest other = (DebitWalletRequest) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.balances, other.balances) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.destination, other.destination) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.pending, other.pending) &&
            Objects.deepEquals(this.timestamp, other.timestamp);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            balances,
            description,
            destination,
            metadata,
            pending,
            timestamp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DebitWalletRequest.class,
                "amount", amount,
                "balances", balances,
                "description", description,
                "destination", destination,
                "metadata", metadata,
                "pending", pending,
                "timestamp", timestamp);
    }
    
    public final static class Builder {
 
        private Monetary amount;
 
        private Optional<? extends List<String>> balances = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends Subject> destination = Optional.empty();
 
        private Map<String, String> metadata;
 
        private Optional<Boolean> pending = Optional.empty();
 
        private Optional<OffsetDateTime> timestamp = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(Monetary amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder balances(List<String> balances) {
            Utils.checkNotNull(balances, "balances");
            this.balances = Optional.ofNullable(balances);
            return this;
        }

        public Builder balances(Optional<? extends List<String>> balances) {
            Utils.checkNotNull(balances, "balances");
            this.balances = balances;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder destination(Subject destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        public Builder destination(Optional<? extends Subject> destination) {
            Utils.checkNotNull(destination, "destination");
            this.destination = destination;
            return this;
        }

        /**
         * Metadata associated with the wallet.
         */
        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Set to true to create a pending hold. If false, the wallet will be debited immediately.
         */
        public Builder pending(boolean pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = Optional.ofNullable(pending);
            return this;
        }

        /**
         * Set to true to create a pending hold. If false, the wallet will be debited immediately.
         */
        public Builder pending(Optional<Boolean> pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = pending;
            return this;
        }

        /**
         * cannot be used in conjunction with `pending` property
         */
        public Builder timestamp(OffsetDateTime timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * cannot be used in conjunction with `pending` property
         */
        public Builder timestamp(Optional<OffsetDateTime> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }
        
        public DebitWalletRequest build() {
            return new DebitWalletRequest(
                amount,
                balances,
                description,
                destination,
                metadata,
                pending,
                timestamp);
        }
    }
}

