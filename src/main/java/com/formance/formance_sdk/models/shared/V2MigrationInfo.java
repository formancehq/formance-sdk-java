/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class V2MigrationInfo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private Optional<? extends OffsetDateTime> date;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends V2MigrationInfoState> state;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends Long> version;

    @JsonCreator
    public V2MigrationInfo(
            @JsonProperty("date") Optional<? extends OffsetDateTime> date,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("state") Optional<? extends V2MigrationInfoState> state,
            @JsonProperty("version") Optional<? extends Long> version) {
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(version, "version");
        this.date = date;
        this.name = name;
        this.state = state;
        this.version = version;
    }
    
    public V2MigrationInfo() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> date() {
        return (Optional<OffsetDateTime>) date;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<V2MigrationInfoState> state() {
        return (Optional<V2MigrationInfoState>) state;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> version() {
        return (Optional<Long>) version;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V2MigrationInfo withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    public V2MigrationInfo withDate(Optional<? extends OffsetDateTime> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public V2MigrationInfo withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public V2MigrationInfo withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public V2MigrationInfo withState(V2MigrationInfoState state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public V2MigrationInfo withState(Optional<? extends V2MigrationInfoState> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public V2MigrationInfo withVersion(long version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    public V2MigrationInfo withVersion(Optional<? extends Long> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2MigrationInfo other = (V2MigrationInfo) o;
        return 
            java.util.Objects.deepEquals(this.date, other.date) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            date,
            name,
            state,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2MigrationInfo.class,
                "date", date,
                "name", name,
                "state", state,
                "version", version);
    }
    
    public final static class Builder {
 
        private Optional<? extends OffsetDateTime> date = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends V2MigrationInfoState> state = Optional.empty();
 
        private Optional<? extends Long> version = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        public Builder date(Optional<? extends OffsetDateTime> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder state(V2MigrationInfoState state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends V2MigrationInfoState> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder version(long version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        public Builder version(Optional<? extends Long> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public V2MigrationInfo build() {
            return new V2MigrationInfo(
                date,
                name,
                state,
                version);
        }
    }
}

