/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class GetWalletSummaryResponse {

    @JsonProperty("availableFunds")
    private java.util.Map<String, BigInteger> availableFunds;

    @JsonProperty("balances")
    private java.util.List<BalanceWithAssets> balances;

    @JsonProperty("expirableFunds")
    private java.util.Map<String, BigInteger> expirableFunds;

    @JsonProperty("expiredFunds")
    private java.util.Map<String, BigInteger> expiredFunds;

    @JsonProperty("holdFunds")
    private java.util.Map<String, BigInteger> holdFunds;

    @JsonCreator
    public GetWalletSummaryResponse(
            @JsonProperty("availableFunds") java.util.Map<String, BigInteger> availableFunds,
            @JsonProperty("balances") java.util.List<BalanceWithAssets> balances,
            @JsonProperty("expirableFunds") java.util.Map<String, BigInteger> expirableFunds,
            @JsonProperty("expiredFunds") java.util.Map<String, BigInteger> expiredFunds,
            @JsonProperty("holdFunds") java.util.Map<String, BigInteger> holdFunds) {
        availableFunds = Utils.emptyMapIfNull(availableFunds);
        Utils.checkNotNull(balances, "balances");
        expirableFunds = Utils.emptyMapIfNull(expirableFunds);
        expiredFunds = Utils.emptyMapIfNull(expiredFunds);
        holdFunds = Utils.emptyMapIfNull(holdFunds);
        this.availableFunds = availableFunds;
        this.balances = balances;
        this.expirableFunds = expirableFunds;
        this.expiredFunds = expiredFunds;
        this.holdFunds = holdFunds;
    }

    @JsonIgnore
    public java.util.Map<String, BigInteger> availableFunds() {
        return availableFunds;
    }

    @JsonIgnore
    public java.util.List<BalanceWithAssets> balances() {
        return balances;
    }

    @JsonIgnore
    public java.util.Map<String, BigInteger> expirableFunds() {
        return expirableFunds;
    }

    @JsonIgnore
    public java.util.Map<String, BigInteger> expiredFunds() {
        return expiredFunds;
    }

    @JsonIgnore
    public java.util.Map<String, BigInteger> holdFunds() {
        return holdFunds;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetWalletSummaryResponse withAvailableFunds(java.util.Map<String, BigInteger> availableFunds) {
        Utils.checkNotNull(availableFunds, "availableFunds");
        this.availableFunds = availableFunds;
        return this;
    }

    public GetWalletSummaryResponse withBalances(java.util.List<BalanceWithAssets> balances) {
        Utils.checkNotNull(balances, "balances");
        this.balances = balances;
        return this;
    }

    public GetWalletSummaryResponse withExpirableFunds(java.util.Map<String, BigInteger> expirableFunds) {
        Utils.checkNotNull(expirableFunds, "expirableFunds");
        this.expirableFunds = expirableFunds;
        return this;
    }

    public GetWalletSummaryResponse withExpiredFunds(java.util.Map<String, BigInteger> expiredFunds) {
        Utils.checkNotNull(expiredFunds, "expiredFunds");
        this.expiredFunds = expiredFunds;
        return this;
    }

    public GetWalletSummaryResponse withHoldFunds(java.util.Map<String, BigInteger> holdFunds) {
        Utils.checkNotNull(holdFunds, "holdFunds");
        this.holdFunds = holdFunds;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetWalletSummaryResponse other = (GetWalletSummaryResponse) o;
        return 
            java.util.Objects.deepEquals(this.availableFunds, other.availableFunds) &&
            java.util.Objects.deepEquals(this.balances, other.balances) &&
            java.util.Objects.deepEquals(this.expirableFunds, other.expirableFunds) &&
            java.util.Objects.deepEquals(this.expiredFunds, other.expiredFunds) &&
            java.util.Objects.deepEquals(this.holdFunds, other.holdFunds);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            availableFunds,
            balances,
            expirableFunds,
            expiredFunds,
            holdFunds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetWalletSummaryResponse.class,
                "availableFunds", availableFunds,
                "balances", balances,
                "expirableFunds", expirableFunds,
                "expiredFunds", expiredFunds,
                "holdFunds", holdFunds);
    }
    
    public final static class Builder {
 
        private java.util.Map<String, BigInteger> availableFunds;
 
        private java.util.List<BalanceWithAssets> balances;
 
        private java.util.Map<String, BigInteger> expirableFunds;
 
        private java.util.Map<String, BigInteger> expiredFunds;
 
        private java.util.Map<String, BigInteger> holdFunds;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder availableFunds(java.util.Map<String, BigInteger> availableFunds) {
            Utils.checkNotNull(availableFunds, "availableFunds");
            this.availableFunds = availableFunds;
            return this;
        }

        public Builder balances(java.util.List<BalanceWithAssets> balances) {
            Utils.checkNotNull(balances, "balances");
            this.balances = balances;
            return this;
        }

        public Builder expirableFunds(java.util.Map<String, BigInteger> expirableFunds) {
            Utils.checkNotNull(expirableFunds, "expirableFunds");
            this.expirableFunds = expirableFunds;
            return this;
        }

        public Builder expiredFunds(java.util.Map<String, BigInteger> expiredFunds) {
            Utils.checkNotNull(expiredFunds, "expiredFunds");
            this.expiredFunds = expiredFunds;
            return this;
        }

        public Builder holdFunds(java.util.Map<String, BigInteger> holdFunds) {
            Utils.checkNotNull(holdFunds, "holdFunds");
            this.holdFunds = holdFunds;
            return this;
        }
        
        public GetWalletSummaryResponse build() {
            return new GetWalletSummaryResponse(
                availableFunds,
                balances,
                expirableFunds,
                expiredFunds,
                holdFunds);
        }
    }
}

