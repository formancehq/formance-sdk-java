/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class ClientSecret {

    @JsonProperty("id")
    private String id;

    @JsonProperty("lastDigits")
    private String lastDigits;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends Map<String, Object>> metadata;

    @JsonProperty("name")
    private String name;

    @JsonCreator
    public ClientSecret(
            @JsonProperty("id") String id,
            @JsonProperty("lastDigits") String lastDigits,
            @JsonProperty("metadata") Optional<? extends Map<String, Object>> metadata,
            @JsonProperty("name") String name) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(lastDigits, "lastDigits");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(name, "name");
        this.id = id;
        this.lastDigits = lastDigits;
        this.metadata = metadata;
        this.name = name;
    }
    
    public ClientSecret(
            String id,
            String lastDigits,
            String name) {
        this(id, lastDigits, Optional.empty(), name);
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String lastDigits() {
        return lastDigits;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> metadata() {
        return (Optional<Map<String, Object>>) metadata;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ClientSecret withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ClientSecret withLastDigits(String lastDigits) {
        Utils.checkNotNull(lastDigits, "lastDigits");
        this.lastDigits = lastDigits;
        return this;
    }

    public ClientSecret withMetadata(Map<String, Object> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public ClientSecret withMetadata(Optional<? extends Map<String, Object>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public ClientSecret withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClientSecret other = (ClientSecret) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.lastDigits, other.lastDigits) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            lastDigits,
            metadata,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClientSecret.class,
                "id", id,
                "lastDigits", lastDigits,
                "metadata", metadata,
                "name", name);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String lastDigits;
 
        private Optional<? extends Map<String, Object>> metadata = Optional.empty();
 
        private String name;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder lastDigits(String lastDigits) {
            Utils.checkNotNull(lastDigits, "lastDigits");
            this.lastDigits = lastDigits;
            return this;
        }

        public Builder metadata(Map<String, Object> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends Map<String, Object>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public ClientSecret build() {
            return new ClientSecret(
                id,
                lastDigits,
                metadata,
                name);
        }
    }
}

