/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class Update {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    private Optional<? extends UpdateAccount> account;

    @JsonCreator
    public Update(
            @JsonProperty("account") Optional<? extends UpdateAccount> account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
    }
    
    public Update() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateAccount> account() {
        return (Optional<UpdateAccount>) account;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Update withAccount(UpdateAccount account) {
        Utils.checkNotNull(account, "account");
        this.account = Optional.ofNullable(account);
        return this;
    }

    public Update withAccount(Optional<? extends UpdateAccount> account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Update other = (Update) o;
        return 
            Objects.deepEquals(this.account, other.account);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            account);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Update.class,
                "account", account);
    }
    
    public final static class Builder {
 
        private Optional<? extends UpdateAccount> account = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder account(UpdateAccount account) {
            Utils.checkNotNull(account, "account");
            this.account = Optional.ofNullable(account);
            return this;
        }

        public Builder account(Optional<? extends UpdateAccount> account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }
        
        public Update build() {
            return new Update(
                account);
        }
    }
}

