/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class V2BulkElementResultErrorSchemas {

    @JsonProperty("errorCode")
    private String errorCode;

    @JsonProperty("errorDescription")
    private String errorDescription;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorDetails")
    private Optional<? extends String> errorDetails;

    @JsonProperty("responseType")
    private String responseType;

    @JsonCreator
    public V2BulkElementResultErrorSchemas(
            @JsonProperty("errorCode") String errorCode,
            @JsonProperty("errorDescription") String errorDescription,
            @JsonProperty("errorDetails") Optional<? extends String> errorDetails,
            @JsonProperty("responseType") String responseType) {
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(errorDescription, "errorDescription");
        Utils.checkNotNull(errorDetails, "errorDetails");
        Utils.checkNotNull(responseType, "responseType");
        this.errorCode = errorCode;
        this.errorDescription = errorDescription;
        this.errorDetails = errorDetails;
        this.responseType = responseType;
    }
    
    public V2BulkElementResultErrorSchemas(
            String errorCode,
            String errorDescription,
            String responseType) {
        this(errorCode, errorDescription, Optional.empty(), responseType);
    }

    @JsonIgnore
    public String errorCode() {
        return errorCode;
    }

    @JsonIgnore
    public String errorDescription() {
        return errorDescription;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> errorDetails() {
        return (Optional<String>) errorDetails;
    }

    @JsonIgnore
    public String responseType() {
        return responseType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V2BulkElementResultErrorSchemas withErrorCode(String errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    public V2BulkElementResultErrorSchemas withErrorDescription(String errorDescription) {
        Utils.checkNotNull(errorDescription, "errorDescription");
        this.errorDescription = errorDescription;
        return this;
    }

    public V2BulkElementResultErrorSchemas withErrorDetails(String errorDetails) {
        Utils.checkNotNull(errorDetails, "errorDetails");
        this.errorDetails = Optional.ofNullable(errorDetails);
        return this;
    }

    public V2BulkElementResultErrorSchemas withErrorDetails(Optional<? extends String> errorDetails) {
        Utils.checkNotNull(errorDetails, "errorDetails");
        this.errorDetails = errorDetails;
        return this;
    }

    public V2BulkElementResultErrorSchemas withResponseType(String responseType) {
        Utils.checkNotNull(responseType, "responseType");
        this.responseType = responseType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2BulkElementResultErrorSchemas other = (V2BulkElementResultErrorSchemas) o;
        return 
            java.util.Objects.deepEquals(this.errorCode, other.errorCode) &&
            java.util.Objects.deepEquals(this.errorDescription, other.errorDescription) &&
            java.util.Objects.deepEquals(this.errorDetails, other.errorDetails) &&
            java.util.Objects.deepEquals(this.responseType, other.responseType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            errorCode,
            errorDescription,
            errorDetails,
            responseType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2BulkElementResultErrorSchemas.class,
                "errorCode", errorCode,
                "errorDescription", errorDescription,
                "errorDetails", errorDetails,
                "responseType", responseType);
    }
    
    public final static class Builder {
 
        private String errorCode;
 
        private String errorDescription;
 
        private Optional<? extends String> errorDetails = Optional.empty();
 
        private String responseType;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder errorCode(String errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }

        public Builder errorDescription(String errorDescription) {
            Utils.checkNotNull(errorDescription, "errorDescription");
            this.errorDescription = errorDescription;
            return this;
        }

        public Builder errorDetails(String errorDetails) {
            Utils.checkNotNull(errorDetails, "errorDetails");
            this.errorDetails = Optional.ofNullable(errorDetails);
            return this;
        }

        public Builder errorDetails(Optional<? extends String> errorDetails) {
            Utils.checkNotNull(errorDetails, "errorDetails");
            this.errorDetails = errorDetails;
            return this;
        }

        public Builder responseType(String responseType) {
            Utils.checkNotNull(responseType, "responseType");
            this.responseType = responseType;
            return this;
        }
        
        public V2BulkElementResultErrorSchemas build() {
            return new V2BulkElementResultErrorSchemas(
                errorCode,
                errorDescription,
                errorDetails,
                responseType);
        }
    }
}

