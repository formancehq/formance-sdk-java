/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BankAccount {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountID")
    private Optional<String> accountID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountNumber")
    private Optional<String> accountNumber;

    @JsonProperty("connectorID")
    private String connectorID;

    @JsonProperty("country")
    private String country;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iban")
    private Optional<String> iban;

    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider")
    private Optional<String> provider;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relatedAccounts")
    private Optional<? extends List<BankAccountRelatedAccounts>> relatedAccounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("swiftBicCode")
    private Optional<String> swiftBicCode;

    @JsonCreator
    public BankAccount(
            @JsonProperty("accountID") Optional<String> accountID,
            @JsonProperty("accountNumber") Optional<String> accountNumber,
            @JsonProperty("connectorID") String connectorID,
            @JsonProperty("country") String country,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("iban") Optional<String> iban,
            @JsonProperty("id") String id,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("name") String name,
            @JsonProperty("provider") Optional<String> provider,
            @JsonProperty("relatedAccounts") Optional<? extends List<BankAccountRelatedAccounts>> relatedAccounts,
            @JsonProperty("swiftBicCode") Optional<String> swiftBicCode) {
        Utils.checkNotNull(accountID, "accountID");
        Utils.checkNotNull(accountNumber, "accountNumber");
        Utils.checkNotNull(connectorID, "connectorID");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(iban, "iban");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(relatedAccounts, "relatedAccounts");
        Utils.checkNotNull(swiftBicCode, "swiftBicCode");
        this.accountID = accountID;
        this.accountNumber = accountNumber;
        this.connectorID = connectorID;
        this.country = country;
        this.createdAt = createdAt;
        this.iban = iban;
        this.id = id;
        this.metadata = metadata;
        this.name = name;
        this.provider = provider;
        this.relatedAccounts = relatedAccounts;
        this.swiftBicCode = swiftBicCode;
    }
    
    public BankAccount(
            String connectorID,
            String country,
            OffsetDateTime createdAt,
            String id,
            String name) {
        this(Optional.empty(), Optional.empty(), connectorID, country, createdAt, Optional.empty(), id, JsonNullable.undefined(), name, Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> accountID() {
        return accountID;
    }

    @JsonIgnore
    public Optional<String> accountNumber() {
        return accountNumber;
    }

    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    @JsonIgnore
    public String country() {
        return country;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> iban() {
        return iban;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> provider() {
        return provider;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BankAccountRelatedAccounts>> relatedAccounts() {
        return (Optional<List<BankAccountRelatedAccounts>>) relatedAccounts;
    }

    @JsonIgnore
    public Optional<String> swiftBicCode() {
        return swiftBicCode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public BankAccount withAccountID(String accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = Optional.ofNullable(accountID);
        return this;
    }

    public BankAccount withAccountID(Optional<String> accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = accountID;
        return this;
    }

    public BankAccount withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = Optional.ofNullable(accountNumber);
        return this;
    }

    public BankAccount withAccountNumber(Optional<String> accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    public BankAccount withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    public BankAccount withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public BankAccount withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public BankAccount withIban(String iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = Optional.ofNullable(iban);
        return this;
    }

    public BankAccount withIban(Optional<String> iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = iban;
        return this;
    }

    public BankAccount withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public BankAccount withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public BankAccount withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public BankAccount withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public BankAccount withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = Optional.ofNullable(provider);
        return this;
    }

    public BankAccount withProvider(Optional<String> provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public BankAccount withRelatedAccounts(List<BankAccountRelatedAccounts> relatedAccounts) {
        Utils.checkNotNull(relatedAccounts, "relatedAccounts");
        this.relatedAccounts = Optional.ofNullable(relatedAccounts);
        return this;
    }

    public BankAccount withRelatedAccounts(Optional<? extends List<BankAccountRelatedAccounts>> relatedAccounts) {
        Utils.checkNotNull(relatedAccounts, "relatedAccounts");
        this.relatedAccounts = relatedAccounts;
        return this;
    }

    public BankAccount withSwiftBicCode(String swiftBicCode) {
        Utils.checkNotNull(swiftBicCode, "swiftBicCode");
        this.swiftBicCode = Optional.ofNullable(swiftBicCode);
        return this;
    }

    public BankAccount withSwiftBicCode(Optional<String> swiftBicCode) {
        Utils.checkNotNull(swiftBicCode, "swiftBicCode");
        this.swiftBicCode = swiftBicCode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankAccount other = (BankAccount) o;
        return 
            Objects.deepEquals(this.accountID, other.accountID) &&
            Objects.deepEquals(this.accountNumber, other.accountNumber) &&
            Objects.deepEquals(this.connectorID, other.connectorID) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.iban, other.iban) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.provider, other.provider) &&
            Objects.deepEquals(this.relatedAccounts, other.relatedAccounts) &&
            Objects.deepEquals(this.swiftBicCode, other.swiftBicCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountID,
            accountNumber,
            connectorID,
            country,
            createdAt,
            iban,
            id,
            metadata,
            name,
            provider,
            relatedAccounts,
            swiftBicCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankAccount.class,
                "accountID", accountID,
                "accountNumber", accountNumber,
                "connectorID", connectorID,
                "country", country,
                "createdAt", createdAt,
                "iban", iban,
                "id", id,
                "metadata", metadata,
                "name", name,
                "provider", provider,
                "relatedAccounts", relatedAccounts,
                "swiftBicCode", swiftBicCode);
    }
    
    public final static class Builder {
 
        private Optional<String> accountID = Optional.empty();
 
        private Optional<String> accountNumber = Optional.empty();
 
        private String connectorID;
 
        private String country;
 
        private OffsetDateTime createdAt;
 
        private Optional<String> iban = Optional.empty();
 
        private String id;
 
        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();
 
        private String name;
 
        private Optional<String> provider = Optional.empty();
 
        private Optional<? extends List<BankAccountRelatedAccounts>> relatedAccounts = Optional.empty();
 
        private Optional<String> swiftBicCode = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountID(String accountID) {
            Utils.checkNotNull(accountID, "accountID");
            this.accountID = Optional.ofNullable(accountID);
            return this;
        }

        public Builder accountID(Optional<String> accountID) {
            Utils.checkNotNull(accountID, "accountID");
            this.accountID = accountID;
            return this;
        }

        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = Optional.ofNullable(accountNumber);
            return this;
        }

        public Builder accountNumber(Optional<String> accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }

        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }

        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder iban(String iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = Optional.ofNullable(iban);
            return this;
        }

        public Builder iban(Optional<String> iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = iban;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        public Builder provider(Optional<String> provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        public Builder relatedAccounts(List<BankAccountRelatedAccounts> relatedAccounts) {
            Utils.checkNotNull(relatedAccounts, "relatedAccounts");
            this.relatedAccounts = Optional.ofNullable(relatedAccounts);
            return this;
        }

        public Builder relatedAccounts(Optional<? extends List<BankAccountRelatedAccounts>> relatedAccounts) {
            Utils.checkNotNull(relatedAccounts, "relatedAccounts");
            this.relatedAccounts = relatedAccounts;
            return this;
        }

        public Builder swiftBicCode(String swiftBicCode) {
            Utils.checkNotNull(swiftBicCode, "swiftBicCode");
            this.swiftBicCode = Optional.ofNullable(swiftBicCode);
            return this;
        }

        public Builder swiftBicCode(Optional<String> swiftBicCode) {
            Utils.checkNotNull(swiftBicCode, "swiftBicCode");
            this.swiftBicCode = swiftBicCode;
            return this;
        }
        
        public BankAccount build() {
            return new BankAccount(
                accountID,
                accountNumber,
                connectorID,
                country,
                createdAt,
                iban,
                id,
                metadata,
                name,
                provider,
                relatedAccounts,
                swiftBicCode);
        }
    }
}

