/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.utils.LazySingletonValue;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class AtlarConfig {

    /**
     * The access key used by the connector for authorizing requests to the Atlar API.
     * You can obtain it along with the associated secret from the Atlar dashboard.
     * 
     */
    @JsonProperty("accessKey")
    private String accessKey;

    /**
     * The base URL the client uses for making requests towards the Atlar API.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseUrl")
    private Optional<? extends String> baseUrl;

    @JsonProperty("name")
    private String name;

    /**
     * Number of items to fetch when querying paginated APIs.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageSize")
    private Optional<? extends Long> pageSize;

    /**
     * The frequency at which the connector tries to fetch new Transaction objects from the Atlar API.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pollingPeriod")
    private Optional<? extends String> pollingPeriod;

    /**
     * The secret used by the connector for authorizing requests to the Atlar API.
     * You can obtain it along with the associated access key from the Atlar dashboard.
     * 
     */
    @JsonProperty("secret")
    private String secret;

    /**
     * The frequency at which the connector tries to fetch the status of payment initiations from the Atlar API.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferInitiationStatusPollingPeriod")
    private Optional<? extends String> transferInitiationStatusPollingPeriod;

    @JsonCreator
    public AtlarConfig(
            @JsonProperty("accessKey") String accessKey,
            @JsonProperty("baseUrl") Optional<? extends String> baseUrl,
            @JsonProperty("name") String name,
            @JsonProperty("pageSize") Optional<? extends Long> pageSize,
            @JsonProperty("pollingPeriod") Optional<? extends String> pollingPeriod,
            @JsonProperty("secret") String secret,
            @JsonProperty("transferInitiationStatusPollingPeriod") Optional<? extends String> transferInitiationStatusPollingPeriod) {
        Utils.checkNotNull(accessKey, "accessKey");
        Utils.checkNotNull(baseUrl, "baseUrl");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(pollingPeriod, "pollingPeriod");
        Utils.checkNotNull(secret, "secret");
        Utils.checkNotNull(transferInitiationStatusPollingPeriod, "transferInitiationStatusPollingPeriod");
        this.accessKey = accessKey;
        this.baseUrl = baseUrl;
        this.name = name;
        this.pageSize = pageSize;
        this.pollingPeriod = pollingPeriod;
        this.secret = secret;
        this.transferInitiationStatusPollingPeriod = transferInitiationStatusPollingPeriod;
    }
    
    public AtlarConfig(
            String accessKey,
            String name,
            String secret) {
        this(accessKey, Optional.empty(), name, Optional.empty(), Optional.empty(), secret, Optional.empty());
    }

    /**
     * The access key used by the connector for authorizing requests to the Atlar API.
     * You can obtain it along with the associated secret from the Atlar dashboard.
     * 
     */
    @JsonIgnore
    public String accessKey() {
        return accessKey;
    }

    /**
     * The base URL the client uses for making requests towards the Atlar API.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> baseUrl() {
        return (Optional<String>) baseUrl;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Number of items to fetch when querying paginated APIs.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> pageSize() {
        return (Optional<Long>) pageSize;
    }

    /**
     * The frequency at which the connector tries to fetch new Transaction objects from the Atlar API.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> pollingPeriod() {
        return (Optional<String>) pollingPeriod;
    }

    /**
     * The secret used by the connector for authorizing requests to the Atlar API.
     * You can obtain it along with the associated access key from the Atlar dashboard.
     * 
     */
    @JsonIgnore
    public String secret() {
        return secret;
    }

    /**
     * The frequency at which the connector tries to fetch the status of payment initiations from the Atlar API.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> transferInitiationStatusPollingPeriod() {
        return (Optional<String>) transferInitiationStatusPollingPeriod;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The access key used by the connector for authorizing requests to the Atlar API.
     * You can obtain it along with the associated secret from the Atlar dashboard.
     * 
     */
    public AtlarConfig withAccessKey(String accessKey) {
        Utils.checkNotNull(accessKey, "accessKey");
        this.accessKey = accessKey;
        return this;
    }

    /**
     * The base URL the client uses for making requests towards the Atlar API.
     * 
     */
    public AtlarConfig withBaseUrl(String baseUrl) {
        Utils.checkNotNull(baseUrl, "baseUrl");
        this.baseUrl = Optional.ofNullable(baseUrl);
        return this;
    }

    /**
     * The base URL the client uses for making requests towards the Atlar API.
     * 
     */
    public AtlarConfig withBaseUrl(Optional<? extends String> baseUrl) {
        Utils.checkNotNull(baseUrl, "baseUrl");
        this.baseUrl = baseUrl;
        return this;
    }

    public AtlarConfig withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Number of items to fetch when querying paginated APIs.
     * 
     */
    public AtlarConfig withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Number of items to fetch when querying paginated APIs.
     * 
     */
    public AtlarConfig withPageSize(Optional<? extends Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * The frequency at which the connector tries to fetch new Transaction objects from the Atlar API.
     * 
     */
    public AtlarConfig withPollingPeriod(String pollingPeriod) {
        Utils.checkNotNull(pollingPeriod, "pollingPeriod");
        this.pollingPeriod = Optional.ofNullable(pollingPeriod);
        return this;
    }

    /**
     * The frequency at which the connector tries to fetch new Transaction objects from the Atlar API.
     * 
     */
    public AtlarConfig withPollingPeriod(Optional<? extends String> pollingPeriod) {
        Utils.checkNotNull(pollingPeriod, "pollingPeriod");
        this.pollingPeriod = pollingPeriod;
        return this;
    }

    /**
     * The secret used by the connector for authorizing requests to the Atlar API.
     * You can obtain it along with the associated access key from the Atlar dashboard.
     * 
     */
    public AtlarConfig withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    /**
     * The frequency at which the connector tries to fetch the status of payment initiations from the Atlar API.
     * 
     */
    public AtlarConfig withTransferInitiationStatusPollingPeriod(String transferInitiationStatusPollingPeriod) {
        Utils.checkNotNull(transferInitiationStatusPollingPeriod, "transferInitiationStatusPollingPeriod");
        this.transferInitiationStatusPollingPeriod = Optional.ofNullable(transferInitiationStatusPollingPeriod);
        return this;
    }

    /**
     * The frequency at which the connector tries to fetch the status of payment initiations from the Atlar API.
     * 
     */
    public AtlarConfig withTransferInitiationStatusPollingPeriod(Optional<? extends String> transferInitiationStatusPollingPeriod) {
        Utils.checkNotNull(transferInitiationStatusPollingPeriod, "transferInitiationStatusPollingPeriod");
        this.transferInitiationStatusPollingPeriod = transferInitiationStatusPollingPeriod;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AtlarConfig other = (AtlarConfig) o;
        return 
            java.util.Objects.deepEquals(this.accessKey, other.accessKey) &&
            java.util.Objects.deepEquals(this.baseUrl, other.baseUrl) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.pageSize, other.pageSize) &&
            java.util.Objects.deepEquals(this.pollingPeriod, other.pollingPeriod) &&
            java.util.Objects.deepEquals(this.secret, other.secret) &&
            java.util.Objects.deepEquals(this.transferInitiationStatusPollingPeriod, other.transferInitiationStatusPollingPeriod);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessKey,
            baseUrl,
            name,
            pageSize,
            pollingPeriod,
            secret,
            transferInitiationStatusPollingPeriod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AtlarConfig.class,
                "accessKey", accessKey,
                "baseUrl", baseUrl,
                "name", name,
                "pageSize", pageSize,
                "pollingPeriod", pollingPeriod,
                "secret", secret,
                "transferInitiationStatusPollingPeriod", transferInitiationStatusPollingPeriod);
    }
    
    public final static class Builder {
 
        private String accessKey;
 
        private Optional<? extends String> baseUrl;
 
        private String name;
 
        private Optional<? extends Long> pageSize;
 
        private Optional<? extends String> pollingPeriod;
 
        private String secret;
 
        private Optional<? extends String> transferInitiationStatusPollingPeriod;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The access key used by the connector for authorizing requests to the Atlar API.
         * You can obtain it along with the associated secret from the Atlar dashboard.
         * 
         */
        public Builder accessKey(String accessKey) {
            Utils.checkNotNull(accessKey, "accessKey");
            this.accessKey = accessKey;
            return this;
        }

        /**
         * The base URL the client uses for making requests towards the Atlar API.
         * 
         */
        public Builder baseUrl(String baseUrl) {
            Utils.checkNotNull(baseUrl, "baseUrl");
            this.baseUrl = Optional.ofNullable(baseUrl);
            return this;
        }

        /**
         * The base URL the client uses for making requests towards the Atlar API.
         * 
         */
        public Builder baseUrl(Optional<? extends String> baseUrl) {
            Utils.checkNotNull(baseUrl, "baseUrl");
            this.baseUrl = baseUrl;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Number of items to fetch when querying paginated APIs.
         * 
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Number of items to fetch when querying paginated APIs.
         * 
         */
        public Builder pageSize(Optional<? extends Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * The frequency at which the connector tries to fetch new Transaction objects from the Atlar API.
         * 
         */
        public Builder pollingPeriod(String pollingPeriod) {
            Utils.checkNotNull(pollingPeriod, "pollingPeriod");
            this.pollingPeriod = Optional.ofNullable(pollingPeriod);
            return this;
        }

        /**
         * The frequency at which the connector tries to fetch new Transaction objects from the Atlar API.
         * 
         */
        public Builder pollingPeriod(Optional<? extends String> pollingPeriod) {
            Utils.checkNotNull(pollingPeriod, "pollingPeriod");
            this.pollingPeriod = pollingPeriod;
            return this;
        }

        /**
         * The secret used by the connector for authorizing requests to the Atlar API.
         * You can obtain it along with the associated access key from the Atlar dashboard.
         * 
         */
        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }

        /**
         * The frequency at which the connector tries to fetch the status of payment initiations from the Atlar API.
         * 
         */
        public Builder transferInitiationStatusPollingPeriod(String transferInitiationStatusPollingPeriod) {
            Utils.checkNotNull(transferInitiationStatusPollingPeriod, "transferInitiationStatusPollingPeriod");
            this.transferInitiationStatusPollingPeriod = Optional.ofNullable(transferInitiationStatusPollingPeriod);
            return this;
        }

        /**
         * The frequency at which the connector tries to fetch the status of payment initiations from the Atlar API.
         * 
         */
        public Builder transferInitiationStatusPollingPeriod(Optional<? extends String> transferInitiationStatusPollingPeriod) {
            Utils.checkNotNull(transferInitiationStatusPollingPeriod, "transferInitiationStatusPollingPeriod");
            this.transferInitiationStatusPollingPeriod = transferInitiationStatusPollingPeriod;
            return this;
        }
        
        public AtlarConfig build() {
            if (baseUrl == null) {
                baseUrl = _SINGLETON_VALUE_BaseUrl.value();
            }
            if (pageSize == null) {
                pageSize = _SINGLETON_VALUE_PageSize.value();
            }
            if (pollingPeriod == null) {
                pollingPeriod = _SINGLETON_VALUE_PollingPeriod.value();
            }
            if (transferInitiationStatusPollingPeriod == null) {
                transferInitiationStatusPollingPeriod = _SINGLETON_VALUE_TransferInitiationStatusPollingPeriod.value();
            }
            return new AtlarConfig(
                accessKey,
                baseUrl,
                name,
                pageSize,
                pollingPeriod,
                secret,
                transferInitiationStatusPollingPeriod);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_BaseUrl =
                new LazySingletonValue<>(
                        "baseUrl",
                        "\"https://api.atlar.com\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_PageSize =
                new LazySingletonValue<>(
                        "pageSize",
                        "25",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_PollingPeriod =
                new LazySingletonValue<>(
                        "pollingPeriod",
                        "\"120s\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_TransferInitiationStatusPollingPeriod =
                new LazySingletonValue<>(
                        "transferInitiationStatusPollingPeriod",
                        "\"120s\"",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

