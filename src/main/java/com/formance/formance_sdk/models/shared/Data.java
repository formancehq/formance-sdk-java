/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class Data {

    @JsonProperty("connectorID")
    private String connectorID;

    @JsonCreator
    public Data(
            @JsonProperty("connectorID") String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
    }

    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Data withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Data other = (Data) o;
        return 
            Objects.deepEquals(this.connectorID, other.connectorID);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            connectorID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Data.class,
                "connectorID", connectorID);
    }
    
    public final static class Builder {
 
        private String connectorID;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }
        
        public Data build() {
            return new Data(
                connectorID);
        }
    }
}

