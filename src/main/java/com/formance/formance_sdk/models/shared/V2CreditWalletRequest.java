/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class V2CreditWalletRequest {

    @JsonProperty("amount")
    private V2Monetary amount;

    /**
     * The balance to credit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private Optional<String> balance;

    /**
     * Metadata associated with the wallet.
     */
    @JsonProperty("metadata")
    private Map<String, String> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private Optional<String> reference;

    @JsonProperty("sources")
    private List<V2Subject> sources;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<OffsetDateTime> timestamp;

    @JsonCreator
    public V2CreditWalletRequest(
            @JsonProperty("amount") V2Monetary amount,
            @JsonProperty("balance") Optional<String> balance,
            @JsonProperty("metadata") Map<String, String> metadata,
            @JsonProperty("reference") Optional<String> reference,
            @JsonProperty("sources") List<V2Subject> sources,
            @JsonProperty("timestamp") Optional<OffsetDateTime> timestamp) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(balance, "balance");
        metadata = Utils.emptyMapIfNull(metadata);
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(sources, "sources");
        Utils.checkNotNull(timestamp, "timestamp");
        this.amount = amount;
        this.balance = balance;
        this.metadata = metadata;
        this.reference = reference;
        this.sources = sources;
        this.timestamp = timestamp;
    }
    
    public V2CreditWalletRequest(
            V2Monetary amount,
            Map<String, String> metadata,
            List<V2Subject> sources) {
        this(amount, Optional.empty(), metadata, Optional.empty(), sources, Optional.empty());
    }

    @JsonIgnore
    public V2Monetary amount() {
        return amount;
    }

    /**
     * The balance to credit
     */
    @JsonIgnore
    public Optional<String> balance() {
        return balance;
    }

    /**
     * Metadata associated with the wallet.
     */
    @JsonIgnore
    public Map<String, String> metadata() {
        return metadata;
    }

    @JsonIgnore
    public Optional<String> reference() {
        return reference;
    }

    @JsonIgnore
    public List<V2Subject> sources() {
        return sources;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> timestamp() {
        return timestamp;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V2CreditWalletRequest withAmount(V2Monetary amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The balance to credit
     */
    public V2CreditWalletRequest withBalance(String balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = Optional.ofNullable(balance);
        return this;
    }

    /**
     * The balance to credit
     */
    public V2CreditWalletRequest withBalance(Optional<String> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * Metadata associated with the wallet.
     */
    public V2CreditWalletRequest withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public V2CreditWalletRequest withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = Optional.ofNullable(reference);
        return this;
    }

    public V2CreditWalletRequest withReference(Optional<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public V2CreditWalletRequest withSources(List<V2Subject> sources) {
        Utils.checkNotNull(sources, "sources");
        this.sources = sources;
        return this;
    }

    public V2CreditWalletRequest withTimestamp(OffsetDateTime timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    public V2CreditWalletRequest withTimestamp(Optional<OffsetDateTime> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2CreditWalletRequest other = (V2CreditWalletRequest) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.balance, other.balance) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.sources, other.sources) &&
            Objects.deepEquals(this.timestamp, other.timestamp);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            balance,
            metadata,
            reference,
            sources,
            timestamp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2CreditWalletRequest.class,
                "amount", amount,
                "balance", balance,
                "metadata", metadata,
                "reference", reference,
                "sources", sources,
                "timestamp", timestamp);
    }
    
    public final static class Builder {
 
        private V2Monetary amount;
 
        private Optional<String> balance = Optional.empty();
 
        private Map<String, String> metadata;
 
        private Optional<String> reference = Optional.empty();
 
        private List<V2Subject> sources;
 
        private Optional<OffsetDateTime> timestamp = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(V2Monetary amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The balance to credit
         */
        public Builder balance(String balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = Optional.ofNullable(balance);
            return this;
        }

        /**
         * The balance to credit
         */
        public Builder balance(Optional<String> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        /**
         * Metadata associated with the wallet.
         */
        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = Optional.ofNullable(reference);
            return this;
        }

        public Builder reference(Optional<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder sources(List<V2Subject> sources) {
            Utils.checkNotNull(sources, "sources");
            this.sources = sources;
            return this;
        }

        public Builder timestamp(OffsetDateTime timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        public Builder timestamp(Optional<OffsetDateTime> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }
        
        public V2CreditWalletRequest build() {
            return new V2CreditWalletRequest(
                amount,
                balance,
                metadata,
                reference,
                sources,
                timestamp);
        }
    }
}

