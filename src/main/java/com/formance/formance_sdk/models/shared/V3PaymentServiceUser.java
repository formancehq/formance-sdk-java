/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class V3PaymentServiceUser {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends V3Address> address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccountIDs")
    private JsonNullable<? extends List<String>> bankAccountIDs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contactDetails")
    private Optional<? extends V3ContactDetails> contactDetails;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    @JsonProperty("name")
    private String name;

    @JsonCreator
    public V3PaymentServiceUser(
            @JsonProperty("address") Optional<? extends V3Address> address,
            @JsonProperty("bankAccountIDs") JsonNullable<? extends List<String>> bankAccountIDs,
            @JsonProperty("contactDetails") Optional<? extends V3ContactDetails> contactDetails,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("id") String id,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("name") String name) {
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(bankAccountIDs, "bankAccountIDs");
        Utils.checkNotNull(contactDetails, "contactDetails");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(name, "name");
        this.address = address;
        this.bankAccountIDs = bankAccountIDs;
        this.contactDetails = contactDetails;
        this.createdAt = createdAt;
        this.id = id;
        this.metadata = metadata;
        this.name = name;
    }
    
    public V3PaymentServiceUser(
            OffsetDateTime createdAt,
            String id,
            String name) {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(), createdAt, id, JsonNullable.undefined(), name);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<V3Address> address() {
        return (Optional<V3Address>) address;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> bankAccountIDs() {
        return (JsonNullable<List<String>>) bankAccountIDs;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<V3ContactDetails> contactDetails() {
        return (Optional<V3ContactDetails>) contactDetails;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public V3PaymentServiceUser withAddress(V3Address address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    public V3PaymentServiceUser withAddress(Optional<? extends V3Address> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public V3PaymentServiceUser withBankAccountIDs(List<String> bankAccountIDs) {
        Utils.checkNotNull(bankAccountIDs, "bankAccountIDs");
        this.bankAccountIDs = JsonNullable.of(bankAccountIDs);
        return this;
    }

    public V3PaymentServiceUser withBankAccountIDs(JsonNullable<? extends List<String>> bankAccountIDs) {
        Utils.checkNotNull(bankAccountIDs, "bankAccountIDs");
        this.bankAccountIDs = bankAccountIDs;
        return this;
    }

    public V3PaymentServiceUser withContactDetails(V3ContactDetails contactDetails) {
        Utils.checkNotNull(contactDetails, "contactDetails");
        this.contactDetails = Optional.ofNullable(contactDetails);
        return this;
    }

    public V3PaymentServiceUser withContactDetails(Optional<? extends V3ContactDetails> contactDetails) {
        Utils.checkNotNull(contactDetails, "contactDetails");
        this.contactDetails = contactDetails;
        return this;
    }

    public V3PaymentServiceUser withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public V3PaymentServiceUser withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public V3PaymentServiceUser withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public V3PaymentServiceUser withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public V3PaymentServiceUser withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3PaymentServiceUser other = (V3PaymentServiceUser) o;
        return 
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.bankAccountIDs, other.bankAccountIDs) &&
            Objects.deepEquals(this.contactDetails, other.contactDetails) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            address,
            bankAccountIDs,
            contactDetails,
            createdAt,
            id,
            metadata,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3PaymentServiceUser.class,
                "address", address,
                "bankAccountIDs", bankAccountIDs,
                "contactDetails", contactDetails,
                "createdAt", createdAt,
                "id", id,
                "metadata", metadata,
                "name", name);
    }
    
    public final static class Builder {
 
        private Optional<? extends V3Address> address = Optional.empty();
 
        private JsonNullable<? extends List<String>> bankAccountIDs = JsonNullable.undefined();
 
        private Optional<? extends V3ContactDetails> contactDetails = Optional.empty();
 
        private OffsetDateTime createdAt;
 
        private String id;
 
        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();
 
        private String name;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder address(V3Address address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<? extends V3Address> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder bankAccountIDs(List<String> bankAccountIDs) {
            Utils.checkNotNull(bankAccountIDs, "bankAccountIDs");
            this.bankAccountIDs = JsonNullable.of(bankAccountIDs);
            return this;
        }

        public Builder bankAccountIDs(JsonNullable<? extends List<String>> bankAccountIDs) {
            Utils.checkNotNull(bankAccountIDs, "bankAccountIDs");
            this.bankAccountIDs = bankAccountIDs;
            return this;
        }

        public Builder contactDetails(V3ContactDetails contactDetails) {
            Utils.checkNotNull(contactDetails, "contactDetails");
            this.contactDetails = Optional.ofNullable(contactDetails);
            return this;
        }

        public Builder contactDetails(Optional<? extends V3ContactDetails> contactDetails) {
            Utils.checkNotNull(contactDetails, "contactDetails");
            this.contactDetails = contactDetails;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public V3PaymentServiceUser build() {
            return new V3PaymentServiceUser(
                address,
                bankAccountIDs,
                contactDetails,
                createdAt,
                id,
                metadata,
                name);
        }
    }
}
