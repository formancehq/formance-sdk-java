/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class Config {

    @JsonProperty("storage")
    private LedgerStorage storage;

    @JsonCreator
    public Config(
            @JsonProperty("storage") LedgerStorage storage) {
        Utils.checkNotNull(storage, "storage");
        this.storage = storage;
    }

    @JsonIgnore
    public LedgerStorage storage() {
        return storage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Config withStorage(LedgerStorage storage) {
        Utils.checkNotNull(storage, "storage");
        this.storage = storage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Config other = (Config) o;
        return 
            Objects.deepEquals(this.storage, other.storage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            storage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Config.class,
                "storage", storage);
    }
    
    public final static class Builder {
 
        private LedgerStorage storage;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder storage(LedgerStorage storage) {
            Utils.checkNotNull(storage, "storage");
            this.storage = storage;
            return this;
        }
        
        public Config build() {
            return new Config(
                storage);
        }
    }
}

