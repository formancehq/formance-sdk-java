/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.formance.formance_sdk.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class V3Payment {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adjustments")
    private JsonNullable<? extends List<V3PaymentAdjustment>> adjustments;

    @JsonProperty("amount")
    private BigInteger amount;

    @JsonProperty("asset")
    private String asset;

    @JsonProperty("connectorID")
    private String connectorID;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationAccountID")
    private JsonNullable<String> destinationAccountID;

    @JsonProperty("id")
    private String id;

    @JsonProperty("initialAmount")
    private BigInteger initialAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    @JsonProperty("provider")
    private String provider;

    @JsonProperty("reference")
    private String reference;

    @JsonProperty("scheme")
    private String scheme;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAccountID")
    private JsonNullable<String> sourceAccountID;

    @JsonProperty("status")
    private V3PaymentStatusEnum status;

    @JsonProperty("type")
    private V3PaymentTypeEnum type;

    @JsonCreator
    public V3Payment(
            @JsonProperty("adjustments") JsonNullable<? extends List<V3PaymentAdjustment>> adjustments,
            @JsonProperty("amount") BigInteger amount,
            @JsonProperty("asset") String asset,
            @JsonProperty("connectorID") String connectorID,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("destinationAccountID") JsonNullable<String> destinationAccountID,
            @JsonProperty("id") String id,
            @JsonProperty("initialAmount") BigInteger initialAmount,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("provider") String provider,
            @JsonProperty("reference") String reference,
            @JsonProperty("scheme") String scheme,
            @JsonProperty("sourceAccountID") JsonNullable<String> sourceAccountID,
            @JsonProperty("status") V3PaymentStatusEnum status,
            @JsonProperty("type") V3PaymentTypeEnum type) {
        Utils.checkNotNull(adjustments, "adjustments");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(asset, "asset");
        Utils.checkNotNull(connectorID, "connectorID");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(initialAmount, "initialAmount");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(scheme, "scheme");
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(type, "type");
        this.adjustments = adjustments;
        this.amount = amount;
        this.asset = asset;
        this.connectorID = connectorID;
        this.createdAt = createdAt;
        this.destinationAccountID = destinationAccountID;
        this.id = id;
        this.initialAmount = initialAmount;
        this.metadata = metadata;
        this.provider = provider;
        this.reference = reference;
        this.scheme = scheme;
        this.sourceAccountID = sourceAccountID;
        this.status = status;
        this.type = type;
    }
    
    public V3Payment(
            BigInteger amount,
            String asset,
            String connectorID,
            OffsetDateTime createdAt,
            String id,
            BigInteger initialAmount,
            String provider,
            String reference,
            String scheme,
            V3PaymentStatusEnum status,
            V3PaymentTypeEnum type) {
        this(JsonNullable.undefined(), amount, asset, connectorID, createdAt, JsonNullable.undefined(), id, initialAmount, JsonNullable.undefined(), provider, reference, scheme, JsonNullable.undefined(), status, type);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<V3PaymentAdjustment>> adjustments() {
        return (JsonNullable<List<V3PaymentAdjustment>>) adjustments;
    }

    @JsonIgnore
    public BigInteger amount() {
        return amount;
    }

    @JsonIgnore
    public String asset() {
        return asset;
    }

    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public JsonNullable<String> destinationAccountID() {
        return destinationAccountID;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public BigInteger initialAmount() {
        return initialAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    @JsonIgnore
    public String provider() {
        return provider;
    }

    @JsonIgnore
    public String reference() {
        return reference;
    }

    @JsonIgnore
    public String scheme() {
        return scheme;
    }

    @JsonIgnore
    public JsonNullable<String> sourceAccountID() {
        return sourceAccountID;
    }

    @JsonIgnore
    public V3PaymentStatusEnum status() {
        return status;
    }

    @JsonIgnore
    public V3PaymentTypeEnum type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V3Payment withAdjustments(List<V3PaymentAdjustment> adjustments) {
        Utils.checkNotNull(adjustments, "adjustments");
        this.adjustments = JsonNullable.of(adjustments);
        return this;
    }

    public V3Payment withAdjustments(JsonNullable<? extends List<V3PaymentAdjustment>> adjustments) {
        Utils.checkNotNull(adjustments, "adjustments");
        this.adjustments = adjustments;
        return this;
    }

    public V3Payment withAmount(long amount) {
        this.amount = BigInteger.valueOf(amount);
        return this;
    }

    public V3Payment withAmount(BigInteger amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public V3Payment withAsset(String asset) {
        Utils.checkNotNull(asset, "asset");
        this.asset = asset;
        return this;
    }

    public V3Payment withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    public V3Payment withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public V3Payment withDestinationAccountID(String destinationAccountID) {
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        this.destinationAccountID = JsonNullable.of(destinationAccountID);
        return this;
    }

    public V3Payment withDestinationAccountID(JsonNullable<String> destinationAccountID) {
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        this.destinationAccountID = destinationAccountID;
        return this;
    }

    public V3Payment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public V3Payment withInitialAmount(long initialAmount) {
        this.initialAmount = BigInteger.valueOf(initialAmount);
        return this;
    }

    public V3Payment withInitialAmount(BigInteger initialAmount) {
        Utils.checkNotNull(initialAmount, "initialAmount");
        this.initialAmount = initialAmount;
        return this;
    }

    public V3Payment withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public V3Payment withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public V3Payment withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public V3Payment withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public V3Payment withScheme(String scheme) {
        Utils.checkNotNull(scheme, "scheme");
        this.scheme = scheme;
        return this;
    }

    public V3Payment withSourceAccountID(String sourceAccountID) {
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        this.sourceAccountID = JsonNullable.of(sourceAccountID);
        return this;
    }

    public V3Payment withSourceAccountID(JsonNullable<String> sourceAccountID) {
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        this.sourceAccountID = sourceAccountID;
        return this;
    }

    public V3Payment withStatus(V3PaymentStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public V3Payment withType(V3PaymentTypeEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3Payment other = (V3Payment) o;
        return 
            Objects.deepEquals(this.adjustments, other.adjustments) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.asset, other.asset) &&
            Objects.deepEquals(this.connectorID, other.connectorID) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.destinationAccountID, other.destinationAccountID) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.initialAmount, other.initialAmount) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.provider, other.provider) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.scheme, other.scheme) &&
            Objects.deepEquals(this.sourceAccountID, other.sourceAccountID) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            adjustments,
            amount,
            asset,
            connectorID,
            createdAt,
            destinationAccountID,
            id,
            initialAmount,
            metadata,
            provider,
            reference,
            scheme,
            sourceAccountID,
            status,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3Payment.class,
                "adjustments", adjustments,
                "amount", amount,
                "asset", asset,
                "connectorID", connectorID,
                "createdAt", createdAt,
                "destinationAccountID", destinationAccountID,
                "id", id,
                "initialAmount", initialAmount,
                "metadata", metadata,
                "provider", provider,
                "reference", reference,
                "scheme", scheme,
                "sourceAccountID", sourceAccountID,
                "status", status,
                "type", type);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends List<V3PaymentAdjustment>> adjustments = JsonNullable.undefined();
 
        private BigInteger amount;
 
        private String asset;
 
        private String connectorID;
 
        private OffsetDateTime createdAt;
 
        private JsonNullable<String> destinationAccountID = JsonNullable.undefined();
 
        private String id;
 
        private BigInteger initialAmount;
 
        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();
 
        private String provider;
 
        private String reference;
 
        private String scheme;
 
        private JsonNullable<String> sourceAccountID = JsonNullable.undefined();
 
        private V3PaymentStatusEnum status;
 
        private V3PaymentTypeEnum type;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder adjustments(List<V3PaymentAdjustment> adjustments) {
            Utils.checkNotNull(adjustments, "adjustments");
            this.adjustments = JsonNullable.of(adjustments);
            return this;
        }

        public Builder adjustments(JsonNullable<? extends List<V3PaymentAdjustment>> adjustments) {
            Utils.checkNotNull(adjustments, "adjustments");
            this.adjustments = adjustments;
            return this;
        }

        public Builder amount(long amount) {
            this.amount = BigInteger.valueOf(amount);
            return this;
        }

        public Builder amount(BigInteger amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder asset(String asset) {
            Utils.checkNotNull(asset, "asset");
            this.asset = asset;
            return this;
        }

        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder destinationAccountID(String destinationAccountID) {
            Utils.checkNotNull(destinationAccountID, "destinationAccountID");
            this.destinationAccountID = JsonNullable.of(destinationAccountID);
            return this;
        }

        public Builder destinationAccountID(JsonNullable<String> destinationAccountID) {
            Utils.checkNotNull(destinationAccountID, "destinationAccountID");
            this.destinationAccountID = destinationAccountID;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder initialAmount(long initialAmount) {
            this.initialAmount = BigInteger.valueOf(initialAmount);
            return this;
        }

        public Builder initialAmount(BigInteger initialAmount) {
            Utils.checkNotNull(initialAmount, "initialAmount");
            this.initialAmount = initialAmount;
            return this;
        }

        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder scheme(String scheme) {
            Utils.checkNotNull(scheme, "scheme");
            this.scheme = scheme;
            return this;
        }

        public Builder sourceAccountID(String sourceAccountID) {
            Utils.checkNotNull(sourceAccountID, "sourceAccountID");
            this.sourceAccountID = JsonNullable.of(sourceAccountID);
            return this;
        }

        public Builder sourceAccountID(JsonNullable<String> sourceAccountID) {
            Utils.checkNotNull(sourceAccountID, "sourceAccountID");
            this.sourceAccountID = sourceAccountID;
            return this;
        }

        public Builder status(V3PaymentStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder type(V3PaymentTypeEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public V3Payment build() {
            return new V3Payment(
                adjustments,
                amount,
                asset,
                connectorID,
                createdAt,
                destinationAccountID,
                id,
                initialAmount,
                metadata,
                provider,
                reference,
                scheme,
                sourceAccountID,
                status,
                type);
        }
    }
}

