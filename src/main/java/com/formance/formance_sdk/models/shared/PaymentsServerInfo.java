/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * PaymentsServerInfo
 * 
 * <p>Server information
 */
public class PaymentsServerInfo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debug")
    private Optional<Boolean> debug;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    @JsonCreator
    public PaymentsServerInfo(
            @JsonProperty("debug") Optional<Boolean> debug,
            @JsonProperty("version") Optional<String> version) {
        Utils.checkNotNull(debug, "debug");
        Utils.checkNotNull(version, "version");
        this.debug = debug;
        this.version = version;
    }
    
    public PaymentsServerInfo() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> debug() {
        return debug;
    }

    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PaymentsServerInfo withDebug(boolean debug) {
        Utils.checkNotNull(debug, "debug");
        this.debug = Optional.ofNullable(debug);
        return this;
    }

    public PaymentsServerInfo withDebug(Optional<Boolean> debug) {
        Utils.checkNotNull(debug, "debug");
        this.debug = debug;
        return this;
    }

    public PaymentsServerInfo withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    public PaymentsServerInfo withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentsServerInfo other = (PaymentsServerInfo) o;
        return 
            Objects.deepEquals(this.debug, other.debug) &&
            Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            debug,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentsServerInfo.class,
                "debug", debug,
                "version", version);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> debug = Optional.empty();
 
        private Optional<String> version = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder debug(boolean debug) {
            Utils.checkNotNull(debug, "debug");
            this.debug = Optional.ofNullable(debug);
            return this;
        }

        public Builder debug(Optional<Boolean> debug) {
            Utils.checkNotNull(debug, "debug");
            this.debug = debug;
            return this;
        }

        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public PaymentsServerInfo build() {
            return new PaymentsServerInfo(
                debug,
                version);
        }
    }
}
