/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class Security {

    @SpeakeasyMetadata("security:scheme=true,type=oauth2,name=Authorization")
    private String authorization;

    @JsonCreator
    public Security(
            String authorization) {
        Utils.checkNotNull(authorization, "authorization");
        this.authorization = authorization;
    }

    @JsonIgnore
    public String authorization() {
        return authorization;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Security withAuthorization(String authorization) {
        Utils.checkNotNull(authorization, "authorization");
        this.authorization = authorization;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            java.util.Objects.deepEquals(this.authorization, other.authorization);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            authorization);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "authorization", authorization);
    }
    
    public final static class Builder {
 
        private String authorization;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder authorization(String authorization) {
            Utils.checkNotNull(authorization, "authorization");
            this.authorization = authorization;
            return this;
        }
        
        public Security build() {
            return new Security(
                authorization);
        }
    }
}

