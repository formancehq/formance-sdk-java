/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.utils.LazySingletonValue;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class Security {

    @SpeakeasyMetadata("security:scheme=true,type=oauth2,subtype=client_credentials,name=clientID")
    private String clientID;

    @SpeakeasyMetadata("security:scheme=true,type=oauth2,subtype=client_credentials,name=clientSecret")
    private String clientSecret;

    private String tokenURL;

    @JsonCreator
    public Security(
            String clientID,
            String clientSecret) {
        Utils.checkNotNull(clientID, "clientID");
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientID = clientID;
        this.clientSecret = clientSecret;
        this.tokenURL = Builder._SINGLETON_VALUE_TokenURL.value();
    }

    @JsonIgnore
    public String clientID() {
        return clientID;
    }

    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    @JsonIgnore
    public String tokenURL() {
        return tokenURL;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Security withClientID(String clientID) {
        Utils.checkNotNull(clientID, "clientID");
        this.clientID = clientID;
        return this;
    }

    public Security withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            java.util.Objects.deepEquals(this.clientID, other.clientID) &&
            java.util.Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            java.util.Objects.deepEquals(this.tokenURL, other.tokenURL);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            clientID,
            clientSecret,
            tokenURL);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "clientID", clientID,
                "clientSecret", clientSecret,
                "tokenURL", tokenURL);
    }
    
    public final static class Builder {
 
        private String clientID;
 
        private String clientSecret;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientID(String clientID) {
            Utils.checkNotNull(clientID, "clientID");
            this.clientID = clientID;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }
        
        public Security build() {
            return new Security(
                clientID,
                clientSecret);
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_TokenURL =
                new LazySingletonValue<>(
                        "TokenURL",
                        "\"/api/auth/oauth/token\"",
                        new TypeReference<String>() {});
    }
}

