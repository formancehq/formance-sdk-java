/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


public class V2BulkElementAddMetadataData {

    @JsonProperty("metadata")
    private Map<String, String> metadata;

    @JsonProperty("targetId")
    private V2TargetId targetId;

    @JsonProperty("targetType")
    private V2TargetType targetType;

    @JsonCreator
    public V2BulkElementAddMetadataData(
            @JsonProperty("metadata") Map<String, String> metadata,
            @JsonProperty("targetId") V2TargetId targetId,
            @JsonProperty("targetType") V2TargetType targetType) {
        metadata = Utils.emptyMapIfNull(metadata);
        Utils.checkNotNull(targetId, "targetId");
        Utils.checkNotNull(targetType, "targetType");
        this.metadata = metadata;
        this.targetId = targetId;
        this.targetType = targetType;
    }

    @JsonIgnore
    public Map<String, String> metadata() {
        return metadata;
    }

    @JsonIgnore
    public V2TargetId targetId() {
        return targetId;
    }

    @JsonIgnore
    public V2TargetType targetType() {
        return targetType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V2BulkElementAddMetadataData withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public V2BulkElementAddMetadataData withTargetId(V2TargetId targetId) {
        Utils.checkNotNull(targetId, "targetId");
        this.targetId = targetId;
        return this;
    }

    public V2BulkElementAddMetadataData withTargetType(V2TargetType targetType) {
        Utils.checkNotNull(targetType, "targetType");
        this.targetType = targetType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2BulkElementAddMetadataData other = (V2BulkElementAddMetadataData) o;
        return 
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.targetId, other.targetId) &&
            Objects.deepEquals(this.targetType, other.targetType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            metadata,
            targetId,
            targetType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2BulkElementAddMetadataData.class,
                "metadata", metadata,
                "targetId", targetId,
                "targetType", targetType);
    }
    
    public final static class Builder {
 
        private Map<String, String> metadata;
 
        private V2TargetId targetId;
 
        private V2TargetType targetType;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder targetId(V2TargetId targetId) {
            Utils.checkNotNull(targetId, "targetId");
            this.targetId = targetId;
            return this;
        }

        public Builder targetType(V2TargetType targetType) {
            Utils.checkNotNull(targetType, "targetType");
            this.targetType = targetType;
            return this;
        }
        
        public V2BulkElementAddMetadataData build() {
            return new V2BulkElementAddMetadataData(
                metadata,
                targetId,
                targetType);
        }
    }
}

