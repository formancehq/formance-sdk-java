/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Balance {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    private JsonNullable<OffsetDateTime> expiresAt;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private Optional<? extends BigInteger> priority;

    @JsonCreator
    public Balance(
            @JsonProperty("expiresAt") JsonNullable<OffsetDateTime> expiresAt,
            @JsonProperty("name") String name,
            @JsonProperty("priority") Optional<? extends BigInteger> priority) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(priority, "priority");
        this.expiresAt = expiresAt;
        this.name = name;
        this.priority = priority;
    }
    
    public Balance(
            String name) {
        this(JsonNullable.undefined(), name, Optional.empty());
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> expiresAt() {
        return expiresAt;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigInteger> priority() {
        return (Optional<BigInteger>) priority;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Balance withExpiresAt(OffsetDateTime expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = JsonNullable.of(expiresAt);
        return this;
    }

    public Balance withExpiresAt(JsonNullable<OffsetDateTime> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    public Balance withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Balance withPriority(BigInteger priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = Optional.ofNullable(priority);
        return this;
    }

    public Balance withPriority(long priority) {
        this.priority = Optional.of(BigInteger.valueOf(priority));
        return this;
    }

    public Balance withPriority(Optional<? extends BigInteger> priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = priority;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Balance other = (Balance) o;
        return 
            Objects.deepEquals(this.expiresAt, other.expiresAt) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.priority, other.priority);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            expiresAt,
            name,
            priority);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Balance.class,
                "expiresAt", expiresAt,
                "name", name,
                "priority", priority);
    }
    
    public final static class Builder {
 
        private JsonNullable<OffsetDateTime> expiresAt = JsonNullable.undefined();
 
        private String name;
 
        private Optional<? extends BigInteger> priority = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder expiresAt(OffsetDateTime expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = JsonNullable.of(expiresAt);
            return this;
        }

        public Builder expiresAt(JsonNullable<OffsetDateTime> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder priority(BigInteger priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = Optional.ofNullable(priority);
            return this;
        }

        public Builder priority(long priority) {
            this.priority = Optional.of(BigInteger.valueOf(priority));
            return this;
        }

        public Builder priority(Optional<? extends BigInteger> priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = priority;
            return this;
        }
        
        public Balance build() {
            return new Balance(
                expiresAt,
                name,
                priority);
        }
    }
}

