/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Objects;


public class PaymentAdjustment {

    @JsonProperty("amount")
    private BigInteger amount;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("raw")
    private PaymentAdjustmentRaw raw;

    @JsonProperty("reference")
    private String reference;

    @JsonProperty("status")
    private PaymentStatus status;

    @JsonCreator
    public PaymentAdjustment(
            @JsonProperty("amount") BigInteger amount,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("raw") PaymentAdjustmentRaw raw,
            @JsonProperty("reference") String reference,
            @JsonProperty("status") PaymentStatus status) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(status, "status");
        this.amount = amount;
        this.createdAt = createdAt;
        this.raw = raw;
        this.reference = reference;
        this.status = status;
    }

    @JsonIgnore
    public BigInteger amount() {
        return amount;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public PaymentAdjustmentRaw raw() {
        return raw;
    }

    @JsonIgnore
    public String reference() {
        return reference;
    }

    @JsonIgnore
    public PaymentStatus status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PaymentAdjustment withAmount(long amount) {
        this.amount = BigInteger.valueOf(amount);
        return this;
    }

    public PaymentAdjustment withAmount(BigInteger amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public PaymentAdjustment withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public PaymentAdjustment withRaw(PaymentAdjustmentRaw raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public PaymentAdjustment withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public PaymentAdjustment withStatus(PaymentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentAdjustment other = (PaymentAdjustment) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            createdAt,
            raw,
            reference,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentAdjustment.class,
                "amount", amount,
                "createdAt", createdAt,
                "raw", raw,
                "reference", reference,
                "status", status);
    }
    
    public final static class Builder {
 
        private BigInteger amount;
 
        private OffsetDateTime createdAt;
 
        private PaymentAdjustmentRaw raw;
 
        private String reference;
 
        private PaymentStatus status;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(long amount) {
            this.amount = BigInteger.valueOf(amount);
            return this;
        }

        public Builder amount(BigInteger amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder raw(PaymentAdjustmentRaw raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder status(PaymentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public PaymentAdjustment build() {
            return new PaymentAdjustment(
                amount,
                createdAt,
                raw,
                reference,
                status);
        }
    }
}

