/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;


public class V3Account {

    @JsonProperty("connectorID")
    private String connectorID;


    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultAsset")
    private JsonNullable<String> defaultAsset;


    @JsonProperty("id")
    private String id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;


    @JsonProperty("provider")
    private String provider;


    @JsonProperty("raw")
    private V3AccountRaw raw;


    @JsonProperty("reference")
    private String reference;


    @JsonProperty("type")
    private V3AccountTypeEnum type;

    @JsonCreator
    public V3Account(
            @JsonProperty("connectorID") String connectorID,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("defaultAsset") JsonNullable<String> defaultAsset,
            @JsonProperty("id") String id,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("provider") String provider,
            @JsonProperty("raw") V3AccountRaw raw,
            @JsonProperty("reference") String reference,
            @JsonProperty("type") V3AccountTypeEnum type) {
        Utils.checkNotNull(connectorID, "connectorID");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(defaultAsset, "defaultAsset");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(type, "type");
        this.connectorID = connectorID;
        this.createdAt = createdAt;
        this.defaultAsset = defaultAsset;
        this.id = id;
        this.metadata = metadata;
        this.name = name;
        this.provider = provider;
        this.raw = raw;
        this.reference = reference;
        this.type = type;
    }
    
    public V3Account(
            String connectorID,
            OffsetDateTime createdAt,
            String id,
            String provider,
            V3AccountRaw raw,
            String reference,
            V3AccountTypeEnum type) {
        this(connectorID, createdAt, JsonNullable.undefined(),
            id, JsonNullable.undefined(), JsonNullable.undefined(),
            provider, raw, reference,
            type);
    }

    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public JsonNullable<String> defaultAsset() {
        return defaultAsset;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @JsonIgnore
    public String provider() {
        return provider;
    }

    @JsonIgnore
    public V3AccountRaw raw() {
        return raw;
    }

    @JsonIgnore
    public String reference() {
        return reference;
    }

    @JsonIgnore
    public V3AccountTypeEnum type() {
        return type;
    }

    public static Builder builder() {
        return new Builder();
    }


    public V3Account withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    public V3Account withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public V3Account withDefaultAsset(String defaultAsset) {
        Utils.checkNotNull(defaultAsset, "defaultAsset");
        this.defaultAsset = JsonNullable.of(defaultAsset);
        return this;
    }

    public V3Account withDefaultAsset(JsonNullable<String> defaultAsset) {
        Utils.checkNotNull(defaultAsset, "defaultAsset");
        this.defaultAsset = defaultAsset;
        return this;
    }

    public V3Account withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public V3Account withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public V3Account withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public V3Account withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    public V3Account withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public V3Account withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public V3Account withRaw(V3AccountRaw raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public V3Account withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public V3Account withType(V3AccountTypeEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3Account other = (V3Account) o;
        return 
            Utils.enhancedDeepEquals(this.connectorID, other.connectorID) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.defaultAsset, other.defaultAsset) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            connectorID, createdAt, defaultAsset,
            id, metadata, name,
            provider, raw, reference,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3Account.class,
                "connectorID", connectorID,
                "createdAt", createdAt,
                "defaultAsset", defaultAsset,
                "id", id,
                "metadata", metadata,
                "name", name,
                "provider", provider,
                "raw", raw,
                "reference", reference,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String connectorID;

        private OffsetDateTime createdAt;

        private JsonNullable<String> defaultAsset = JsonNullable.undefined();

        private String id;

        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();

        private JsonNullable<String> name = JsonNullable.undefined();

        private String provider;

        private V3AccountRaw raw;

        private String reference;

        private V3AccountTypeEnum type;

        private Builder() {
          // force use of static builder() method
        }


        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder defaultAsset(String defaultAsset) {
            Utils.checkNotNull(defaultAsset, "defaultAsset");
            this.defaultAsset = JsonNullable.of(defaultAsset);
            return this;
        }

        public Builder defaultAsset(JsonNullable<String> defaultAsset) {
            Utils.checkNotNull(defaultAsset, "defaultAsset");
            this.defaultAsset = defaultAsset;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }


        public Builder raw(V3AccountRaw raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }


        public Builder type(V3AccountTypeEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public V3Account build() {

            return new V3Account(
                connectorID, createdAt, defaultAsset,
                id, metadata, name,
                provider, raw, reference,
                type);
        }

    }
}
