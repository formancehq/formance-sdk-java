/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

public class TransferInitiationPayments {

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private JsonNullable<String> error;

    @JsonProperty("paymentID")
    private String paymentID;

    @JsonProperty("status")
    private PaymentStatus status;

    @JsonCreator
    public TransferInitiationPayments(
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("error") JsonNullable<String> error,
            @JsonProperty("paymentID") String paymentID,
            @JsonProperty("status") PaymentStatus status) {
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(paymentID, "paymentID");
        Utils.checkNotNull(status, "status");
        this.createdAt = createdAt;
        this.error = error;
        this.paymentID = paymentID;
        this.status = status;
    }
    
    public TransferInitiationPayments(
            OffsetDateTime createdAt,
            String paymentID,
            PaymentStatus status) {
        this(createdAt, JsonNullable.undefined(), paymentID, status);
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public JsonNullable<String> error() {
        return error;
    }

    @JsonIgnore
    public String paymentID() {
        return paymentID;
    }

    @JsonIgnore
    public PaymentStatus status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public TransferInitiationPayments withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public TransferInitiationPayments withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = JsonNullable.of(error);
        return this;
    }

    public TransferInitiationPayments withError(JsonNullable<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public TransferInitiationPayments withPaymentID(String paymentID) {
        Utils.checkNotNull(paymentID, "paymentID");
        this.paymentID = paymentID;
        return this;
    }

    public TransferInitiationPayments withStatus(PaymentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransferInitiationPayments other = (TransferInitiationPayments) o;
        return 
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.paymentID, other.paymentID) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            createdAt,
            error,
            paymentID,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransferInitiationPayments.class,
                "createdAt", createdAt,
                "error", error,
                "paymentID", paymentID,
                "status", status);
    }
    
    public final static class Builder {
 
        private OffsetDateTime createdAt;
 
        private JsonNullable<String> error = JsonNullable.undefined();
 
        private String paymentID;
 
        private PaymentStatus status;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = JsonNullable.of(error);
            return this;
        }

        public Builder error(JsonNullable<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        public Builder paymentID(String paymentID) {
            Utils.checkNotNull(paymentID, "paymentID");
            this.paymentID = paymentID;
            return this;
        }

        public Builder status(PaymentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public TransferInitiationPayments build() {
            return new TransferInitiationPayments(
                createdAt,
                error,
                paymentID,
                status);
        }
    }
}
