/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class Response {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<? extends ResponseCursor> cursor;

    /**
     * The payload
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends Map<String, Object>> data;

    @JsonCreator
    public Response(
            @JsonProperty("cursor") Optional<? extends ResponseCursor> cursor,
            @JsonProperty("data") Optional<? extends Map<String, Object>> data) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(data, "data");
        this.cursor = cursor;
        this.data = data;
    }
    
    public Response() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResponseCursor> cursor() {
        return (Optional<ResponseCursor>) cursor;
    }

    /**
     * The payload
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> data() {
        return (Optional<Map<String, Object>>) data;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Response withCursor(ResponseCursor cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    public Response withCursor(Optional<? extends ResponseCursor> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * The payload
     */
    public Response withData(Map<String, Object> data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    /**
     * The payload
     */
    public Response withData(Optional<? extends Map<String, Object>> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Response other = (Response) o;
        return 
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.data, other.data);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cursor,
            data);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Response.class,
                "cursor", cursor,
                "data", data);
    }
    
    public final static class Builder {
 
        private Optional<? extends ResponseCursor> cursor = Optional.empty();
 
        private Optional<? extends Map<String, Object>> data = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder cursor(ResponseCursor cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Optional<? extends ResponseCursor> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * The payload
         */
        public Builder data(Map<String, Object> data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        /**
         * The payload
         */
        public Builder data(Optional<? extends Map<String, Object>> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }
        
        public Response build() {
            return new Response(
                cursor,
                data);
        }
    }
}

