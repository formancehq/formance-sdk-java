/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class V3InitiatePaymentRequest {

    @JsonProperty("amount")
    private BigInteger amount;

    @JsonProperty("asset")
    private String asset;

    @JsonProperty("connectorID")
    private String connectorID;

    @JsonProperty("description")
    private String description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationAccountID")
    private Optional<String> destinationAccountID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;

    @JsonProperty("reference")
    private String reference;

    @JsonProperty("scheduledAt")
    private OffsetDateTime scheduledAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAccountID")
    private JsonNullable<String> sourceAccountID;

    @JsonProperty("type")
    private V3PaymentInitiationTypeEnum type;

    @JsonCreator
    public V3InitiatePaymentRequest(
            @JsonProperty("amount") BigInteger amount,
            @JsonProperty("asset") String asset,
            @JsonProperty("connectorID") String connectorID,
            @JsonProperty("description") String description,
            @JsonProperty("destinationAccountID") Optional<String> destinationAccountID,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("reference") String reference,
            @JsonProperty("scheduledAt") OffsetDateTime scheduledAt,
            @JsonProperty("sourceAccountID") JsonNullable<String> sourceAccountID,
            @JsonProperty("type") V3PaymentInitiationTypeEnum type) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(asset, "asset");
        Utils.checkNotNull(connectorID, "connectorID");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(scheduledAt, "scheduledAt");
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        Utils.checkNotNull(type, "type");
        this.amount = amount;
        this.asset = asset;
        this.connectorID = connectorID;
        this.description = description;
        this.destinationAccountID = destinationAccountID;
        this.metadata = metadata;
        this.reference = reference;
        this.scheduledAt = scheduledAt;
        this.sourceAccountID = sourceAccountID;
        this.type = type;
    }
    
    public V3InitiatePaymentRequest(
            BigInteger amount,
            String asset,
            String connectorID,
            String description,
            String reference,
            OffsetDateTime scheduledAt,
            V3PaymentInitiationTypeEnum type) {
        this(amount, asset, connectorID, description, Optional.empty(), JsonNullable.undefined(), reference, scheduledAt, JsonNullable.undefined(), type);
    }

    @JsonIgnore
    public BigInteger amount() {
        return amount;
    }

    @JsonIgnore
    public String asset() {
        return asset;
    }

    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    @JsonIgnore
    public String description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> destinationAccountID() {
        return destinationAccountID;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    @JsonIgnore
    public String reference() {
        return reference;
    }

    @JsonIgnore
    public OffsetDateTime scheduledAt() {
        return scheduledAt;
    }

    @JsonIgnore
    public JsonNullable<String> sourceAccountID() {
        return sourceAccountID;
    }

    @JsonIgnore
    public V3PaymentInitiationTypeEnum type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V3InitiatePaymentRequest withAmount(long amount) {
        this.amount = BigInteger.valueOf(amount);
        return this;
    }

    public V3InitiatePaymentRequest withAmount(BigInteger amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public V3InitiatePaymentRequest withAsset(String asset) {
        Utils.checkNotNull(asset, "asset");
        this.asset = asset;
        return this;
    }

    public V3InitiatePaymentRequest withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    public V3InitiatePaymentRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public V3InitiatePaymentRequest withDestinationAccountID(String destinationAccountID) {
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        this.destinationAccountID = Optional.ofNullable(destinationAccountID);
        return this;
    }

    public V3InitiatePaymentRequest withDestinationAccountID(Optional<String> destinationAccountID) {
        Utils.checkNotNull(destinationAccountID, "destinationAccountID");
        this.destinationAccountID = destinationAccountID;
        return this;
    }

    public V3InitiatePaymentRequest withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public V3InitiatePaymentRequest withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public V3InitiatePaymentRequest withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public V3InitiatePaymentRequest withScheduledAt(OffsetDateTime scheduledAt) {
        Utils.checkNotNull(scheduledAt, "scheduledAt");
        this.scheduledAt = scheduledAt;
        return this;
    }

    public V3InitiatePaymentRequest withSourceAccountID(String sourceAccountID) {
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        this.sourceAccountID = JsonNullable.of(sourceAccountID);
        return this;
    }

    public V3InitiatePaymentRequest withSourceAccountID(JsonNullable<String> sourceAccountID) {
        Utils.checkNotNull(sourceAccountID, "sourceAccountID");
        this.sourceAccountID = sourceAccountID;
        return this;
    }

    public V3InitiatePaymentRequest withType(V3PaymentInitiationTypeEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3InitiatePaymentRequest other = (V3InitiatePaymentRequest) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.asset, other.asset) &&
            Objects.deepEquals(this.connectorID, other.connectorID) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.destinationAccountID, other.destinationAccountID) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.scheduledAt, other.scheduledAt) &&
            Objects.deepEquals(this.sourceAccountID, other.sourceAccountID) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            asset,
            connectorID,
            description,
            destinationAccountID,
            metadata,
            reference,
            scheduledAt,
            sourceAccountID,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3InitiatePaymentRequest.class,
                "amount", amount,
                "asset", asset,
                "connectorID", connectorID,
                "description", description,
                "destinationAccountID", destinationAccountID,
                "metadata", metadata,
                "reference", reference,
                "scheduledAt", scheduledAt,
                "sourceAccountID", sourceAccountID,
                "type", type);
    }
    
    public final static class Builder {
 
        private BigInteger amount;
 
        private String asset;
 
        private String connectorID;
 
        private String description;
 
        private Optional<String> destinationAccountID = Optional.empty();
 
        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();
 
        private String reference;
 
        private OffsetDateTime scheduledAt;
 
        private JsonNullable<String> sourceAccountID = JsonNullable.undefined();
 
        private V3PaymentInitiationTypeEnum type;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(long amount) {
            this.amount = BigInteger.valueOf(amount);
            return this;
        }

        public Builder amount(BigInteger amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder asset(String asset) {
            Utils.checkNotNull(asset, "asset");
            this.asset = asset;
            return this;
        }

        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder destinationAccountID(String destinationAccountID) {
            Utils.checkNotNull(destinationAccountID, "destinationAccountID");
            this.destinationAccountID = Optional.ofNullable(destinationAccountID);
            return this;
        }

        public Builder destinationAccountID(Optional<String> destinationAccountID) {
            Utils.checkNotNull(destinationAccountID, "destinationAccountID");
            this.destinationAccountID = destinationAccountID;
            return this;
        }

        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder scheduledAt(OffsetDateTime scheduledAt) {
            Utils.checkNotNull(scheduledAt, "scheduledAt");
            this.scheduledAt = scheduledAt;
            return this;
        }

        public Builder sourceAccountID(String sourceAccountID) {
            Utils.checkNotNull(sourceAccountID, "sourceAccountID");
            this.sourceAccountID = JsonNullable.of(sourceAccountID);
            return this;
        }

        public Builder sourceAccountID(JsonNullable<String> sourceAccountID) {
            Utils.checkNotNull(sourceAccountID, "sourceAccountID");
            this.sourceAccountID = sourceAccountID;
            return this;
        }

        public Builder type(V3PaymentInitiationTypeEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public V3InitiatePaymentRequest build() {
            return new V3InitiatePaymentRequest(
                amount,
                asset,
                connectorID,
                description,
                destinationAccountID,
                metadata,
                reference,
                scheduledAt,
                sourceAccountID,
                type);
        }
    }
}

