/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Objects;


public class AccountBalance {

    @JsonProperty("accountId")
    private String accountId;

    @JsonProperty("asset")
    private String asset;

    @JsonProperty("balance")
    private BigInteger balance;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonProperty("currency")
    @Deprecated
    private String currency;

    @JsonProperty("lastUpdatedAt")
    private OffsetDateTime lastUpdatedAt;

    @JsonCreator
    public AccountBalance(
            @JsonProperty("accountId") String accountId,
            @JsonProperty("asset") String asset,
            @JsonProperty("balance") BigInteger balance,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("currency") String currency,
            @JsonProperty("lastUpdatedAt") OffsetDateTime lastUpdatedAt) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(asset, "asset");
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
        this.accountId = accountId;
        this.asset = asset;
        this.balance = balance;
        this.createdAt = createdAt;
        this.currency = currency;
        this.lastUpdatedAt = lastUpdatedAt;
    }

    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    @JsonIgnore
    public String asset() {
        return asset;
    }

    @JsonIgnore
    public BigInteger balance() {
        return balance;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public String currency() {
        return currency;
    }

    @JsonIgnore
    public OffsetDateTime lastUpdatedAt() {
        return lastUpdatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AccountBalance withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    public AccountBalance withAsset(String asset) {
        Utils.checkNotNull(asset, "asset");
        this.asset = asset;
        return this;
    }

    public AccountBalance withBalance(long balance) {
        this.balance = BigInteger.valueOf(balance);
        return this;
    }

    public AccountBalance withBalance(BigInteger balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    public AccountBalance withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public AccountBalance withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public AccountBalance withLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
        Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
        this.lastUpdatedAt = lastUpdatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountBalance other = (AccountBalance) o;
        return 
            Objects.deepEquals(this.accountId, other.accountId) &&
            Objects.deepEquals(this.asset, other.asset) &&
            Objects.deepEquals(this.balance, other.balance) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.lastUpdatedAt, other.lastUpdatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountId,
            asset,
            balance,
            createdAt,
            currency,
            lastUpdatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountBalance.class,
                "accountId", accountId,
                "asset", asset,
                "balance", balance,
                "createdAt", createdAt,
                "currency", currency,
                "lastUpdatedAt", lastUpdatedAt);
    }
    
    public final static class Builder {
 
        private String accountId;
 
        private String asset;
 
        private BigInteger balance;
 
        private OffsetDateTime createdAt;
 
        @Deprecated
        private String currency;
 
        private OffsetDateTime lastUpdatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        public Builder asset(String asset) {
            Utils.checkNotNull(asset, "asset");
            this.asset = asset;
            return this;
        }

        public Builder balance(long balance) {
            this.balance = BigInteger.valueOf(balance);
            return this;
        }

        public Builder balance(BigInteger balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
            Utils.checkNotNull(lastUpdatedAt, "lastUpdatedAt");
            this.lastUpdatedAt = lastUpdatedAt;
            return this;
        }
        
        public AccountBalance build() {
            return new AccountBalance(
                accountId,
                asset,
                balance,
                createdAt,
                currency,
                lastUpdatedAt);
        }
    }
}

