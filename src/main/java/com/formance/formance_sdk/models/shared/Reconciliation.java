/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class Reconciliation {

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("driftBalances")
    private java.util.Map<String, BigInteger> driftBalances;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends String> error;

    @JsonProperty("id")
    private String id;

    @JsonProperty("ledgerBalances")
    private java.util.Map<String, BigInteger> ledgerBalances;

    @JsonProperty("paymentsBalances")
    private java.util.Map<String, BigInteger> paymentsBalances;

    @JsonProperty("policyID")
    private String policyID;

    @JsonProperty("reconciledAtLedger")
    private OffsetDateTime reconciledAtLedger;

    @JsonProperty("reconciledAtPayments")
    private OffsetDateTime reconciledAtPayments;

    @JsonProperty("status")
    private String status;

    @JsonCreator
    public Reconciliation(
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("driftBalances") java.util.Map<String, BigInteger> driftBalances,
            @JsonProperty("error") Optional<? extends String> error,
            @JsonProperty("id") String id,
            @JsonProperty("ledgerBalances") java.util.Map<String, BigInteger> ledgerBalances,
            @JsonProperty("paymentsBalances") java.util.Map<String, BigInteger> paymentsBalances,
            @JsonProperty("policyID") String policyID,
            @JsonProperty("reconciledAtLedger") OffsetDateTime reconciledAtLedger,
            @JsonProperty("reconciledAtPayments") OffsetDateTime reconciledAtPayments,
            @JsonProperty("status") String status) {
        Utils.checkNotNull(createdAt, "createdAt");
        driftBalances = Utils.emptyMapIfNull(driftBalances);
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(id, "id");
        ledgerBalances = Utils.emptyMapIfNull(ledgerBalances);
        paymentsBalances = Utils.emptyMapIfNull(paymentsBalances);
        Utils.checkNotNull(policyID, "policyID");
        Utils.checkNotNull(reconciledAtLedger, "reconciledAtLedger");
        Utils.checkNotNull(reconciledAtPayments, "reconciledAtPayments");
        Utils.checkNotNull(status, "status");
        this.createdAt = createdAt;
        this.driftBalances = driftBalances;
        this.error = error;
        this.id = id;
        this.ledgerBalances = ledgerBalances;
        this.paymentsBalances = paymentsBalances;
        this.policyID = policyID;
        this.reconciledAtLedger = reconciledAtLedger;
        this.reconciledAtPayments = reconciledAtPayments;
        this.status = status;
    }
    
    public Reconciliation(
            OffsetDateTime createdAt,
            java.util.Map<String, BigInteger> driftBalances,
            String id,
            java.util.Map<String, BigInteger> ledgerBalances,
            java.util.Map<String, BigInteger> paymentsBalances,
            String policyID,
            OffsetDateTime reconciledAtLedger,
            OffsetDateTime reconciledAtPayments,
            String status) {
        this(createdAt, driftBalances, Optional.empty(), id, ledgerBalances, paymentsBalances, policyID, reconciledAtLedger, reconciledAtPayments, status);
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public java.util.Map<String, BigInteger> driftBalances() {
        return driftBalances;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> error() {
        return (Optional<String>) error;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public java.util.Map<String, BigInteger> ledgerBalances() {
        return ledgerBalances;
    }

    @JsonIgnore
    public java.util.Map<String, BigInteger> paymentsBalances() {
        return paymentsBalances;
    }

    @JsonIgnore
    public String policyID() {
        return policyID;
    }

    @JsonIgnore
    public OffsetDateTime reconciledAtLedger() {
        return reconciledAtLedger;
    }

    @JsonIgnore
    public OffsetDateTime reconciledAtPayments() {
        return reconciledAtPayments;
    }

    @JsonIgnore
    public String status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Reconciliation withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public Reconciliation withDriftBalances(java.util.Map<String, BigInteger> driftBalances) {
        Utils.checkNotNull(driftBalances, "driftBalances");
        this.driftBalances = driftBalances;
        return this;
    }

    public Reconciliation withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public Reconciliation withError(Optional<? extends String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public Reconciliation withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Reconciliation withLedgerBalances(java.util.Map<String, BigInteger> ledgerBalances) {
        Utils.checkNotNull(ledgerBalances, "ledgerBalances");
        this.ledgerBalances = ledgerBalances;
        return this;
    }

    public Reconciliation withPaymentsBalances(java.util.Map<String, BigInteger> paymentsBalances) {
        Utils.checkNotNull(paymentsBalances, "paymentsBalances");
        this.paymentsBalances = paymentsBalances;
        return this;
    }

    public Reconciliation withPolicyID(String policyID) {
        Utils.checkNotNull(policyID, "policyID");
        this.policyID = policyID;
        return this;
    }

    public Reconciliation withReconciledAtLedger(OffsetDateTime reconciledAtLedger) {
        Utils.checkNotNull(reconciledAtLedger, "reconciledAtLedger");
        this.reconciledAtLedger = reconciledAtLedger;
        return this;
    }

    public Reconciliation withReconciledAtPayments(OffsetDateTime reconciledAtPayments) {
        Utils.checkNotNull(reconciledAtPayments, "reconciledAtPayments");
        this.reconciledAtPayments = reconciledAtPayments;
        return this;
    }

    public Reconciliation withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Reconciliation other = (Reconciliation) o;
        return 
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.driftBalances, other.driftBalances) &&
            java.util.Objects.deepEquals(this.error, other.error) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.ledgerBalances, other.ledgerBalances) &&
            java.util.Objects.deepEquals(this.paymentsBalances, other.paymentsBalances) &&
            java.util.Objects.deepEquals(this.policyID, other.policyID) &&
            java.util.Objects.deepEquals(this.reconciledAtLedger, other.reconciledAtLedger) &&
            java.util.Objects.deepEquals(this.reconciledAtPayments, other.reconciledAtPayments) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            createdAt,
            driftBalances,
            error,
            id,
            ledgerBalances,
            paymentsBalances,
            policyID,
            reconciledAtLedger,
            reconciledAtPayments,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Reconciliation.class,
                "createdAt", createdAt,
                "driftBalances", driftBalances,
                "error", error,
                "id", id,
                "ledgerBalances", ledgerBalances,
                "paymentsBalances", paymentsBalances,
                "policyID", policyID,
                "reconciledAtLedger", reconciledAtLedger,
                "reconciledAtPayments", reconciledAtPayments,
                "status", status);
    }
    
    public final static class Builder {
 
        private OffsetDateTime createdAt;
 
        private java.util.Map<String, BigInteger> driftBalances;
 
        private Optional<? extends String> error = Optional.empty();
 
        private String id;
 
        private java.util.Map<String, BigInteger> ledgerBalances;
 
        private java.util.Map<String, BigInteger> paymentsBalances;
 
        private String policyID;
 
        private OffsetDateTime reconciledAtLedger;
 
        private OffsetDateTime reconciledAtPayments;
 
        private String status;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder driftBalances(java.util.Map<String, BigInteger> driftBalances) {
            Utils.checkNotNull(driftBalances, "driftBalances");
            this.driftBalances = driftBalances;
            return this;
        }

        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<? extends String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder ledgerBalances(java.util.Map<String, BigInteger> ledgerBalances) {
            Utils.checkNotNull(ledgerBalances, "ledgerBalances");
            this.ledgerBalances = ledgerBalances;
            return this;
        }

        public Builder paymentsBalances(java.util.Map<String, BigInteger> paymentsBalances) {
            Utils.checkNotNull(paymentsBalances, "paymentsBalances");
            this.paymentsBalances = paymentsBalances;
            return this;
        }

        public Builder policyID(String policyID) {
            Utils.checkNotNull(policyID, "policyID");
            this.policyID = policyID;
            return this;
        }

        public Builder reconciledAtLedger(OffsetDateTime reconciledAtLedger) {
            Utils.checkNotNull(reconciledAtLedger, "reconciledAtLedger");
            this.reconciledAtLedger = reconciledAtLedger;
            return this;
        }

        public Builder reconciledAtPayments(OffsetDateTime reconciledAtPayments) {
            Utils.checkNotNull(reconciledAtPayments, "reconciledAtPayments");
            this.reconciledAtPayments = reconciledAtPayments;
            return this;
        }

        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public Reconciliation build() {
            return new Reconciliation(
                createdAt,
                driftBalances,
                error,
                id,
                ledgerBalances,
                paymentsBalances,
                policyID,
                reconciledAtLedger,
                reconciledAtPayments,
                status);
        }
    }
}

