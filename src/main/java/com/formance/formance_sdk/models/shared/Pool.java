/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class Pool {

    @JsonProperty("accounts")
    private List<String> accounts;

    @JsonProperty("id")
    private String id;

    @JsonProperty("name")
    private String name;

    @JsonCreator
    public Pool(
            @JsonProperty("accounts") List<String> accounts,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name) {
        Utils.checkNotNull(accounts, "accounts");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        this.accounts = accounts;
        this.id = id;
        this.name = name;
    }

    @JsonIgnore
    public List<String> accounts() {
        return accounts;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Pool withAccounts(List<String> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = accounts;
        return this;
    }

    public Pool withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Pool withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pool other = (Pool) o;
        return 
            Objects.deepEquals(this.accounts, other.accounts) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accounts,
            id,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Pool.class,
                "accounts", accounts,
                "id", id,
                "name", name);
    }
    
    public final static class Builder {
 
        private List<String> accounts;
 
        private String id;
 
        private String name;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accounts(List<String> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = accounts;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public Pool build() {
            return new Pool(
                accounts,
                id,
                name);
        }
    }
}

