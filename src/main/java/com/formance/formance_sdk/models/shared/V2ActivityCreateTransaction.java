/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class V2ActivityCreateTransaction {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends V2PostTransaction> data;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ledger")
    private Optional<String> ledger;

    @JsonCreator
    public V2ActivityCreateTransaction(
            @JsonProperty("data") Optional<? extends V2PostTransaction> data,
            @JsonProperty("ledger") Optional<String> ledger) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(ledger, "ledger");
        this.data = data;
        this.ledger = ledger;
    }
    
    public V2ActivityCreateTransaction() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<V2PostTransaction> data() {
        return (Optional<V2PostTransaction>) data;
    }

    @JsonIgnore
    public Optional<String> ledger() {
        return ledger;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V2ActivityCreateTransaction withData(V2PostTransaction data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    public V2ActivityCreateTransaction withData(Optional<? extends V2PostTransaction> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public V2ActivityCreateTransaction withLedger(String ledger) {
        Utils.checkNotNull(ledger, "ledger");
        this.ledger = Optional.ofNullable(ledger);
        return this;
    }

    public V2ActivityCreateTransaction withLedger(Optional<String> ledger) {
        Utils.checkNotNull(ledger, "ledger");
        this.ledger = ledger;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2ActivityCreateTransaction other = (V2ActivityCreateTransaction) o;
        return 
            Objects.deepEquals(this.data, other.data) &&
            Objects.deepEquals(this.ledger, other.ledger);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            data,
            ledger);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2ActivityCreateTransaction.class,
                "data", data,
                "ledger", ledger);
    }
    
    public final static class Builder {
 
        private Optional<? extends V2PostTransaction> data = Optional.empty();
 
        private Optional<String> ledger = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder data(V2PostTransaction data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        public Builder data(Optional<? extends V2PostTransaction> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder ledger(String ledger) {
            Utils.checkNotNull(ledger, "ledger");
            this.ledger = Optional.ofNullable(ledger);
            return this;
        }

        public Builder ledger(Optional<String> ledger) {
            Utils.checkNotNull(ledger, "ledger");
            this.ledger = ledger;
            return this;
        }
        
        public V2ActivityCreateTransaction build() {
            return new V2ActivityCreateTransaction(
                data,
                ledger);
        }
    }
}

