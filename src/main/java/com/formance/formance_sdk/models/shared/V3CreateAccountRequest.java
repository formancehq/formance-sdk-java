/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;


public class V3CreateAccountRequest {

    @JsonProperty("accountName")
    private String accountName;


    @JsonProperty("connectorID")
    private String connectorID;


    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultAsset")
    private JsonNullable<String> defaultAsset;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private JsonNullable<? extends Map<String, String>> metadata;


    @JsonProperty("reference")
    private String reference;


    @JsonProperty("type")
    private V3AccountTypeEnum type;

    @JsonCreator
    public V3CreateAccountRequest(
            @JsonProperty("accountName") String accountName,
            @JsonProperty("connectorID") String connectorID,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("defaultAsset") JsonNullable<String> defaultAsset,
            @JsonProperty("metadata") JsonNullable<? extends Map<String, String>> metadata,
            @JsonProperty("reference") String reference,
            @JsonProperty("type") V3AccountTypeEnum type) {
        Utils.checkNotNull(accountName, "accountName");
        Utils.checkNotNull(connectorID, "connectorID");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(defaultAsset, "defaultAsset");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(type, "type");
        this.accountName = accountName;
        this.connectorID = connectorID;
        this.createdAt = createdAt;
        this.defaultAsset = defaultAsset;
        this.metadata = metadata;
        this.reference = reference;
        this.type = type;
    }
    
    public V3CreateAccountRequest(
            String accountName,
            String connectorID,
            OffsetDateTime createdAt,
            String reference,
            V3AccountTypeEnum type) {
        this(accountName, connectorID, createdAt,
            JsonNullable.undefined(), JsonNullable.undefined(), reference,
            type);
    }

    @JsonIgnore
    public String accountName() {
        return accountName;
    }

    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public JsonNullable<String> defaultAsset() {
        return defaultAsset;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, String>> metadata() {
        return (JsonNullable<Map<String, String>>) metadata;
    }

    @JsonIgnore
    public String reference() {
        return reference;
    }

    @JsonIgnore
    public V3AccountTypeEnum type() {
        return type;
    }

    public static Builder builder() {
        return new Builder();
    }


    public V3CreateAccountRequest withAccountName(String accountName) {
        Utils.checkNotNull(accountName, "accountName");
        this.accountName = accountName;
        return this;
    }

    public V3CreateAccountRequest withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    public V3CreateAccountRequest withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public V3CreateAccountRequest withDefaultAsset(String defaultAsset) {
        Utils.checkNotNull(defaultAsset, "defaultAsset");
        this.defaultAsset = JsonNullable.of(defaultAsset);
        return this;
    }

    public V3CreateAccountRequest withDefaultAsset(JsonNullable<String> defaultAsset) {
        Utils.checkNotNull(defaultAsset, "defaultAsset");
        this.defaultAsset = defaultAsset;
        return this;
    }

    public V3CreateAccountRequest withMetadata(Map<String, String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = JsonNullable.of(metadata);
        return this;
    }

    public V3CreateAccountRequest withMetadata(JsonNullable<? extends Map<String, String>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public V3CreateAccountRequest withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public V3CreateAccountRequest withType(V3AccountTypeEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3CreateAccountRequest other = (V3CreateAccountRequest) o;
        return 
            Utils.enhancedDeepEquals(this.accountName, other.accountName) &&
            Utils.enhancedDeepEquals(this.connectorID, other.connectorID) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.defaultAsset, other.defaultAsset) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountName, connectorID, createdAt,
            defaultAsset, metadata, reference,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3CreateAccountRequest.class,
                "accountName", accountName,
                "connectorID", connectorID,
                "createdAt", createdAt,
                "defaultAsset", defaultAsset,
                "metadata", metadata,
                "reference", reference,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accountName;

        private String connectorID;

        private OffsetDateTime createdAt;

        private JsonNullable<String> defaultAsset = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, String>> metadata = JsonNullable.undefined();

        private String reference;

        private V3AccountTypeEnum type;

        private Builder() {
          // force use of static builder() method
        }


        public Builder accountName(String accountName) {
            Utils.checkNotNull(accountName, "accountName");
            this.accountName = accountName;
            return this;
        }


        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder defaultAsset(String defaultAsset) {
            Utils.checkNotNull(defaultAsset, "defaultAsset");
            this.defaultAsset = JsonNullable.of(defaultAsset);
            return this;
        }

        public Builder defaultAsset(JsonNullable<String> defaultAsset) {
            Utils.checkNotNull(defaultAsset, "defaultAsset");
            this.defaultAsset = defaultAsset;
            return this;
        }


        public Builder metadata(Map<String, String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = JsonNullable.of(metadata);
            return this;
        }

        public Builder metadata(JsonNullable<? extends Map<String, String>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }


        public Builder type(V3AccountTypeEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public V3CreateAccountRequest build() {

            return new V3CreateAccountRequest(
                accountName, connectorID, createdAt,
                defaultAsset, metadata, reference,
                type);
        }

    }
}
