/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Objects;


public class V2PaymentAdjustment {

    @JsonProperty("absolute")
    private boolean absolute;

    @JsonProperty("amount")
    private BigInteger amount;

    @JsonProperty("date")
    private OffsetDateTime date;

    @JsonProperty("raw")
    private V2PaymentAdjustmentRaw raw;

    @JsonProperty("status")
    private V2PaymentStatus status;

    @JsonCreator
    public V2PaymentAdjustment(
            @JsonProperty("absolute") boolean absolute,
            @JsonProperty("amount") BigInteger amount,
            @JsonProperty("date") OffsetDateTime date,
            @JsonProperty("raw") V2PaymentAdjustmentRaw raw,
            @JsonProperty("status") V2PaymentStatus status) {
        Utils.checkNotNull(absolute, "absolute");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(status, "status");
        this.absolute = absolute;
        this.amount = amount;
        this.date = date;
        this.raw = raw;
        this.status = status;
    }

    @JsonIgnore
    public boolean absolute() {
        return absolute;
    }

    @JsonIgnore
    public BigInteger amount() {
        return amount;
    }

    @JsonIgnore
    public OffsetDateTime date() {
        return date;
    }

    @JsonIgnore
    public V2PaymentAdjustmentRaw raw() {
        return raw;
    }

    @JsonIgnore
    public V2PaymentStatus status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V2PaymentAdjustment withAbsolute(boolean absolute) {
        Utils.checkNotNull(absolute, "absolute");
        this.absolute = absolute;
        return this;
    }

    public V2PaymentAdjustment withAmount(long amount) {
        this.amount = BigInteger.valueOf(amount);
        return this;
    }

    public V2PaymentAdjustment withAmount(BigInteger amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public V2PaymentAdjustment withDate(OffsetDateTime date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public V2PaymentAdjustment withRaw(V2PaymentAdjustmentRaw raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public V2PaymentAdjustment withStatus(V2PaymentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2PaymentAdjustment other = (V2PaymentAdjustment) o;
        return 
            Objects.deepEquals(this.absolute, other.absolute) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            absolute,
            amount,
            date,
            raw,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2PaymentAdjustment.class,
                "absolute", absolute,
                "amount", amount,
                "date", date,
                "raw", raw,
                "status", status);
    }
    
    public final static class Builder {
 
        private Boolean absolute;
 
        private BigInteger amount;
 
        private OffsetDateTime date;
 
        private V2PaymentAdjustmentRaw raw;
 
        private V2PaymentStatus status;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder absolute(boolean absolute) {
            Utils.checkNotNull(absolute, "absolute");
            this.absolute = absolute;
            return this;
        }

        public Builder amount(long amount) {
            this.amount = BigInteger.valueOf(amount);
            return this;
        }

        public Builder amount(BigInteger amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder date(OffsetDateTime date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder raw(V2PaymentAdjustmentRaw raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder status(V2PaymentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public V2PaymentAdjustment build() {
            return new V2PaymentAdjustment(
                absolute,
                amount,
                date,
                raw,
                status);
        }
    }
}

