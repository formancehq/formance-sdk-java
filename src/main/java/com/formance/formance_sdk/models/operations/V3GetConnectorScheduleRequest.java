/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.formance.formance_sdk.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class V3GetConnectorScheduleRequest {

    /**
     * The connector ID
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connectorID")
    private String connectorID;

    /**
     * The schedule ID
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=scheduleID")
    private String scheduleID;

    @JsonCreator
    public V3GetConnectorScheduleRequest(
            String connectorID,
            String scheduleID) {
        Utils.checkNotNull(connectorID, "connectorID");
        Utils.checkNotNull(scheduleID, "scheduleID");
        this.connectorID = connectorID;
        this.scheduleID = scheduleID;
    }

    /**
     * The connector ID
     */
    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    /**
     * The schedule ID
     */
    @JsonIgnore
    public String scheduleID() {
        return scheduleID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The connector ID
     */
    public V3GetConnectorScheduleRequest withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    /**
     * The schedule ID
     */
    public V3GetConnectorScheduleRequest withScheduleID(String scheduleID) {
        Utils.checkNotNull(scheduleID, "scheduleID");
        this.scheduleID = scheduleID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3GetConnectorScheduleRequest other = (V3GetConnectorScheduleRequest) o;
        return 
            Objects.deepEquals(this.connectorID, other.connectorID) &&
            Objects.deepEquals(this.scheduleID, other.scheduleID);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            connectorID,
            scheduleID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3GetConnectorScheduleRequest.class,
                "connectorID", connectorID,
                "scheduleID", scheduleID);
    }
    
    public final static class Builder {
 
        private String connectorID;
 
        private String scheduleID;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The connector ID
         */
        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }

        /**
         * The schedule ID
         */
        public Builder scheduleID(String scheduleID) {
            Utils.checkNotNull(scheduleID, "scheduleID");
            this.scheduleID = scheduleID;
            return this;
        }
        
        public V3GetConnectorScheduleRequest build() {
            return new V3GetConnectorScheduleRequest(
                connectorID,
                scheduleID);
        }
    }
}

