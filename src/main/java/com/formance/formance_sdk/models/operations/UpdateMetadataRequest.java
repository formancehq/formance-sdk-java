/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class UpdateMetadataRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends Map<String, String>> requestBody;

    /**
     * The payment ID.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=paymentId")
    private String paymentId;

    @JsonCreator
    public UpdateMetadataRequest(
            Optional<? extends Map<String, String>> requestBody,
            String paymentId) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(paymentId, "paymentId");
        this.requestBody = requestBody;
        this.paymentId = paymentId;
    }
    
    public UpdateMetadataRequest(
            String paymentId) {
        this(Optional.empty(), paymentId);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> requestBody() {
        return (Optional<Map<String, String>>) requestBody;
    }

    /**
     * The payment ID.
     */
    @JsonIgnore
    public String paymentId() {
        return paymentId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateMetadataRequest withRequestBody(Map<String, String> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    public UpdateMetadataRequest withRequestBody(Optional<? extends Map<String, String>> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    /**
     * The payment ID.
     */
    public UpdateMetadataRequest withPaymentId(String paymentId) {
        Utils.checkNotNull(paymentId, "paymentId");
        this.paymentId = paymentId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateMetadataRequest other = (UpdateMetadataRequest) o;
        return 
            Objects.deepEquals(this.requestBody, other.requestBody) &&
            Objects.deepEquals(this.paymentId, other.paymentId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestBody,
            paymentId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateMetadataRequest.class,
                "requestBody", requestBody,
                "paymentId", paymentId);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, String>> requestBody = Optional.empty();
 
        private String paymentId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder requestBody(Map<String, String> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends Map<String, String>> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        /**
         * The payment ID.
         */
        public Builder paymentId(String paymentId) {
            Utils.checkNotNull(paymentId, "paymentId");
            this.paymentId = paymentId;
            return this;
        }
        
        public UpdateMetadataRequest build() {
            return new UpdateMetadataRequest(
                requestBody,
                paymentId);
        }
    }
}

