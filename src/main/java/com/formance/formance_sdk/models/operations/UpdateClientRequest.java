/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.models.shared.ClientOptions;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class UpdateClientRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends ClientOptions> clientOptions;

    /**
     * Client ID
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=clientId")
    private String clientId;

    @JsonCreator
    public UpdateClientRequest(
            Optional<? extends ClientOptions> clientOptions,
            String clientId) {
        Utils.checkNotNull(clientOptions, "clientOptions");
        Utils.checkNotNull(clientId, "clientId");
        this.clientOptions = clientOptions;
        this.clientId = clientId;
    }
    
    public UpdateClientRequest(
            String clientId) {
        this(Optional.empty(), clientId);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ClientOptions> clientOptions() {
        return (Optional<ClientOptions>) clientOptions;
    }

    /**
     * Client ID
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UpdateClientRequest withClientOptions(ClientOptions clientOptions) {
        Utils.checkNotNull(clientOptions, "clientOptions");
        this.clientOptions = Optional.ofNullable(clientOptions);
        return this;
    }

    public UpdateClientRequest withClientOptions(Optional<? extends ClientOptions> clientOptions) {
        Utils.checkNotNull(clientOptions, "clientOptions");
        this.clientOptions = clientOptions;
        return this;
    }

    /**
     * Client ID
     */
    public UpdateClientRequest withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateClientRequest other = (UpdateClientRequest) o;
        return 
            Objects.deepEquals(this.clientOptions, other.clientOptions) &&
            Objects.deepEquals(this.clientId, other.clientId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientOptions,
            clientId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateClientRequest.class,
                "clientOptions", clientOptions,
                "clientId", clientId);
    }
    
    public final static class Builder {
 
        private Optional<? extends ClientOptions> clientOptions = Optional.empty();
 
        private String clientId;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientOptions(ClientOptions clientOptions) {
            Utils.checkNotNull(clientOptions, "clientOptions");
            this.clientOptions = Optional.ofNullable(clientOptions);
            return this;
        }

        public Builder clientOptions(Optional<? extends ClientOptions> clientOptions) {
            Utils.checkNotNull(clientOptions, "clientOptions");
            this.clientOptions = clientOptions;
            return this;
        }

        /**
         * Client ID
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }
        
        public UpdateClientRequest build() {
            return new UpdateClientRequest(
                clientOptions,
                clientId);
        }
    }
}
