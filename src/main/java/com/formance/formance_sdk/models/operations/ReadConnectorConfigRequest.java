/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class ReadConnectorConfigRequest {

    /**
     * The name of the connector.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connector")
    private com.formance.formance_sdk.models.shared.Connector connector;

    @JsonCreator
    public ReadConnectorConfigRequest(
            com.formance.formance_sdk.models.shared.Connector connector) {
        Utils.checkNotNull(connector, "connector");
        this.connector = connector;
    }

    /**
     * The name of the connector.
     */
    @JsonIgnore
    public com.formance.formance_sdk.models.shared.Connector connector() {
        return connector;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the connector.
     */
    public ReadConnectorConfigRequest withConnector(com.formance.formance_sdk.models.shared.Connector connector) {
        Utils.checkNotNull(connector, "connector");
        this.connector = connector;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReadConnectorConfigRequest other = (ReadConnectorConfigRequest) o;
        return 
            java.util.Objects.deepEquals(this.connector, other.connector);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            connector);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReadConnectorConfigRequest.class,
                "connector", connector);
    }
    
    public final static class Builder {
 
        private com.formance.formance_sdk.models.shared.Connector connector;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the connector.
         */
        public Builder connector(com.formance.formance_sdk.models.shared.Connector connector) {
            Utils.checkNotNull(connector, "connector");
            this.connector = connector;
            return this;
        }
        
        public ReadConnectorConfigRequest build() {
            return new ReadConnectorConfigRequest(
                connector);
        }
    }
}

