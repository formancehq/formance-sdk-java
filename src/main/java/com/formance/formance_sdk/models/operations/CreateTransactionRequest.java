/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.models.shared.PostTransaction;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CreateTransactionRequest {

    /**
     * The request body must contain at least one of the following objects:
     *   - `postings`: suitable for simple transactions
     *   - `script`: enabling more complex transactions with Numscript
     * 
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private PostTransaction postTransaction;

    /**
     * Name of the ledger.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=ledger")
    private String ledger;

    /**
     * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=preview")
    private Optional<Boolean> preview;

    @JsonCreator
    public CreateTransactionRequest(
            PostTransaction postTransaction,
            String ledger,
            Optional<Boolean> preview) {
        Utils.checkNotNull(postTransaction, "postTransaction");
        Utils.checkNotNull(ledger, "ledger");
        Utils.checkNotNull(preview, "preview");
        this.postTransaction = postTransaction;
        this.ledger = ledger;
        this.preview = preview;
    }
    
    public CreateTransactionRequest(
            PostTransaction postTransaction,
            String ledger) {
        this(postTransaction, ledger, Optional.empty());
    }

    /**
     * The request body must contain at least one of the following objects:
     *   - `postings`: suitable for simple transactions
     *   - `script`: enabling more complex transactions with Numscript
     * 
     */
    @JsonIgnore
    public PostTransaction postTransaction() {
        return postTransaction;
    }

    /**
     * Name of the ledger.
     */
    @JsonIgnore
    public String ledger() {
        return ledger;
    }

    /**
     * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
     */
    @JsonIgnore
    public Optional<Boolean> preview() {
        return preview;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The request body must contain at least one of the following objects:
     *   - `postings`: suitable for simple transactions
     *   - `script`: enabling more complex transactions with Numscript
     * 
     */
    public CreateTransactionRequest withPostTransaction(PostTransaction postTransaction) {
        Utils.checkNotNull(postTransaction, "postTransaction");
        this.postTransaction = postTransaction;
        return this;
    }

    /**
     * Name of the ledger.
     */
    public CreateTransactionRequest withLedger(String ledger) {
        Utils.checkNotNull(ledger, "ledger");
        this.ledger = ledger;
        return this;
    }

    /**
     * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
     */
    public CreateTransactionRequest withPreview(boolean preview) {
        Utils.checkNotNull(preview, "preview");
        this.preview = Optional.ofNullable(preview);
        return this;
    }

    /**
     * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
     */
    public CreateTransactionRequest withPreview(Optional<Boolean> preview) {
        Utils.checkNotNull(preview, "preview");
        this.preview = preview;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateTransactionRequest other = (CreateTransactionRequest) o;
        return 
            Objects.deepEquals(this.postTransaction, other.postTransaction) &&
            Objects.deepEquals(this.ledger, other.ledger) &&
            Objects.deepEquals(this.preview, other.preview);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            postTransaction,
            ledger,
            preview);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateTransactionRequest.class,
                "postTransaction", postTransaction,
                "ledger", ledger,
                "preview", preview);
    }
    
    public final static class Builder {
 
        private PostTransaction postTransaction;
 
        private String ledger;
 
        private Optional<Boolean> preview = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The request body must contain at least one of the following objects:
         *   - `postings`: suitable for simple transactions
         *   - `script`: enabling more complex transactions with Numscript
         * 
         */
        public Builder postTransaction(PostTransaction postTransaction) {
            Utils.checkNotNull(postTransaction, "postTransaction");
            this.postTransaction = postTransaction;
            return this;
        }

        /**
         * Name of the ledger.
         */
        public Builder ledger(String ledger) {
            Utils.checkNotNull(ledger, "ledger");
            this.ledger = ledger;
            return this;
        }

        /**
         * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
         */
        public Builder preview(boolean preview) {
            Utils.checkNotNull(preview, "preview");
            this.preview = Optional.ofNullable(preview);
            return this;
        }

        /**
         * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
         */
        public Builder preview(Optional<Boolean> preview) {
            Utils.checkNotNull(preview, "preview");
            this.preview = preview;
            return this;
        }
        
        public CreateTransactionRequest build() {
            return new CreateTransactionRequest(
                postTransaction,
                ledger,
                preview);
        }
    }
}

