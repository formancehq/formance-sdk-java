/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class V3ForwardPaymentServiceUserBankAccountRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends com.formance.formance_sdk.models.shared.V3ForwardPaymentServiceUserBankAccountRequest> v3ForwardPaymentServiceUserBankAccountRequest;

    /**
     * The bank account ID
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=bankAccountID")
    private String bankAccountID;

    /**
     * The payment service user ID
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=paymentServiceUserID")
    private String paymentServiceUserID;

    @JsonCreator
    public V3ForwardPaymentServiceUserBankAccountRequest(
            Optional<? extends com.formance.formance_sdk.models.shared.V3ForwardPaymentServiceUserBankAccountRequest> v3ForwardPaymentServiceUserBankAccountRequest,
            String bankAccountID,
            String paymentServiceUserID) {
        Utils.checkNotNull(v3ForwardPaymentServiceUserBankAccountRequest, "v3ForwardPaymentServiceUserBankAccountRequest");
        Utils.checkNotNull(bankAccountID, "bankAccountID");
        Utils.checkNotNull(paymentServiceUserID, "paymentServiceUserID");
        this.v3ForwardPaymentServiceUserBankAccountRequest = v3ForwardPaymentServiceUserBankAccountRequest;
        this.bankAccountID = bankAccountID;
        this.paymentServiceUserID = paymentServiceUserID;
    }
    
    public V3ForwardPaymentServiceUserBankAccountRequest(
            String bankAccountID,
            String paymentServiceUserID) {
        this(Optional.empty(), bankAccountID, paymentServiceUserID);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<com.formance.formance_sdk.models.shared.V3ForwardPaymentServiceUserBankAccountRequest> v3ForwardPaymentServiceUserBankAccountRequest() {
        return (Optional<com.formance.formance_sdk.models.shared.V3ForwardPaymentServiceUserBankAccountRequest>) v3ForwardPaymentServiceUserBankAccountRequest;
    }

    /**
     * The bank account ID
     */
    @JsonIgnore
    public String bankAccountID() {
        return bankAccountID;
    }

    /**
     * The payment service user ID
     */
    @JsonIgnore
    public String paymentServiceUserID() {
        return paymentServiceUserID;
    }

    public static Builder builder() {
        return new Builder();
    }


    public V3ForwardPaymentServiceUserBankAccountRequest withV3ForwardPaymentServiceUserBankAccountRequest(com.formance.formance_sdk.models.shared.V3ForwardPaymentServiceUserBankAccountRequest v3ForwardPaymentServiceUserBankAccountRequest) {
        Utils.checkNotNull(v3ForwardPaymentServiceUserBankAccountRequest, "v3ForwardPaymentServiceUserBankAccountRequest");
        this.v3ForwardPaymentServiceUserBankAccountRequest = Optional.ofNullable(v3ForwardPaymentServiceUserBankAccountRequest);
        return this;
    }


    public V3ForwardPaymentServiceUserBankAccountRequest withV3ForwardPaymentServiceUserBankAccountRequest(Optional<? extends com.formance.formance_sdk.models.shared.V3ForwardPaymentServiceUserBankAccountRequest> v3ForwardPaymentServiceUserBankAccountRequest) {
        Utils.checkNotNull(v3ForwardPaymentServiceUserBankAccountRequest, "v3ForwardPaymentServiceUserBankAccountRequest");
        this.v3ForwardPaymentServiceUserBankAccountRequest = v3ForwardPaymentServiceUserBankAccountRequest;
        return this;
    }

    /**
     * The bank account ID
     */
    public V3ForwardPaymentServiceUserBankAccountRequest withBankAccountID(String bankAccountID) {
        Utils.checkNotNull(bankAccountID, "bankAccountID");
        this.bankAccountID = bankAccountID;
        return this;
    }

    /**
     * The payment service user ID
     */
    public V3ForwardPaymentServiceUserBankAccountRequest withPaymentServiceUserID(String paymentServiceUserID) {
        Utils.checkNotNull(paymentServiceUserID, "paymentServiceUserID");
        this.paymentServiceUserID = paymentServiceUserID;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3ForwardPaymentServiceUserBankAccountRequest other = (V3ForwardPaymentServiceUserBankAccountRequest) o;
        return 
            Utils.enhancedDeepEquals(this.v3ForwardPaymentServiceUserBankAccountRequest, other.v3ForwardPaymentServiceUserBankAccountRequest) &&
            Utils.enhancedDeepEquals(this.bankAccountID, other.bankAccountID) &&
            Utils.enhancedDeepEquals(this.paymentServiceUserID, other.paymentServiceUserID);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            v3ForwardPaymentServiceUserBankAccountRequest, bankAccountID, paymentServiceUserID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3ForwardPaymentServiceUserBankAccountRequest.class,
                "v3ForwardPaymentServiceUserBankAccountRequest", v3ForwardPaymentServiceUserBankAccountRequest,
                "bankAccountID", bankAccountID,
                "paymentServiceUserID", paymentServiceUserID);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends com.formance.formance_sdk.models.shared.V3ForwardPaymentServiceUserBankAccountRequest> v3ForwardPaymentServiceUserBankAccountRequest = Optional.empty();

        private String bankAccountID;

        private String paymentServiceUserID;

        private Builder() {
          // force use of static builder() method
        }


        public Builder v3ForwardPaymentServiceUserBankAccountRequest(com.formance.formance_sdk.models.shared.V3ForwardPaymentServiceUserBankAccountRequest v3ForwardPaymentServiceUserBankAccountRequest) {
            Utils.checkNotNull(v3ForwardPaymentServiceUserBankAccountRequest, "v3ForwardPaymentServiceUserBankAccountRequest");
            this.v3ForwardPaymentServiceUserBankAccountRequest = Optional.ofNullable(v3ForwardPaymentServiceUserBankAccountRequest);
            return this;
        }

        public Builder v3ForwardPaymentServiceUserBankAccountRequest(Optional<? extends com.formance.formance_sdk.models.shared.V3ForwardPaymentServiceUserBankAccountRequest> v3ForwardPaymentServiceUserBankAccountRequest) {
            Utils.checkNotNull(v3ForwardPaymentServiceUserBankAccountRequest, "v3ForwardPaymentServiceUserBankAccountRequest");
            this.v3ForwardPaymentServiceUserBankAccountRequest = v3ForwardPaymentServiceUserBankAccountRequest;
            return this;
        }


        /**
         * The bank account ID
         */
        public Builder bankAccountID(String bankAccountID) {
            Utils.checkNotNull(bankAccountID, "bankAccountID");
            this.bankAccountID = bankAccountID;
            return this;
        }


        /**
         * The payment service user ID
         */
        public Builder paymentServiceUserID(String paymentServiceUserID) {
            Utils.checkNotNull(paymentServiceUserID, "paymentServiceUserID");
            this.paymentServiceUserID = paymentServiceUserID;
            return this;
        }

        public V3ForwardPaymentServiceUserBankAccountRequest build() {

            return new V3ForwardPaymentServiceUserBankAccountRequest(
                v3ForwardPaymentServiceUserBankAccountRequest, bankAccountID, paymentServiceUserID);
        }

    }
}
