/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.models.shared.Connector;
import com.formance.formance_sdk.models.shared.TransferRequest;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class ConnectorsTransferRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private TransferRequest transferRequest;

    /**
     * The name of the connector.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connector")
    private Connector connector;

    @JsonCreator
    public ConnectorsTransferRequest(
            TransferRequest transferRequest,
            Connector connector) {
        Utils.checkNotNull(transferRequest, "transferRequest");
        Utils.checkNotNull(connector, "connector");
        this.transferRequest = transferRequest;
        this.connector = connector;
    }

    @JsonIgnore
    public TransferRequest transferRequest() {
        return transferRequest;
    }

    /**
     * The name of the connector.
     */
    @JsonIgnore
    public Connector connector() {
        return connector;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ConnectorsTransferRequest withTransferRequest(TransferRequest transferRequest) {
        Utils.checkNotNull(transferRequest, "transferRequest");
        this.transferRequest = transferRequest;
        return this;
    }

    /**
     * The name of the connector.
     */
    public ConnectorsTransferRequest withConnector(Connector connector) {
        Utils.checkNotNull(connector, "connector");
        this.connector = connector;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectorsTransferRequest other = (ConnectorsTransferRequest) o;
        return 
            Objects.deepEquals(this.transferRequest, other.transferRequest) &&
            Objects.deepEquals(this.connector, other.connector);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            transferRequest,
            connector);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectorsTransferRequest.class,
                "transferRequest", transferRequest,
                "connector", connector);
    }
    
    public final static class Builder {
 
        private TransferRequest transferRequest;
 
        private Connector connector;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder transferRequest(TransferRequest transferRequest) {
            Utils.checkNotNull(transferRequest, "transferRequest");
            this.transferRequest = transferRequest;
            return this;
        }

        /**
         * The name of the connector.
         */
        public Builder connector(Connector connector) {
            Utils.checkNotNull(connector, "connector");
            this.connector = connector;
            return this;
        }
        
        public ConnectorsTransferRequest build() {
            return new ConnectorsTransferRequest(
                transferRequest,
                connector);
        }
    }
}

