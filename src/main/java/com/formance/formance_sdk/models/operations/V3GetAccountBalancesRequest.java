/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;


public class V3GetAccountBalancesRequest {
    /**
     * The account ID
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountID")
    private String accountID;

    /**
     * The asset to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=asset")
    private Optional<String> asset;

    /**
     * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private Optional<String> cursor;

    /**
     * The start of the time range to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fromTimestamp")
    private Optional<OffsetDateTime> fromTimestamp;

    /**
     * The number of items to return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    private Optional<Long> pageSize;

    /**
     * The end of the time range to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=toTimestamp")
    private Optional<OffsetDateTime> toTimestamp;

    @JsonCreator
    public V3GetAccountBalancesRequest(
            String accountID,
            Optional<String> asset,
            Optional<String> cursor,
            Optional<OffsetDateTime> fromTimestamp,
            Optional<Long> pageSize,
            Optional<OffsetDateTime> toTimestamp) {
        Utils.checkNotNull(accountID, "accountID");
        Utils.checkNotNull(asset, "asset");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(fromTimestamp, "fromTimestamp");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(toTimestamp, "toTimestamp");
        this.accountID = accountID;
        this.asset = asset;
        this.cursor = cursor;
        this.fromTimestamp = fromTimestamp;
        this.pageSize = pageSize;
        this.toTimestamp = toTimestamp;
    }
    
    public V3GetAccountBalancesRequest(
            String accountID) {
        this(accountID, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The account ID
     */
    @JsonIgnore
    public String accountID() {
        return accountID;
    }

    /**
     * The asset to filter by
     */
    @JsonIgnore
    public Optional<String> asset() {
        return asset;
    }

    /**
     * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    /**
     * The start of the time range to filter by
     */
    @JsonIgnore
    public Optional<OffsetDateTime> fromTimestamp() {
        return fromTimestamp;
    }

    /**
     * The number of items to return
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    /**
     * The end of the time range to filter by
     */
    @JsonIgnore
    public Optional<OffsetDateTime> toTimestamp() {
        return toTimestamp;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The account ID
     */
    public V3GetAccountBalancesRequest withAccountID(String accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = accountID;
        return this;
    }

    /**
     * The asset to filter by
     */
    public V3GetAccountBalancesRequest withAsset(String asset) {
        Utils.checkNotNull(asset, "asset");
        this.asset = Optional.ofNullable(asset);
        return this;
    }


    /**
     * The asset to filter by
     */
    public V3GetAccountBalancesRequest withAsset(Optional<String> asset) {
        Utils.checkNotNull(asset, "asset");
        this.asset = asset;
        return this;
    }

    /**
     * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
     */
    public V3GetAccountBalancesRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }


    /**
     * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
     */
    public V3GetAccountBalancesRequest withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * The start of the time range to filter by
     */
    public V3GetAccountBalancesRequest withFromTimestamp(OffsetDateTime fromTimestamp) {
        Utils.checkNotNull(fromTimestamp, "fromTimestamp");
        this.fromTimestamp = Optional.ofNullable(fromTimestamp);
        return this;
    }


    /**
     * The start of the time range to filter by
     */
    public V3GetAccountBalancesRequest withFromTimestamp(Optional<OffsetDateTime> fromTimestamp) {
        Utils.checkNotNull(fromTimestamp, "fromTimestamp");
        this.fromTimestamp = fromTimestamp;
        return this;
    }

    /**
     * The number of items to return
     */
    public V3GetAccountBalancesRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }


    /**
     * The number of items to return
     */
    public V3GetAccountBalancesRequest withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * The end of the time range to filter by
     */
    public V3GetAccountBalancesRequest withToTimestamp(OffsetDateTime toTimestamp) {
        Utils.checkNotNull(toTimestamp, "toTimestamp");
        this.toTimestamp = Optional.ofNullable(toTimestamp);
        return this;
    }


    /**
     * The end of the time range to filter by
     */
    public V3GetAccountBalancesRequest withToTimestamp(Optional<OffsetDateTime> toTimestamp) {
        Utils.checkNotNull(toTimestamp, "toTimestamp");
        this.toTimestamp = toTimestamp;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3GetAccountBalancesRequest other = (V3GetAccountBalancesRequest) o;
        return 
            Utils.enhancedDeepEquals(this.accountID, other.accountID) &&
            Utils.enhancedDeepEquals(this.asset, other.asset) &&
            Utils.enhancedDeepEquals(this.cursor, other.cursor) &&
            Utils.enhancedDeepEquals(this.fromTimestamp, other.fromTimestamp) &&
            Utils.enhancedDeepEquals(this.pageSize, other.pageSize) &&
            Utils.enhancedDeepEquals(this.toTimestamp, other.toTimestamp);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountID, asset, cursor,
            fromTimestamp, pageSize, toTimestamp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3GetAccountBalancesRequest.class,
                "accountID", accountID,
                "asset", asset,
                "cursor", cursor,
                "fromTimestamp", fromTimestamp,
                "pageSize", pageSize,
                "toTimestamp", toTimestamp);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accountID;

        private Optional<String> asset = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<OffsetDateTime> fromTimestamp = Optional.empty();

        private Optional<Long> pageSize = Optional.empty();

        private Optional<OffsetDateTime> toTimestamp = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The account ID
         */
        public Builder accountID(String accountID) {
            Utils.checkNotNull(accountID, "accountID");
            this.accountID = accountID;
            return this;
        }


        /**
         * The asset to filter by
         */
        public Builder asset(String asset) {
            Utils.checkNotNull(asset, "asset");
            this.asset = Optional.ofNullable(asset);
            return this;
        }

        /**
         * The asset to filter by
         */
        public Builder asset(Optional<String> asset) {
            Utils.checkNotNull(asset, "asset");
            this.asset = asset;
            return this;
        }


        /**
         * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * Parameter used in pagination requests. Set to the value of next for the next page of results. Set to the value of previous for the previous page of results. No other parameters can be set when this parameter is set.
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }


        /**
         * The start of the time range to filter by
         */
        public Builder fromTimestamp(OffsetDateTime fromTimestamp) {
            Utils.checkNotNull(fromTimestamp, "fromTimestamp");
            this.fromTimestamp = Optional.ofNullable(fromTimestamp);
            return this;
        }

        /**
         * The start of the time range to filter by
         */
        public Builder fromTimestamp(Optional<OffsetDateTime> fromTimestamp) {
            Utils.checkNotNull(fromTimestamp, "fromTimestamp");
            this.fromTimestamp = fromTimestamp;
            return this;
        }


        /**
         * The number of items to return
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * The number of items to return
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }


        /**
         * The end of the time range to filter by
         */
        public Builder toTimestamp(OffsetDateTime toTimestamp) {
            Utils.checkNotNull(toTimestamp, "toTimestamp");
            this.toTimestamp = Optional.ofNullable(toTimestamp);
            return this;
        }

        /**
         * The end of the time range to filter by
         */
        public Builder toTimestamp(Optional<OffsetDateTime> toTimestamp) {
            Utils.checkNotNull(toTimestamp, "toTimestamp");
            this.toTimestamp = toTimestamp;
            return this;
        }

        public V3GetAccountBalancesRequest build() {

            return new V3GetAccountBalancesRequest(
                accountID, asset, cursor,
                fromTimestamp, pageSize, toTimestamp);
        }

    }
}
