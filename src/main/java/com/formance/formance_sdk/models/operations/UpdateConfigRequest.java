/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.formance.formance_sdk.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.models.shared.ConfigUser;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class UpdateConfigRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private ConfigUser configUser;

    /**
     * Config ID
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    @JsonCreator
    public UpdateConfigRequest(
            ConfigUser configUser,
            String id) {
        Utils.checkNotNull(configUser, "configUser");
        Utils.checkNotNull(id, "id");
        this.configUser = configUser;
        this.id = id;
    }

    @JsonIgnore
    public ConfigUser configUser() {
        return configUser;
    }

    /**
     * Config ID
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateConfigRequest withConfigUser(ConfigUser configUser) {
        Utils.checkNotNull(configUser, "configUser");
        this.configUser = configUser;
        return this;
    }

    /**
     * Config ID
     */
    public UpdateConfigRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateConfigRequest other = (UpdateConfigRequest) o;
        return 
            Objects.deepEquals(this.configUser, other.configUser) &&
            Objects.deepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            configUser,
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateConfigRequest.class,
                "configUser", configUser,
                "id", id);
    }
    
    public final static class Builder {
 
        private ConfigUser configUser;
 
        private String id;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder configUser(ConfigUser configUser) {
            Utils.checkNotNull(configUser, "configUser");
            this.configUser = configUser;
            return this;
        }

        /**
         * Config ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public UpdateConfigRequest build() {
            return new UpdateConfigRequest(
                configUser,
                id);
        }
    }
}

