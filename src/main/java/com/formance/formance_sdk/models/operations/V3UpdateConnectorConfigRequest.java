/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.models.shared.V3InstallConnectorRequest;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class V3UpdateConnectorConfigRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends V3InstallConnectorRequest> v3InstallConnectorRequest;

    /**
     * The connector ID
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connectorID")
    private String connectorID;

    @JsonCreator
    public V3UpdateConnectorConfigRequest(
            Optional<? extends V3InstallConnectorRequest> v3InstallConnectorRequest,
            String connectorID) {
        Utils.checkNotNull(v3InstallConnectorRequest, "v3InstallConnectorRequest");
        Utils.checkNotNull(connectorID, "connectorID");
        this.v3InstallConnectorRequest = v3InstallConnectorRequest;
        this.connectorID = connectorID;
    }
    
    public V3UpdateConnectorConfigRequest(
            String connectorID) {
        this(Optional.empty(), connectorID);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<V3InstallConnectorRequest> v3InstallConnectorRequest() {
        return (Optional<V3InstallConnectorRequest>) v3InstallConnectorRequest;
    }

    /**
     * The connector ID
     */
    @JsonIgnore
    public String connectorID() {
        return connectorID;
    }

    public static Builder builder() {
        return new Builder();
    }


    public V3UpdateConnectorConfigRequest withV3InstallConnectorRequest(V3InstallConnectorRequest v3InstallConnectorRequest) {
        Utils.checkNotNull(v3InstallConnectorRequest, "v3InstallConnectorRequest");
        this.v3InstallConnectorRequest = Optional.ofNullable(v3InstallConnectorRequest);
        return this;
    }


    public V3UpdateConnectorConfigRequest withV3InstallConnectorRequest(Optional<? extends V3InstallConnectorRequest> v3InstallConnectorRequest) {
        Utils.checkNotNull(v3InstallConnectorRequest, "v3InstallConnectorRequest");
        this.v3InstallConnectorRequest = v3InstallConnectorRequest;
        return this;
    }

    /**
     * The connector ID
     */
    public V3UpdateConnectorConfigRequest withConnectorID(String connectorID) {
        Utils.checkNotNull(connectorID, "connectorID");
        this.connectorID = connectorID;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3UpdateConnectorConfigRequest other = (V3UpdateConnectorConfigRequest) o;
        return 
            Utils.enhancedDeepEquals(this.v3InstallConnectorRequest, other.v3InstallConnectorRequest) &&
            Utils.enhancedDeepEquals(this.connectorID, other.connectorID);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            v3InstallConnectorRequest, connectorID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3UpdateConnectorConfigRequest.class,
                "v3InstallConnectorRequest", v3InstallConnectorRequest,
                "connectorID", connectorID);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends V3InstallConnectorRequest> v3InstallConnectorRequest = Optional.empty();

        private String connectorID;

        private Builder() {
          // force use of static builder() method
        }


        public Builder v3InstallConnectorRequest(V3InstallConnectorRequest v3InstallConnectorRequest) {
            Utils.checkNotNull(v3InstallConnectorRequest, "v3InstallConnectorRequest");
            this.v3InstallConnectorRequest = Optional.ofNullable(v3InstallConnectorRequest);
            return this;
        }

        public Builder v3InstallConnectorRequest(Optional<? extends V3InstallConnectorRequest> v3InstallConnectorRequest) {
            Utils.checkNotNull(v3InstallConnectorRequest, "v3InstallConnectorRequest");
            this.v3InstallConnectorRequest = v3InstallConnectorRequest;
            return this;
        }


        /**
         * The connector ID
         */
        public Builder connectorID(String connectorID) {
            Utils.checkNotNull(connectorID, "connectorID");
            this.connectorID = connectorID;
            return this;
        }

        public V3UpdateConnectorConfigRequest build() {

            return new V3UpdateConnectorConfigRequest(
                v3InstallConnectorRequest, connectorID);
        }

    }
}
