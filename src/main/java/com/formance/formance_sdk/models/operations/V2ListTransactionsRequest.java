/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class V2ListTransactionsRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends Map<String, Object>> requestBody;

    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private Optional<String> cursor;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=expand")
    private Optional<String> expand;

    /**
     * Name of the ledger.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=ledger")
    private String ledger;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order")
    private Optional<? extends Order> order;

    /**
     * The maximum number of results to return per page.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    private Optional<Long> pageSize;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pit")
    private Optional<OffsetDateTime> pit;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=reverse")
    private Optional<Boolean> reverse;

    @JsonCreator
    public V2ListTransactionsRequest(
            Optional<? extends Map<String, Object>> requestBody,
            Optional<String> cursor,
            Optional<String> expand,
            String ledger,
            Optional<? extends Order> order,
            Optional<Long> pageSize,
            Optional<OffsetDateTime> pit,
            Optional<Boolean> reverse) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(expand, "expand");
        Utils.checkNotNull(ledger, "ledger");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(pit, "pit");
        Utils.checkNotNull(reverse, "reverse");
        this.requestBody = requestBody;
        this.cursor = cursor;
        this.expand = expand;
        this.ledger = ledger;
        this.order = order;
        this.pageSize = pageSize;
        this.pit = pit;
        this.reverse = reverse;
    }
    
    public V2ListTransactionsRequest(
            String ledger) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), ledger, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> requestBody() {
        return (Optional<Map<String, Object>>) requestBody;
    }

    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     * 
     */
    @JsonIgnore
    public Optional<String> cursor() {
        return cursor;
    }

    @JsonIgnore
    public Optional<String> expand() {
        return expand;
    }

    /**
     * Name of the ledger.
     */
    @JsonIgnore
    public String ledger() {
        return ledger;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Order> order() {
        return (Optional<Order>) order;
    }

    /**
     * The maximum number of results to return per page.
     * 
     */
    @JsonIgnore
    public Optional<Long> pageSize() {
        return pageSize;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> pit() {
        return pit;
    }

    @JsonIgnore
    public Optional<Boolean> reverse() {
        return reverse;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V2ListTransactionsRequest withRequestBody(Map<String, Object> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    public V2ListTransactionsRequest withRequestBody(Optional<? extends Map<String, Object>> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     * 
     */
    public V2ListTransactionsRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     * 
     */
    public V2ListTransactionsRequest withCursor(Optional<String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    public V2ListTransactionsRequest withExpand(String expand) {
        Utils.checkNotNull(expand, "expand");
        this.expand = Optional.ofNullable(expand);
        return this;
    }

    public V2ListTransactionsRequest withExpand(Optional<String> expand) {
        Utils.checkNotNull(expand, "expand");
        this.expand = expand;
        return this;
    }

    /**
     * Name of the ledger.
     */
    public V2ListTransactionsRequest withLedger(String ledger) {
        Utils.checkNotNull(ledger, "ledger");
        this.ledger = ledger;
        return this;
    }

    public V2ListTransactionsRequest withOrder(Order order) {
        Utils.checkNotNull(order, "order");
        this.order = Optional.ofNullable(order);
        return this;
    }

    public V2ListTransactionsRequest withOrder(Optional<? extends Order> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    /**
     * The maximum number of results to return per page.
     * 
     */
    public V2ListTransactionsRequest withPageSize(long pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * The maximum number of results to return per page.
     * 
     */
    public V2ListTransactionsRequest withPageSize(Optional<Long> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    public V2ListTransactionsRequest withPit(OffsetDateTime pit) {
        Utils.checkNotNull(pit, "pit");
        this.pit = Optional.ofNullable(pit);
        return this;
    }

    public V2ListTransactionsRequest withPit(Optional<OffsetDateTime> pit) {
        Utils.checkNotNull(pit, "pit");
        this.pit = pit;
        return this;
    }

    public V2ListTransactionsRequest withReverse(boolean reverse) {
        Utils.checkNotNull(reverse, "reverse");
        this.reverse = Optional.ofNullable(reverse);
        return this;
    }

    public V2ListTransactionsRequest withReverse(Optional<Boolean> reverse) {
        Utils.checkNotNull(reverse, "reverse");
        this.reverse = reverse;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2ListTransactionsRequest other = (V2ListTransactionsRequest) o;
        return 
            Objects.deepEquals(this.requestBody, other.requestBody) &&
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.expand, other.expand) &&
            Objects.deepEquals(this.ledger, other.ledger) &&
            Objects.deepEquals(this.order, other.order) &&
            Objects.deepEquals(this.pageSize, other.pageSize) &&
            Objects.deepEquals(this.pit, other.pit) &&
            Objects.deepEquals(this.reverse, other.reverse);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestBody,
            cursor,
            expand,
            ledger,
            order,
            pageSize,
            pit,
            reverse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2ListTransactionsRequest.class,
                "requestBody", requestBody,
                "cursor", cursor,
                "expand", expand,
                "ledger", ledger,
                "order", order,
                "pageSize", pageSize,
                "pit", pit,
                "reverse", reverse);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, Object>> requestBody = Optional.empty();
 
        private Optional<String> cursor = Optional.empty();
 
        private Optional<String> expand = Optional.empty();
 
        private String ledger;
 
        private Optional<? extends Order> order = Optional.empty();
 
        private Optional<Long> pageSize = Optional.empty();
 
        private Optional<OffsetDateTime> pit = Optional.empty();
 
        private Optional<Boolean> reverse = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder requestBody(Map<String, Object> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends Map<String, Object>> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Parameter used in pagination requests. Maximum page size is set to 15.
         * Set to the value of next for the next page of results.
         * Set to the value of previous for the previous page of results.
         * No other parameters can be set when this parameter is set.
         * 
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * Parameter used in pagination requests. Maximum page size is set to 15.
         * Set to the value of next for the next page of results.
         * Set to the value of previous for the previous page of results.
         * No other parameters can be set when this parameter is set.
         * 
         */
        public Builder cursor(Optional<String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        public Builder expand(String expand) {
            Utils.checkNotNull(expand, "expand");
            this.expand = Optional.ofNullable(expand);
            return this;
        }

        public Builder expand(Optional<String> expand) {
            Utils.checkNotNull(expand, "expand");
            this.expand = expand;
            return this;
        }

        /**
         * Name of the ledger.
         */
        public Builder ledger(String ledger) {
            Utils.checkNotNull(ledger, "ledger");
            this.ledger = ledger;
            return this;
        }

        public Builder order(Order order) {
            Utils.checkNotNull(order, "order");
            this.order = Optional.ofNullable(order);
            return this;
        }

        public Builder order(Optional<? extends Order> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }

        /**
         * The maximum number of results to return per page.
         * 
         */
        public Builder pageSize(long pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * The maximum number of results to return per page.
         * 
         */
        public Builder pageSize(Optional<Long> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        public Builder pit(OffsetDateTime pit) {
            Utils.checkNotNull(pit, "pit");
            this.pit = Optional.ofNullable(pit);
            return this;
        }

        public Builder pit(Optional<OffsetDateTime> pit) {
            Utils.checkNotNull(pit, "pit");
            this.pit = pit;
            return this;
        }

        public Builder reverse(boolean reverse) {
            Utils.checkNotNull(reverse, "reverse");
            this.reverse = Optional.ofNullable(reverse);
            return this;
        }

        public Builder reverse(Optional<Boolean> reverse) {
            Utils.checkNotNull(reverse, "reverse");
            this.reverse = reverse;
            return this;
        }
        
        public V2ListTransactionsRequest build() {
            return new V2ListTransactionsRequest(
                requestBody,
                cursor,
                expand,
                ledger,
                order,
                pageSize,
                pit,
                reverse);
        }
    }
}

