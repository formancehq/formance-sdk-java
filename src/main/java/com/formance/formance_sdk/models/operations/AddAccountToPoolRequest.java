/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class AddAccountToPoolRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private com.formance.formance_sdk.models.shared.AddAccountToPoolRequest addAccountToPoolRequest;

    /**
     * The pool ID.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=poolId")
    private String poolId;

    @JsonCreator
    public AddAccountToPoolRequest(
            com.formance.formance_sdk.models.shared.AddAccountToPoolRequest addAccountToPoolRequest,
            String poolId) {
        Utils.checkNotNull(addAccountToPoolRequest, "addAccountToPoolRequest");
        Utils.checkNotNull(poolId, "poolId");
        this.addAccountToPoolRequest = addAccountToPoolRequest;
        this.poolId = poolId;
    }

    @JsonIgnore
    public com.formance.formance_sdk.models.shared.AddAccountToPoolRequest addAccountToPoolRequest() {
        return addAccountToPoolRequest;
    }

    /**
     * The pool ID.
     */
    @JsonIgnore
    public String poolId() {
        return poolId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AddAccountToPoolRequest withAddAccountToPoolRequest(com.formance.formance_sdk.models.shared.AddAccountToPoolRequest addAccountToPoolRequest) {
        Utils.checkNotNull(addAccountToPoolRequest, "addAccountToPoolRequest");
        this.addAccountToPoolRequest = addAccountToPoolRequest;
        return this;
    }

    /**
     * The pool ID.
     */
    public AddAccountToPoolRequest withPoolId(String poolId) {
        Utils.checkNotNull(poolId, "poolId");
        this.poolId = poolId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddAccountToPoolRequest other = (AddAccountToPoolRequest) o;
        return 
            Objects.deepEquals(this.addAccountToPoolRequest, other.addAccountToPoolRequest) &&
            Objects.deepEquals(this.poolId, other.poolId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            addAccountToPoolRequest,
            poolId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddAccountToPoolRequest.class,
                "addAccountToPoolRequest", addAccountToPoolRequest,
                "poolId", poolId);
    }
    
    public final static class Builder {
 
        private com.formance.formance_sdk.models.shared.AddAccountToPoolRequest addAccountToPoolRequest;
 
        private String poolId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder addAccountToPoolRequest(com.formance.formance_sdk.models.shared.AddAccountToPoolRequest addAccountToPoolRequest) {
            Utils.checkNotNull(addAccountToPoolRequest, "addAccountToPoolRequest");
            this.addAccountToPoolRequest = addAccountToPoolRequest;
            return this;
        }

        /**
         * The pool ID.
         */
        public Builder poolId(String poolId) {
            Utils.checkNotNull(poolId, "poolId");
            this.poolId = poolId;
            return this;
        }
        
        public AddAccountToPoolRequest build() {
            return new AddAccountToPoolRequest(
                addAccountToPoolRequest,
                poolId);
        }
    }
}

