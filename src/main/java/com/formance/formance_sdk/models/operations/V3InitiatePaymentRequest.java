/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.utils.LazySingletonValue;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class V3InitiatePaymentRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends com.formance.formance_sdk.models.shared.V3InitiatePaymentRequest> v3InitiatePaymentRequest;

    /**
     * If set to true, the request will not have to be validated. This is useful if we want to directly forward the request to the PSP.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=noValidation")
    private Optional<Boolean> noValidation;

    @JsonCreator
    public V3InitiatePaymentRequest(
            Optional<? extends com.formance.formance_sdk.models.shared.V3InitiatePaymentRequest> v3InitiatePaymentRequest,
            Optional<Boolean> noValidation) {
        Utils.checkNotNull(v3InitiatePaymentRequest, "v3InitiatePaymentRequest");
        Utils.checkNotNull(noValidation, "noValidation");
        this.v3InitiatePaymentRequest = v3InitiatePaymentRequest;
        this.noValidation = noValidation;
    }
    
    public V3InitiatePaymentRequest() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<com.formance.formance_sdk.models.shared.V3InitiatePaymentRequest> v3InitiatePaymentRequest() {
        return (Optional<com.formance.formance_sdk.models.shared.V3InitiatePaymentRequest>) v3InitiatePaymentRequest;
    }

    /**
     * If set to true, the request will not have to be validated. This is useful if we want to directly forward the request to the PSP.
     * 
     */
    @JsonIgnore
    public Optional<Boolean> noValidation() {
        return noValidation;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public V3InitiatePaymentRequest withV3InitiatePaymentRequest(com.formance.formance_sdk.models.shared.V3InitiatePaymentRequest v3InitiatePaymentRequest) {
        Utils.checkNotNull(v3InitiatePaymentRequest, "v3InitiatePaymentRequest");
        this.v3InitiatePaymentRequest = Optional.ofNullable(v3InitiatePaymentRequest);
        return this;
    }

    public V3InitiatePaymentRequest withV3InitiatePaymentRequest(Optional<? extends com.formance.formance_sdk.models.shared.V3InitiatePaymentRequest> v3InitiatePaymentRequest) {
        Utils.checkNotNull(v3InitiatePaymentRequest, "v3InitiatePaymentRequest");
        this.v3InitiatePaymentRequest = v3InitiatePaymentRequest;
        return this;
    }

    /**
     * If set to true, the request will not have to be validated. This is useful if we want to directly forward the request to the PSP.
     * 
     */
    public V3InitiatePaymentRequest withNoValidation(boolean noValidation) {
        Utils.checkNotNull(noValidation, "noValidation");
        this.noValidation = Optional.ofNullable(noValidation);
        return this;
    }

    /**
     * If set to true, the request will not have to be validated. This is useful if we want to directly forward the request to the PSP.
     * 
     */
    public V3InitiatePaymentRequest withNoValidation(Optional<Boolean> noValidation) {
        Utils.checkNotNull(noValidation, "noValidation");
        this.noValidation = noValidation;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V3InitiatePaymentRequest other = (V3InitiatePaymentRequest) o;
        return 
            Objects.deepEquals(this.v3InitiatePaymentRequest, other.v3InitiatePaymentRequest) &&
            Objects.deepEquals(this.noValidation, other.noValidation);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            v3InitiatePaymentRequest,
            noValidation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V3InitiatePaymentRequest.class,
                "v3InitiatePaymentRequest", v3InitiatePaymentRequest,
                "noValidation", noValidation);
    }
    
    public final static class Builder {
 
        private Optional<? extends com.formance.formance_sdk.models.shared.V3InitiatePaymentRequest> v3InitiatePaymentRequest = Optional.empty();
 
        private Optional<Boolean> noValidation;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder v3InitiatePaymentRequest(com.formance.formance_sdk.models.shared.V3InitiatePaymentRequest v3InitiatePaymentRequest) {
            Utils.checkNotNull(v3InitiatePaymentRequest, "v3InitiatePaymentRequest");
            this.v3InitiatePaymentRequest = Optional.ofNullable(v3InitiatePaymentRequest);
            return this;
        }

        public Builder v3InitiatePaymentRequest(Optional<? extends com.formance.formance_sdk.models.shared.V3InitiatePaymentRequest> v3InitiatePaymentRequest) {
            Utils.checkNotNull(v3InitiatePaymentRequest, "v3InitiatePaymentRequest");
            this.v3InitiatePaymentRequest = v3InitiatePaymentRequest;
            return this;
        }

        /**
         * If set to true, the request will not have to be validated. This is useful if we want to directly forward the request to the PSP.
         * 
         */
        public Builder noValidation(boolean noValidation) {
            Utils.checkNotNull(noValidation, "noValidation");
            this.noValidation = Optional.ofNullable(noValidation);
            return this;
        }

        /**
         * If set to true, the request will not have to be validated. This is useful if we want to directly forward the request to the PSP.
         * 
         */
        public Builder noValidation(Optional<Boolean> noValidation) {
            Utils.checkNotNull(noValidation, "noValidation");
            this.noValidation = noValidation;
            return this;
        }
        
        public V3InitiatePaymentRequest build() {
            if (noValidation == null) {
                noValidation = _SINGLETON_VALUE_NoValidation.value();
            }            return new V3InitiatePaymentRequest(
                v3InitiatePaymentRequest,
                noValidation);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_NoValidation =
                new LazySingletonValue<>(
                        "noValidation",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

