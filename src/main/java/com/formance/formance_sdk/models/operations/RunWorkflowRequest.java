/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class RunWorkflowRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends Map<String, String>> requestBody;

    /**
     * Wait end of the workflow before return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=wait")
    private Optional<Boolean> waitForExecution;

    /**
     * The flow id
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workflowID")
    private String workflowID;

    @JsonCreator
    public RunWorkflowRequest(
            Optional<? extends Map<String, String>> requestBody,
            Optional<Boolean> waitForExecution,
            String workflowID) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(waitForExecution, "waitForExecution");
        Utils.checkNotNull(workflowID, "workflowID");
        this.requestBody = requestBody;
        this.waitForExecution = waitForExecution;
        this.workflowID = workflowID;
    }
    
    public RunWorkflowRequest(
            String workflowID) {
        this(Optional.empty(), Optional.empty(), workflowID);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> requestBody() {
        return (Optional<Map<String, String>>) requestBody;
    }

    /**
     * Wait end of the workflow before return
     */
    @JsonIgnore
    public Optional<Boolean> waitForExecution() {
        return waitForExecution;
    }

    /**
     * The flow id
     */
    @JsonIgnore
    public String workflowID() {
        return workflowID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RunWorkflowRequest withRequestBody(Map<String, String> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    public RunWorkflowRequest withRequestBody(Optional<? extends Map<String, String>> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    /**
     * Wait end of the workflow before return
     */
    public RunWorkflowRequest withWaitForExecution(boolean waitForExecution) {
        Utils.checkNotNull(waitForExecution, "waitForExecution");
        this.waitForExecution = Optional.ofNullable(waitForExecution);
        return this;
    }

    /**
     * Wait end of the workflow before return
     */
    public RunWorkflowRequest withWaitForExecution(Optional<Boolean> waitForExecution) {
        Utils.checkNotNull(waitForExecution, "waitForExecution");
        this.waitForExecution = waitForExecution;
        return this;
    }

    /**
     * The flow id
     */
    public RunWorkflowRequest withWorkflowID(String workflowID) {
        Utils.checkNotNull(workflowID, "workflowID");
        this.workflowID = workflowID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RunWorkflowRequest other = (RunWorkflowRequest) o;
        return 
            Objects.deepEquals(this.requestBody, other.requestBody) &&
            Objects.deepEquals(this.waitForExecution, other.waitForExecution) &&
            Objects.deepEquals(this.workflowID, other.workflowID);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestBody,
            waitForExecution,
            workflowID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RunWorkflowRequest.class,
                "requestBody", requestBody,
                "waitForExecution", waitForExecution,
                "workflowID", workflowID);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, String>> requestBody = Optional.empty();
 
        private Optional<Boolean> waitForExecution = Optional.empty();
 
        private String workflowID;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder requestBody(Map<String, String> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends Map<String, String>> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Wait end of the workflow before return
         */
        public Builder waitForExecution(boolean waitForExecution) {
            Utils.checkNotNull(waitForExecution, "waitForExecution");
            this.waitForExecution = Optional.ofNullable(waitForExecution);
            return this;
        }

        /**
         * Wait end of the workflow before return
         */
        public Builder waitForExecution(Optional<Boolean> waitForExecution) {
            Utils.checkNotNull(waitForExecution, "waitForExecution");
            this.waitForExecution = waitForExecution;
            return this;
        }

        /**
         * The flow id
         */
        public Builder workflowID(String workflowID) {
            Utils.checkNotNull(workflowID, "workflowID");
            this.workflowID = workflowID;
            return this;
        }
        
        public RunWorkflowRequest build() {
            return new RunWorkflowRequest(
                requestBody,
                waitForExecution,
                workflowID);
        }
    }
}

