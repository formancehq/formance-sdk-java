/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class RunWorkflowRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends java.util.Map<String, String>> requestBody;

    /**
     * Wait end of the workflow before return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=wait")
    private Optional<? extends Boolean> wait;

    /**
     * The flow id
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workflowID")
    private String workflowID;

    public RunWorkflowRequest(
            Optional<? extends java.util.Map<String, String>> requestBody,
            Optional<? extends Boolean> wait,
            String workflowID) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(wait, "wait");
        Utils.checkNotNull(workflowID, "workflowID");
        this.requestBody = requestBody;
        this.wait = wait;
        this.workflowID = workflowID;
    }

    public Optional<? extends java.util.Map<String, String>> requestBody() {
        return requestBody;
    }

    /**
     * Wait end of the workflow before return
     */
    public Optional<? extends Boolean> wait() {
        return wait;
    }

    /**
     * The flow id
     */
    public String workflowID() {
        return workflowID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RunWorkflowRequest withRequestBody(java.util.Map<String, String> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    public RunWorkflowRequest withRequestBody(Optional<? extends java.util.Map<String, String>> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    /**
     * Wait end of the workflow before return
     */
    public RunWorkflowRequest withWait(boolean wait) {
        Utils.checkNotNull(wait, "wait");
        this.wait = Optional.ofNullable(wait);
        return this;
    }

    /**
     * Wait end of the workflow before return
     */
    public RunWorkflowRequest withWait(Optional<? extends Boolean> wait) {
        Utils.checkNotNull(wait, "wait");
        this.wait = wait;
        return this;
    }

    /**
     * The flow id
     */
    public RunWorkflowRequest withWorkflowID(String workflowID) {
        Utils.checkNotNull(workflowID, "workflowID");
        this.workflowID = workflowID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RunWorkflowRequest other = (RunWorkflowRequest) o;
        return 
            java.util.Objects.deepEquals(this.requestBody, other.requestBody) &&
            java.util.Objects.deepEquals(this.wait, other.wait) &&
            java.util.Objects.deepEquals(this.workflowID, other.workflowID);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            requestBody,
            wait,
            workflowID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RunWorkflowRequest.class,
                "requestBody", requestBody,
                "wait", wait,
                "workflowID", workflowID);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.Map<String, String>> requestBody = Optional.empty();
 
        private Optional<? extends Boolean> wait = Optional.empty();
 
        private String workflowID;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder requestBody(java.util.Map<String, String> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends java.util.Map<String, String>> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Wait end of the workflow before return
         */
        public Builder wait(boolean wait) {
            Utils.checkNotNull(wait, "wait");
            this.wait = Optional.ofNullable(wait);
            return this;
        }

        /**
         * Wait end of the workflow before return
         */
        public Builder wait(Optional<? extends Boolean> wait) {
            Utils.checkNotNull(wait, "wait");
            this.wait = wait;
            return this;
        }

        /**
         * The flow id
         */
        public Builder workflowID(String workflowID) {
            Utils.checkNotNull(workflowID, "workflowID");
            this.workflowID = workflowID;
            return this;
        }
        
        public RunWorkflowRequest build() {
            return new RunWorkflowRequest(
                requestBody,
                wait,
                workflowID);
        }
    }
}

