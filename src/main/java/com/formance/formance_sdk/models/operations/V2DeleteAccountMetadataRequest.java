/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class V2DeleteAccountMetadataRequest {
    /**
     * Use an idempotency key
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Idempotency-Key")
    private Optional<String> idempotencyKey;

    /**
     * Account address
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=address")
    private String address;

    /**
     * The key to remove.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=key")
    private String key;

    /**
     * Name of the ledger.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=ledger")
    private String ledger;

    @JsonCreator
    public V2DeleteAccountMetadataRequest(
            Optional<String> idempotencyKey,
            String address,
            String key,
            String ledger) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(ledger, "ledger");
        this.idempotencyKey = idempotencyKey;
        this.address = address;
        this.key = key;
        this.ledger = ledger;
    }
    
    public V2DeleteAccountMetadataRequest(
            String address,
            String key,
            String ledger) {
        this(Optional.empty(), address, key,
            ledger);
    }

    /**
     * Use an idempotency key
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    /**
     * Account address
     */
    @JsonIgnore
    public String address() {
        return address;
    }

    /**
     * The key to remove.
     */
    @JsonIgnore
    public String key() {
        return key;
    }

    /**
     * Name of the ledger.
     */
    @JsonIgnore
    public String ledger() {
        return ledger;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Use an idempotency key
     */
    public V2DeleteAccountMetadataRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }


    /**
     * Use an idempotency key
     */
    public V2DeleteAccountMetadataRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    /**
     * Account address
     */
    public V2DeleteAccountMetadataRequest withAddress(String address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    /**
     * The key to remove.
     */
    public V2DeleteAccountMetadataRequest withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * Name of the ledger.
     */
    public V2DeleteAccountMetadataRequest withLedger(String ledger) {
        Utils.checkNotNull(ledger, "ledger");
        this.ledger = ledger;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V2DeleteAccountMetadataRequest other = (V2DeleteAccountMetadataRequest) o;
        return 
            Utils.enhancedDeepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Utils.enhancedDeepEquals(this.address, other.address) &&
            Utils.enhancedDeepEquals(this.key, other.key) &&
            Utils.enhancedDeepEquals(this.ledger, other.ledger);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            idempotencyKey, address, key,
            ledger);
    }
    
    @Override
    public String toString() {
        return Utils.toString(V2DeleteAccountMetadataRequest.class,
                "idempotencyKey", idempotencyKey,
                "address", address,
                "key", key,
                "ledger", ledger);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> idempotencyKey = Optional.empty();

        private String address;

        private String key;

        private String ledger;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Use an idempotency key
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * Use an idempotency key
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }


        /**
         * Account address
         */
        public Builder address(String address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }


        /**
         * The key to remove.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }


        /**
         * Name of the ledger.
         */
        public Builder ledger(String ledger) {
            Utils.checkNotNull(ledger, "ledger");
            this.ledger = ledger;
            return this;
        }

        public V2DeleteAccountMetadataRequest build() {

            return new V2DeleteAccountMetadataRequest(
                idempotencyKey, address, key,
                ledger);
        }

    }
}
