/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.formance.formance_sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.formance.formance_sdk.utils.SpeakeasyMetadata;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class CreditWalletRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends com.formance.formance_sdk.models.shared.CreditWalletRequest> creditWalletRequest;

    /**
     * Use an idempotency key
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Idempotency-Key")
    private Optional<String> idempotencyKey;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    @JsonCreator
    public CreditWalletRequest(
            Optional<? extends com.formance.formance_sdk.models.shared.CreditWalletRequest> creditWalletRequest,
            Optional<String> idempotencyKey,
            String id) {
        Utils.checkNotNull(creditWalletRequest, "creditWalletRequest");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(id, "id");
        this.creditWalletRequest = creditWalletRequest;
        this.idempotencyKey = idempotencyKey;
        this.id = id;
    }
    
    public CreditWalletRequest(
            String id) {
        this(Optional.empty(), Optional.empty(), id);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<com.formance.formance_sdk.models.shared.CreditWalletRequest> creditWalletRequest() {
        return (Optional<com.formance.formance_sdk.models.shared.CreditWalletRequest>) creditWalletRequest;
    }

    /**
     * Use an idempotency key
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreditWalletRequest withCreditWalletRequest(com.formance.formance_sdk.models.shared.CreditWalletRequest creditWalletRequest) {
        Utils.checkNotNull(creditWalletRequest, "creditWalletRequest");
        this.creditWalletRequest = Optional.ofNullable(creditWalletRequest);
        return this;
    }

    public CreditWalletRequest withCreditWalletRequest(Optional<? extends com.formance.formance_sdk.models.shared.CreditWalletRequest> creditWalletRequest) {
        Utils.checkNotNull(creditWalletRequest, "creditWalletRequest");
        this.creditWalletRequest = creditWalletRequest;
        return this;
    }

    /**
     * Use an idempotency key
     */
    public CreditWalletRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }

    /**
     * Use an idempotency key
     */
    public CreditWalletRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    public CreditWalletRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreditWalletRequest other = (CreditWalletRequest) o;
        return 
            Objects.deepEquals(this.creditWalletRequest, other.creditWalletRequest) &&
            Objects.deepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Objects.deepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            creditWalletRequest,
            idempotencyKey,
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreditWalletRequest.class,
                "creditWalletRequest", creditWalletRequest,
                "idempotencyKey", idempotencyKey,
                "id", id);
    }
    
    public final static class Builder {
 
        private Optional<? extends com.formance.formance_sdk.models.shared.CreditWalletRequest> creditWalletRequest = Optional.empty();
 
        private Optional<String> idempotencyKey = Optional.empty();
 
        private String id;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder creditWalletRequest(com.formance.formance_sdk.models.shared.CreditWalletRequest creditWalletRequest) {
            Utils.checkNotNull(creditWalletRequest, "creditWalletRequest");
            this.creditWalletRequest = Optional.ofNullable(creditWalletRequest);
            return this;
        }

        public Builder creditWalletRequest(Optional<? extends com.formance.formance_sdk.models.shared.CreditWalletRequest> creditWalletRequest) {
            Utils.checkNotNull(creditWalletRequest, "creditWalletRequest");
            this.creditWalletRequest = creditWalletRequest;
            return this;
        }

        /**
         * Use an idempotency key
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * Use an idempotency key
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public CreditWalletRequest build() {
            return new CreditWalletRequest(
                creditWalletRequest,
                idempotencyKey,
                id);
        }
    }
}

