/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.formance.formance_sdk.models.shared.WebhooksErrorsEnum;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


@SuppressWarnings("serial")
public class WebhooksErrorResponse extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    private Optional<String> details;


    @JsonProperty("errorCode")
    private WebhooksErrorsEnum errorCode;


    @JsonProperty("errorMessage")
    private String errorMessage;

    @JsonCreator
    public WebhooksErrorResponse(
            @JsonProperty("details") Optional<String> details,
            @JsonProperty("errorCode") WebhooksErrorsEnum errorCode,
            @JsonProperty("errorMessage") String errorMessage) {
        super("API error occurred");
        Utils.checkNotNull(details, "details");
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.details = details;
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
    }
    
    public WebhooksErrorResponse(
            WebhooksErrorsEnum errorCode,
            String errorMessage) {
        this(Optional.empty(), errorCode, errorMessage);
    }

    @JsonIgnore
    public Optional<String> details() {
        return details;
    }

    @JsonIgnore
    public WebhooksErrorsEnum errorCode() {
        return errorCode;
    }

    @JsonIgnore
    public String errorMessage() {
        return errorMessage;
    }

    public static Builder builder() {
        return new Builder();
    }


    public WebhooksErrorResponse withDetails(String details) {
        Utils.checkNotNull(details, "details");
        this.details = Optional.ofNullable(details);
        return this;
    }


    public WebhooksErrorResponse withDetails(Optional<String> details) {
        Utils.checkNotNull(details, "details");
        this.details = details;
        return this;
    }

    public WebhooksErrorResponse withErrorCode(WebhooksErrorsEnum errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    public WebhooksErrorResponse withErrorMessage(String errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = errorMessage;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhooksErrorResponse other = (WebhooksErrorResponse) o;
        return 
            Utils.enhancedDeepEquals(this.details, other.details) &&
            Utils.enhancedDeepEquals(this.errorCode, other.errorCode) &&
            Utils.enhancedDeepEquals(this.errorMessage, other.errorMessage);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            details, errorCode, errorMessage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhooksErrorResponse.class,
                "details", details,
                "errorCode", errorCode,
                "errorMessage", errorMessage);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> details = Optional.empty();

        private WebhooksErrorsEnum errorCode;

        private String errorMessage;

        private Builder() {
          // force use of static builder() method
        }


        public Builder details(String details) {
            Utils.checkNotNull(details, "details");
            this.details = Optional.ofNullable(details);
            return this;
        }

        public Builder details(Optional<String> details) {
            Utils.checkNotNull(details, "details");
            this.details = details;
            return this;
        }


        public Builder errorCode(WebhooksErrorsEnum errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }


        public Builder errorMessage(String errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = errorMessage;
            return this;
        }

        public WebhooksErrorResponse build() {

            return new WebhooksErrorResponse(
                details, errorCode, errorMessage);
        }

    }
}

