/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;
import static com.formance.formance_sdk.operations.Operations.RequestlessOperation;

import com.formance.formance_sdk.models.operations.GetMetricsRequestBuilder;
import com.formance.formance_sdk.models.operations.GetMetricsResponse;
import com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionRequest;
import com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionRequestBuilder;
import com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionResponse;
import com.formance.formance_sdk.models.operations.V2AddMetadataToAccountRequest;
import com.formance.formance_sdk.models.operations.V2AddMetadataToAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.V2AddMetadataToAccountResponse;
import com.formance.formance_sdk.models.operations.V2CountAccountsRequest;
import com.formance.formance_sdk.models.operations.V2CountAccountsRequestBuilder;
import com.formance.formance_sdk.models.operations.V2CountAccountsResponse;
import com.formance.formance_sdk.models.operations.V2CountTransactionsRequest;
import com.formance.formance_sdk.models.operations.V2CountTransactionsRequestBuilder;
import com.formance.formance_sdk.models.operations.V2CountTransactionsResponse;
import com.formance.formance_sdk.models.operations.V2CreateBulkRequest;
import com.formance.formance_sdk.models.operations.V2CreateBulkRequestBuilder;
import com.formance.formance_sdk.models.operations.V2CreateBulkResponse;
import com.formance.formance_sdk.models.operations.V2CreateLedgerRequest;
import com.formance.formance_sdk.models.operations.V2CreateLedgerRequestBuilder;
import com.formance.formance_sdk.models.operations.V2CreateLedgerResponse;
import com.formance.formance_sdk.models.operations.V2CreateTransactionRequest;
import com.formance.formance_sdk.models.operations.V2CreateTransactionRequestBuilder;
import com.formance.formance_sdk.models.operations.V2CreateTransactionResponse;
import com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataRequest;
import com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataRequestBuilder;
import com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataResponse;
import com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataRequest;
import com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataRequestBuilder;
import com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataResponse;
import com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataRequest;
import com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataRequestBuilder;
import com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataResponse;
import com.formance.formance_sdk.models.operations.V2ExportLogsRequest;
import com.formance.formance_sdk.models.operations.V2ExportLogsRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ExportLogsResponse;
import com.formance.formance_sdk.models.operations.V2GetAccountRequest;
import com.formance.formance_sdk.models.operations.V2GetAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetAccountResponse;
import com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedRequest;
import com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedResponse;
import com.formance.formance_sdk.models.operations.V2GetInfoRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetInfoResponse;
import com.formance.formance_sdk.models.operations.V2GetLedgerInfoRequest;
import com.formance.formance_sdk.models.operations.V2GetLedgerInfoRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetLedgerInfoResponse;
import com.formance.formance_sdk.models.operations.V2GetLedgerRequest;
import com.formance.formance_sdk.models.operations.V2GetLedgerRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetLedgerResponse;
import com.formance.formance_sdk.models.operations.V2GetTransactionRequest;
import com.formance.formance_sdk.models.operations.V2GetTransactionRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetTransactionResponse;
import com.formance.formance_sdk.models.operations.V2GetVolumesWithBalancesRequest;
import com.formance.formance_sdk.models.operations.V2GetVolumesWithBalancesRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetVolumesWithBalancesResponse;
import com.formance.formance_sdk.models.operations.V2ImportLogsRequest;
import com.formance.formance_sdk.models.operations.V2ImportLogsRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ImportLogsResponse;
import com.formance.formance_sdk.models.operations.V2ListAccountsRequest;
import com.formance.formance_sdk.models.operations.V2ListAccountsRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ListAccountsResponse;
import com.formance.formance_sdk.models.operations.V2ListLedgersRequest;
import com.formance.formance_sdk.models.operations.V2ListLedgersRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ListLedgersResponse;
import com.formance.formance_sdk.models.operations.V2ListLogsRequest;
import com.formance.formance_sdk.models.operations.V2ListLogsRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ListLogsResponse;
import com.formance.formance_sdk.models.operations.V2ListTransactionsRequest;
import com.formance.formance_sdk.models.operations.V2ListTransactionsRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ListTransactionsResponse;
import com.formance.formance_sdk.models.operations.V2ReadStatsRequest;
import com.formance.formance_sdk.models.operations.V2ReadStatsRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ReadStatsResponse;
import com.formance.formance_sdk.models.operations.V2RevertTransactionRequest;
import com.formance.formance_sdk.models.operations.V2RevertTransactionRequestBuilder;
import com.formance.formance_sdk.models.operations.V2RevertTransactionResponse;
import com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataRequest;
import com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataRequestBuilder;
import com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataResponse;
import com.formance.formance_sdk.operations.GetMetrics;
import com.formance.formance_sdk.operations.V2AddMetadataOnTransaction;
import com.formance.formance_sdk.operations.V2AddMetadataToAccount;
import com.formance.formance_sdk.operations.V2CountAccounts;
import com.formance.formance_sdk.operations.V2CountTransactions;
import com.formance.formance_sdk.operations.V2CreateBulk;
import com.formance.formance_sdk.operations.V2CreateLedger;
import com.formance.formance_sdk.operations.V2CreateTransaction;
import com.formance.formance_sdk.operations.V2DeleteAccountMetadata;
import com.formance.formance_sdk.operations.V2DeleteLedgerMetadata;
import com.formance.formance_sdk.operations.V2DeleteTransactionMetadata;
import com.formance.formance_sdk.operations.V2ExportLogs;
import com.formance.formance_sdk.operations.V2GetAccount;
import com.formance.formance_sdk.operations.V2GetBalancesAggregated;
import com.formance.formance_sdk.operations.V2GetInfo;
import com.formance.formance_sdk.operations.V2GetLedger;
import com.formance.formance_sdk.operations.V2GetLedgerInfo;
import com.formance.formance_sdk.operations.V2GetTransaction;
import com.formance.formance_sdk.operations.V2GetVolumesWithBalances;
import com.formance.formance_sdk.operations.V2ImportLogs;
import com.formance.formance_sdk.operations.V2ListAccounts;
import com.formance.formance_sdk.operations.V2ListLedgers;
import com.formance.formance_sdk.operations.V2ListLogs;
import com.formance.formance_sdk.operations.V2ListTransactions;
import com.formance.formance_sdk.operations.V2ReadStats;
import com.formance.formance_sdk.operations.V2RevertTransaction;
import com.formance.formance_sdk.operations.V2UpdateLedgerMetadata;
import java.lang.Exception;


public class LedgerV2 {
    private final SDKConfiguration sdkConfiguration;

    LedgerV2(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Set the metadata of a transaction by its ID
     * 
     * @return The call builder
     */
    public V2AddMetadataOnTransactionRequestBuilder addMetadataOnTransaction() {
        return new V2AddMetadataOnTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Set the metadata of a transaction by its ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2AddMetadataOnTransactionResponse addMetadataOnTransaction(V2AddMetadataOnTransactionRequest request) throws Exception {
        RequestOperation<V2AddMetadataOnTransactionRequest, V2AddMetadataOnTransactionResponse> operation
              = new V2AddMetadataOnTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Add metadata to an account
     * 
     * @return The call builder
     */
    public V2AddMetadataToAccountRequestBuilder addMetadataToAccount() {
        return new V2AddMetadataToAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Add metadata to an account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2AddMetadataToAccountResponse addMetadataToAccount(V2AddMetadataToAccountRequest request) throws Exception {
        RequestOperation<V2AddMetadataToAccountRequest, V2AddMetadataToAccountResponse> operation
              = new V2AddMetadataToAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Count the accounts from a ledger
     * 
     * @return The call builder
     */
    public V2CountAccountsRequestBuilder countAccounts() {
        return new V2CountAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * Count the accounts from a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2CountAccountsResponse countAccounts(V2CountAccountsRequest request) throws Exception {
        RequestOperation<V2CountAccountsRequest, V2CountAccountsResponse> operation
              = new V2CountAccounts.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Count the transactions from a ledger
     * 
     * @return The call builder
     */
    public V2CountTransactionsRequestBuilder countTransactions() {
        return new V2CountTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Count the transactions from a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2CountTransactionsResponse countTransactions(V2CountTransactionsRequest request) throws Exception {
        RequestOperation<V2CountTransactionsRequest, V2CountTransactionsResponse> operation
              = new V2CountTransactions.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Bulk request
     * 
     * @return The call builder
     */
    public V2CreateBulkRequestBuilder createBulk() {
        return new V2CreateBulkRequestBuilder(sdkConfiguration);
    }

    /**
     * Bulk request
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2CreateBulkResponse createBulk(V2CreateBulkRequest request) throws Exception {
        RequestOperation<V2CreateBulkRequest, V2CreateBulkResponse> operation
              = new V2CreateBulk.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a ledger
     * 
     * @return The call builder
     */
    public V2CreateLedgerRequestBuilder createLedger() {
        return new V2CreateLedgerRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2CreateLedgerResponse createLedger(V2CreateLedgerRequest request) throws Exception {
        RequestOperation<V2CreateLedgerRequest, V2CreateLedgerResponse> operation
              = new V2CreateLedger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a new transaction to a ledger
     * 
     * @return The call builder
     */
    public V2CreateTransactionRequestBuilder createTransaction() {
        return new V2CreateTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a new transaction to a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2CreateTransactionResponse createTransaction(V2CreateTransactionRequest request) throws Exception {
        RequestOperation<V2CreateTransactionRequest, V2CreateTransactionResponse> operation
              = new V2CreateTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete metadata by key
     * 
     * <p>Delete metadata by key
     * 
     * @return The call builder
     */
    public V2DeleteAccountMetadataRequestBuilder deleteAccountMetadata() {
        return new V2DeleteAccountMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete metadata by key
     * 
     * <p>Delete metadata by key
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2DeleteAccountMetadataResponse deleteAccountMetadata(V2DeleteAccountMetadataRequest request) throws Exception {
        RequestOperation<V2DeleteAccountMetadataRequest, V2DeleteAccountMetadataResponse> operation
              = new V2DeleteAccountMetadata.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete ledger metadata by key
     * 
     * @return The call builder
     */
    public V2DeleteLedgerMetadataRequestBuilder deleteLedgerMetadata() {
        return new V2DeleteLedgerMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete ledger metadata by key
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2DeleteLedgerMetadataResponse deleteLedgerMetadata(V2DeleteLedgerMetadataRequest request) throws Exception {
        RequestOperation<V2DeleteLedgerMetadataRequest, V2DeleteLedgerMetadataResponse> operation
              = new V2DeleteLedgerMetadata.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete metadata by key
     * 
     * <p>Delete metadata by key
     * 
     * @return The call builder
     */
    public V2DeleteTransactionMetadataRequestBuilder deleteTransactionMetadata() {
        return new V2DeleteTransactionMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete metadata by key
     * 
     * <p>Delete metadata by key
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2DeleteTransactionMetadataResponse deleteTransactionMetadata(V2DeleteTransactionMetadataRequest request) throws Exception {
        RequestOperation<V2DeleteTransactionMetadataRequest, V2DeleteTransactionMetadataResponse> operation
              = new V2DeleteTransactionMetadata.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Export logs
     * 
     * @return The call builder
     */
    public V2ExportLogsRequestBuilder exportLogs() {
        return new V2ExportLogsRequestBuilder(sdkConfiguration);
    }

    /**
     * Export logs
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ExportLogsResponse exportLogs(V2ExportLogsRequest request) throws Exception {
        RequestOperation<V2ExportLogsRequest, V2ExportLogsResponse> operation
              = new V2ExportLogs.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get account by its address
     * 
     * @return The call builder
     */
    public V2GetAccountRequestBuilder getAccount() {
        return new V2GetAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get account by its address
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetAccountResponse getAccount(V2GetAccountRequest request) throws Exception {
        RequestOperation<V2GetAccountRequest, V2GetAccountResponse> operation
              = new V2GetAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get the aggregated balances from selected accounts
     * 
     * @return The call builder
     */
    public V2GetBalancesAggregatedRequestBuilder getBalancesAggregated() {
        return new V2GetBalancesAggregatedRequestBuilder(sdkConfiguration);
    }

    /**
     * Get the aggregated balances from selected accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetBalancesAggregatedResponse getBalancesAggregated(V2GetBalancesAggregatedRequest request) throws Exception {
        RequestOperation<V2GetBalancesAggregatedRequest, V2GetBalancesAggregatedResponse> operation
              = new V2GetBalancesAggregated.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Show server information
     * 
     * @return The call builder
     */
    public V2GetInfoRequestBuilder getInfo() {
        return new V2GetInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Show server information
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetInfoResponse getInfoDirect() throws Exception {
        RequestlessOperation<V2GetInfoResponse> operation
            = new V2GetInfo.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get a ledger
     * 
     * @return The call builder
     */
    public V2GetLedgerRequestBuilder getLedger() {
        return new V2GetLedgerRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetLedgerResponse getLedger(V2GetLedgerRequest request) throws Exception {
        RequestOperation<V2GetLedgerRequest, V2GetLedgerResponse> operation
              = new V2GetLedger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get information about a ledger
     * 
     * @return The call builder
     */
    public V2GetLedgerInfoRequestBuilder getLedgerInfo() {
        return new V2GetLedgerInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get information about a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetLedgerInfoResponse getLedgerInfo(V2GetLedgerInfoRequest request) throws Exception {
        RequestOperation<V2GetLedgerInfoRequest, V2GetLedgerInfoResponse> operation
              = new V2GetLedgerInfo.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Read in memory metrics
     * 
     * @return The call builder
     */
    public GetMetricsRequestBuilder getMetrics() {
        return new GetMetricsRequestBuilder(sdkConfiguration);
    }

    /**
     * Read in memory metrics
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetMetricsResponse getMetricsDirect() throws Exception {
        RequestlessOperation<GetMetricsResponse> operation
            = new GetMetrics.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get transaction from a ledger by its ID
     * 
     * @return The call builder
     */
    public V2GetTransactionRequestBuilder getTransaction() {
        return new V2GetTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get transaction from a ledger by its ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetTransactionResponse getTransaction(V2GetTransactionRequest request) throws Exception {
        RequestOperation<V2GetTransactionRequest, V2GetTransactionResponse> operation
              = new V2GetTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get list of volumes with balances for (account/asset)
     * 
     * @return The call builder
     */
    public V2GetVolumesWithBalancesRequestBuilder getVolumesWithBalances() {
        return new V2GetVolumesWithBalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get list of volumes with balances for (account/asset)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetVolumesWithBalancesResponse getVolumesWithBalances(V2GetVolumesWithBalancesRequest request) throws Exception {
        RequestOperation<V2GetVolumesWithBalancesRequest, V2GetVolumesWithBalancesResponse> operation
              = new V2GetVolumesWithBalances.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns a builder to make a request.
     * 
     * @return The call builder
     */
    public V2ImportLogsRequestBuilder importLogs() {
        return new V2ImportLogsRequestBuilder(sdkConfiguration);
    }

    /**
     * Makes a request.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ImportLogsResponse importLogs(V2ImportLogsRequest request) throws Exception {
        RequestOperation<V2ImportLogsRequest, V2ImportLogsResponse> operation
              = new V2ImportLogs.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List accounts from a ledger
     * 
     * <p>List accounts from a ledger, sorted by address in descending order.
     * 
     * @return The call builder
     */
    public V2ListAccountsRequestBuilder listAccounts() {
        return new V2ListAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List accounts from a ledger
     * 
     * <p>List accounts from a ledger, sorted by address in descending order.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ListAccountsResponse listAccounts(V2ListAccountsRequest request) throws Exception {
        RequestOperation<V2ListAccountsRequest, V2ListAccountsResponse> operation
              = new V2ListAccounts.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List ledgers
     * 
     * @return The call builder
     */
    public V2ListLedgersRequestBuilder listLedgers() {
        return new V2ListLedgersRequestBuilder(sdkConfiguration);
    }

    /**
     * List ledgers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ListLedgersResponse listLedgers(V2ListLedgersRequest request) throws Exception {
        RequestOperation<V2ListLedgersRequest, V2ListLedgersResponse> operation
              = new V2ListLedgers.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List the logs from a ledger
     * 
     * <p>List the logs from a ledger, sorted by ID in descending order.
     * 
     * @return The call builder
     */
    public V2ListLogsRequestBuilder listLogs() {
        return new V2ListLogsRequestBuilder(sdkConfiguration);
    }

    /**
     * List the logs from a ledger
     * 
     * <p>List the logs from a ledger, sorted by ID in descending order.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ListLogsResponse listLogs(V2ListLogsRequest request) throws Exception {
        RequestOperation<V2ListLogsRequest, V2ListLogsResponse> operation
              = new V2ListLogs.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List transactions from a ledger
     * 
     * <p>List transactions from a ledger, sorted by id in descending order.
     * 
     * @return The call builder
     */
    public V2ListTransactionsRequestBuilder listTransactions() {
        return new V2ListTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List transactions from a ledger
     * 
     * <p>List transactions from a ledger, sorted by id in descending order.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ListTransactionsResponse listTransactions(V2ListTransactionsRequest request) throws Exception {
        RequestOperation<V2ListTransactionsRequest, V2ListTransactionsResponse> operation
              = new V2ListTransactions.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get statistics from a ledger
     * 
     * <p>Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     * 
     * @return The call builder
     */
    public V2ReadStatsRequestBuilder readStats() {
        return new V2ReadStatsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get statistics from a ledger
     * 
     * <p>Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ReadStatsResponse readStats(V2ReadStatsRequest request) throws Exception {
        RequestOperation<V2ReadStatsRequest, V2ReadStatsResponse> operation
              = new V2ReadStats.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revert a ledger transaction by its ID
     * 
     * @return The call builder
     */
    public V2RevertTransactionRequestBuilder revertTransaction() {
        return new V2RevertTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Revert a ledger transaction by its ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2RevertTransactionResponse revertTransaction(V2RevertTransactionRequest request) throws Exception {
        RequestOperation<V2RevertTransactionRequest, V2RevertTransactionResponse> operation
              = new V2RevertTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update ledger metadata
     * 
     * @return The call builder
     */
    public V2UpdateLedgerMetadataRequestBuilder updateLedgerMetadata() {
        return new V2UpdateLedgerMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Update ledger metadata
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2UpdateLedgerMetadataResponse updateLedgerMetadata(V2UpdateLedgerMetadataRequest request) throws Exception {
        RequestOperation<V2UpdateLedgerMetadataRequest, V2UpdateLedgerMetadataResponse> operation
              = new V2UpdateLedgerMetadata.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
