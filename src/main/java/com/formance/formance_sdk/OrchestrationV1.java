/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;
import static com.formance.formance_sdk.operations.Operations.RequestlessOperation;

import com.formance.formance_sdk.models.operations.CancelEventRequest;
import com.formance.formance_sdk.models.operations.CancelEventRequestBuilder;
import com.formance.formance_sdk.models.operations.CancelEventResponse;
import com.formance.formance_sdk.models.operations.CreateTriggerRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateTriggerResponse;
import com.formance.formance_sdk.models.operations.CreateWorkflowRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateWorkflowResponse;
import com.formance.formance_sdk.models.operations.DeleteTriggerRequest;
import com.formance.formance_sdk.models.operations.DeleteTriggerRequestBuilder;
import com.formance.formance_sdk.models.operations.DeleteTriggerResponse;
import com.formance.formance_sdk.models.operations.DeleteWorkflowRequest;
import com.formance.formance_sdk.models.operations.DeleteWorkflowRequestBuilder;
import com.formance.formance_sdk.models.operations.DeleteWorkflowResponse;
import com.formance.formance_sdk.models.operations.GetInstanceHistoryRequest;
import com.formance.formance_sdk.models.operations.GetInstanceHistoryRequestBuilder;
import com.formance.formance_sdk.models.operations.GetInstanceHistoryResponse;
import com.formance.formance_sdk.models.operations.GetInstanceRequest;
import com.formance.formance_sdk.models.operations.GetInstanceRequestBuilder;
import com.formance.formance_sdk.models.operations.GetInstanceResponse;
import com.formance.formance_sdk.models.operations.GetInstanceStageHistoryRequest;
import com.formance.formance_sdk.models.operations.GetInstanceStageHistoryRequestBuilder;
import com.formance.formance_sdk.models.operations.GetInstanceStageHistoryResponse;
import com.formance.formance_sdk.models.operations.GetWorkflowRequest;
import com.formance.formance_sdk.models.operations.GetWorkflowRequestBuilder;
import com.formance.formance_sdk.models.operations.GetWorkflowResponse;
import com.formance.formance_sdk.models.operations.ListInstancesRequest;
import com.formance.formance_sdk.models.operations.ListInstancesRequestBuilder;
import com.formance.formance_sdk.models.operations.ListInstancesResponse;
import com.formance.formance_sdk.models.operations.ListTriggersOccurrencesRequest;
import com.formance.formance_sdk.models.operations.ListTriggersOccurrencesRequestBuilder;
import com.formance.formance_sdk.models.operations.ListTriggersOccurrencesResponse;
import com.formance.formance_sdk.models.operations.ListTriggersRequest;
import com.formance.formance_sdk.models.operations.ListTriggersRequestBuilder;
import com.formance.formance_sdk.models.operations.ListTriggersResponse;
import com.formance.formance_sdk.models.operations.ListWorkflowsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListWorkflowsResponse;
import com.formance.formance_sdk.models.operations.OrchestrationgetServerInfoRequestBuilder;
import com.formance.formance_sdk.models.operations.OrchestrationgetServerInfoResponse;
import com.formance.formance_sdk.models.operations.ReadTriggerRequest;
import com.formance.formance_sdk.models.operations.ReadTriggerRequestBuilder;
import com.formance.formance_sdk.models.operations.ReadTriggerResponse;
import com.formance.formance_sdk.models.operations.RunWorkflowRequest;
import com.formance.formance_sdk.models.operations.RunWorkflowRequestBuilder;
import com.formance.formance_sdk.models.operations.RunWorkflowResponse;
import com.formance.formance_sdk.models.operations.SendEventRequest;
import com.formance.formance_sdk.models.operations.SendEventRequestBuilder;
import com.formance.formance_sdk.models.operations.SendEventResponse;
import com.formance.formance_sdk.models.shared.TriggerData;
import com.formance.formance_sdk.models.shared.WorkflowConfig;
import com.formance.formance_sdk.operations.CancelEvent;
import com.formance.formance_sdk.operations.CreateTrigger;
import com.formance.formance_sdk.operations.CreateWorkflow;
import com.formance.formance_sdk.operations.DeleteTrigger;
import com.formance.formance_sdk.operations.DeleteWorkflow;
import com.formance.formance_sdk.operations.GetInstance;
import com.formance.formance_sdk.operations.GetInstanceHistory;
import com.formance.formance_sdk.operations.GetInstanceStageHistory;
import com.formance.formance_sdk.operations.GetWorkflow;
import com.formance.formance_sdk.operations.ListInstances;
import com.formance.formance_sdk.operations.ListTriggers;
import com.formance.formance_sdk.operations.ListTriggersOccurrences;
import com.formance.formance_sdk.operations.ListWorkflows;
import com.formance.formance_sdk.operations.OrchestrationgetServerInfo;
import com.formance.formance_sdk.operations.ReadTrigger;
import com.formance.formance_sdk.operations.RunWorkflow;
import com.formance.formance_sdk.operations.SendEvent;
import java.lang.Exception;
import java.util.Optional;


public class OrchestrationV1 {
    private final SDKConfiguration sdkConfiguration;

    OrchestrationV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Cancel a running workflow
     * 
     * <p>Cancel a running workflow
     * 
     * @return The call builder
     */
    public CancelEventRequestBuilder cancelEvent() {
        return new CancelEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel a running workflow
     * 
     * <p>Cancel a running workflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelEventResponse cancelEvent(CancelEventRequest request) throws Exception {
        RequestOperation<CancelEventRequest, CancelEventResponse> operation
              = new CancelEvent.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create trigger
     * 
     * <p>Create trigger
     * 
     * @return The call builder
     */
    public CreateTriggerRequestBuilder createTrigger() {
        return new CreateTriggerRequestBuilder(sdkConfiguration);
    }

    /**
     * Create trigger
     * 
     * <p>Create trigger
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTriggerResponse createTriggerDirect() throws Exception {
        return createTrigger(Optional.empty());
    }

    /**
     * Create trigger
     * 
     * <p>Create trigger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTriggerResponse createTrigger(Optional<? extends TriggerData> request) throws Exception {
        RequestOperation<Optional<? extends TriggerData>, CreateTriggerResponse> operation
              = new CreateTrigger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create workflow
     * 
     * <p>Create a workflow
     * 
     * @return The call builder
     */
    public CreateWorkflowRequestBuilder createWorkflow() {
        return new CreateWorkflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Create workflow
     * 
     * <p>Create a workflow
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWorkflowResponse createWorkflowDirect() throws Exception {
        return createWorkflow(Optional.empty());
    }

    /**
     * Create workflow
     * 
     * <p>Create a workflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWorkflowResponse createWorkflow(Optional<? extends WorkflowConfig> request) throws Exception {
        RequestOperation<Optional<? extends WorkflowConfig>, CreateWorkflowResponse> operation
              = new CreateWorkflow.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete trigger
     * 
     * <p>Read trigger
     * 
     * @return The call builder
     */
    public DeleteTriggerRequestBuilder deleteTrigger() {
        return new DeleteTriggerRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete trigger
     * 
     * <p>Read trigger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteTriggerResponse deleteTrigger(DeleteTriggerRequest request) throws Exception {
        RequestOperation<DeleteTriggerRequest, DeleteTriggerResponse> operation
              = new DeleteTrigger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a flow by id
     * 
     * <p>Delete a flow by id
     * 
     * @return The call builder
     */
    public DeleteWorkflowRequestBuilder deleteWorkflow() {
        return new DeleteWorkflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a flow by id
     * 
     * <p>Delete a flow by id
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteWorkflowResponse deleteWorkflow(DeleteWorkflowRequest request) throws Exception {
        RequestOperation<DeleteWorkflowRequest, DeleteWorkflowResponse> operation
              = new DeleteWorkflow.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a workflow instance by id
     * 
     * <p>Get a workflow instance by id
     * 
     * @return The call builder
     */
    public GetInstanceRequestBuilder getInstance() {
        return new GetInstanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a workflow instance by id
     * 
     * <p>Get a workflow instance by id
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetInstanceResponse getInstance(GetInstanceRequest request) throws Exception {
        RequestOperation<GetInstanceRequest, GetInstanceResponse> operation
              = new GetInstance.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a workflow instance history by id
     * 
     * <p>Get a workflow instance history by id
     * 
     * @return The call builder
     */
    public GetInstanceHistoryRequestBuilder getInstanceHistory() {
        return new GetInstanceHistoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a workflow instance history by id
     * 
     * <p>Get a workflow instance history by id
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetInstanceHistoryResponse getInstanceHistory(GetInstanceHistoryRequest request) throws Exception {
        RequestOperation<GetInstanceHistoryRequest, GetInstanceHistoryResponse> operation
              = new GetInstanceHistory.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a workflow instance stage history
     * 
     * <p>Get a workflow instance stage history
     * 
     * @return The call builder
     */
    public GetInstanceStageHistoryRequestBuilder getInstanceStageHistory() {
        return new GetInstanceStageHistoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a workflow instance stage history
     * 
     * <p>Get a workflow instance stage history
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetInstanceStageHistoryResponse getInstanceStageHistory(GetInstanceStageHistoryRequest request) throws Exception {
        RequestOperation<GetInstanceStageHistoryRequest, GetInstanceStageHistoryResponse> operation
              = new GetInstanceStageHistory.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a flow by id
     * 
     * <p>Get a flow by id
     * 
     * @return The call builder
     */
    public GetWorkflowRequestBuilder getWorkflow() {
        return new GetWorkflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a flow by id
     * 
     * <p>Get a flow by id
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkflowResponse getWorkflow(GetWorkflowRequest request) throws Exception {
        RequestOperation<GetWorkflowRequest, GetWorkflowResponse> operation
              = new GetWorkflow.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List instances of a workflow
     * 
     * <p>List instances of a workflow
     * 
     * @return The call builder
     */
    public ListInstancesRequestBuilder listInstances() {
        return new ListInstancesRequestBuilder(sdkConfiguration);
    }

    /**
     * List instances of a workflow
     * 
     * <p>List instances of a workflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListInstancesResponse listInstances(ListInstancesRequest request) throws Exception {
        RequestOperation<ListInstancesRequest, ListInstancesResponse> operation
              = new ListInstances.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List triggers
     * 
     * <p>List triggers
     * 
     * @return The call builder
     */
    public ListTriggersRequestBuilder listTriggers() {
        return new ListTriggersRequestBuilder(sdkConfiguration);
    }

    /**
     * List triggers
     * 
     * <p>List triggers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTriggersResponse listTriggers(ListTriggersRequest request) throws Exception {
        RequestOperation<ListTriggersRequest, ListTriggersResponse> operation
              = new ListTriggers.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List triggers occurrences
     * 
     * <p>List triggers occurrences
     * 
     * @return The call builder
     */
    public ListTriggersOccurrencesRequestBuilder listTriggersOccurrences() {
        return new ListTriggersOccurrencesRequestBuilder(sdkConfiguration);
    }

    /**
     * List triggers occurrences
     * 
     * <p>List triggers occurrences
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTriggersOccurrencesResponse listTriggersOccurrences(ListTriggersOccurrencesRequest request) throws Exception {
        RequestOperation<ListTriggersOccurrencesRequest, ListTriggersOccurrencesResponse> operation
              = new ListTriggersOccurrences.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List registered workflows
     * 
     * <p>List registered workflows
     * 
     * @return The call builder
     */
    public ListWorkflowsRequestBuilder listWorkflows() {
        return new ListWorkflowsRequestBuilder(sdkConfiguration);
    }

    /**
     * List registered workflows
     * 
     * <p>List registered workflows
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListWorkflowsResponse listWorkflowsDirect() throws Exception {
        RequestlessOperation<ListWorkflowsResponse> operation
            = new ListWorkflows.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get server info
     * 
     * @return The call builder
     */
    public OrchestrationgetServerInfoRequestBuilder orchestrationgetServerInfo() {
        return new OrchestrationgetServerInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get server info
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public OrchestrationgetServerInfoResponse orchestrationgetServerInfoDirect() throws Exception {
        RequestlessOperation<OrchestrationgetServerInfoResponse> operation
            = new OrchestrationgetServerInfo.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Read trigger
     * 
     * <p>Read trigger
     * 
     * @return The call builder
     */
    public ReadTriggerRequestBuilder readTrigger() {
        return new ReadTriggerRequestBuilder(sdkConfiguration);
    }

    /**
     * Read trigger
     * 
     * <p>Read trigger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ReadTriggerResponse readTrigger(ReadTriggerRequest request) throws Exception {
        RequestOperation<ReadTriggerRequest, ReadTriggerResponse> operation
              = new ReadTrigger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Run workflow
     * 
     * <p>Run workflow
     * 
     * @return The call builder
     */
    public RunWorkflowRequestBuilder runWorkflow() {
        return new RunWorkflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Run workflow
     * 
     * <p>Run workflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RunWorkflowResponse runWorkflow(RunWorkflowRequest request) throws Exception {
        RequestOperation<RunWorkflowRequest, RunWorkflowResponse> operation
              = new RunWorkflow.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Send an event to a running workflow
     * 
     * <p>Send an event to a running workflow
     * 
     * @return The call builder
     */
    public SendEventRequestBuilder sendEvent() {
        return new SendEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Send an event to a running workflow
     * 
     * <p>Send an event to a running workflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SendEventResponse sendEvent(SendEventRequest request) throws Exception {
        RequestOperation<SendEventRequest, SendEventResponse> operation
              = new SendEvent.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
