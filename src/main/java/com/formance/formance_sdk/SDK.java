/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestlessOperation;

import com.fasterxml.jackson.annotation.JsonValue;
import com.formance.formance_sdk.models.operations.GetVersionsRequestBuilder;
import com.formance.formance_sdk.models.operations.GetVersionsResponse;
import com.formance.formance_sdk.operations.GetVersions;
import com.formance.formance_sdk.utils.HTTPClient;
import com.formance.formance_sdk.utils.Hook.SdkInitData;
import com.formance.formance_sdk.utils.RetryConfig;
import com.formance.formance_sdk.utils.SpeakeasyHTTPClient;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Consumer;

/**
 * Formance Stack API: Open, modular foundation for unique payments flows
 * 
 * <p># Introduction
 * This API is documented in **OpenAPI format**.
 * 
 * <p># Authentication
 * Formance Stack offers one forms of authentication:
 *   - OAuth2
 * OAuth2 - an open protocol to allow secure authorization in a simple
 * and standard method from web, mobile and desktop applications.
 * &lt;SecurityDefinitions /&gt;
 */
public class SDK {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        /**
         * local server
         */
        "http://localhost",
        /**
         * A per-organization and per-environment API
         */
        "https://{organization}.{environment}.formance.cloud",
    };


    private final Auth auth;


    private final Ledger ledger;


    private final Orchestration orchestration;


    private final Payments payments;


    private final Reconciliation reconciliation;


    private final Search search;


    private final Wallets wallets;


    private final Webhooks webhooks;


    public Auth auth() {
        return auth;
    }


    public Ledger ledger() {
        return ledger;
    }


    public Orchestration orchestration() {
        return orchestration;
    }


    public Payments payments() {
        return payments;
    }


    public Reconciliation reconciliation() {
        return reconciliation;
    }


    public Search search() {
        return search;
    }


    public Wallets wallets() {
        return wallets;
    }


    public Webhooks webhooks() {
        return webhooks;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();
        private String serverUrl;
        private String server;
        

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.setClient(client);
            return this;
        }
        
        /**
         * Configures the SDK to use the provided security details.
         *
         * @param security The security details to use for all requests. Can be {@code null}.
         * @return The builder instance.
         */
        public Builder security(com.formance.formance_sdk.models.shared.Security security) {
            this.sdkConfiguration.setSecuritySource(SecuritySource.of(security));
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         *
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            Utils.checkNotNull(securitySource, "securitySource");
            this.sdkConfiguration.setSecuritySource(securitySource);
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.setServerIdx(serverIdx);
            this.serverUrl= SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.setRetryConfig(Optional.of(retryConfig));
            return this;
        }

        /**
         * Enables debug logging for HTTP requests and responses, including JSON body content.
         * <p>
         * Convenience method that calls {@link HTTPClient#enableDebugLogging(boolean)}.
         * {@link SpeakeasyHTTPClient} honors this setting. If you are using a custom HTTP client,
         * it is up to the custom client to honor this setting.
         * </p>
         *
         * @param enabled Whether to enable debug logging.
         * @return The builder instance.
         */
        public Builder enableHTTPDebugLogging(boolean enabled) {
            this.sdkConfiguration.client().enableDebugLogging(enabled);
            return this;
        }

        /**
         * ServerEnvironment
         * 
         * <p>The environment name. Defaults to the production environment.
         */
        public enum ServerEnvironment {
            EU_SANDBOX("eu.sandbox"),
            SANDBOX("sandbox"),
            EU_WEST1("eu-west-1"),
            US_EAST1("us-east-1");

            @JsonValue    
            private final String value;

            private ServerEnvironment(String value) {
                this.value = value;
            }

            public String value() {
                return value;
            }

            public static Optional<ServerEnvironment> fromValue(String value) {
                for (ServerEnvironment o: ServerEnvironment.values()) {
                    if (Objects.deepEquals(o.value, value)) {
                        return Optional.of(o);
                    }
                }
                return Optional.empty();
            }
        }
        /**
         * Sets the environment variable for url substitution.
         *
         * @param environment The value to set.
         * @return The builder instance.
         */
        public Builder environment(ServerEnvironment environment) {
            for (Map<String, String> server : this.sdkConfiguration.serverVariables()) {
                if (!server.containsKey("environment")) {
                    continue;
                }
                server.put("environment", environment.toString());
            }

            return this;
        }
        
        /**
         * Sets the organization variable for url substitution.
         *
         * @param organization The value to set.
         * @return The builder instance.
         */
        public Builder organization(String organization) {
            for (Map<String, String> server : this.sdkConfiguration.serverVariables()) {
                if (!server.containsKey("organization")) {
                    continue;
                }
                server.put("organization", organization.toString());
            }

            return this;
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(com.formance.formance_sdk.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super com.formance.formance_sdk.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }
        
        /**
         * Builds a new instance of the SDK.
         *
         * @return The SDK instance.
         */
        public SDK build() {
            if (serverUrl == null || serverUrl.isBlank()) {
                serverUrl = SERVERS[0];
                sdkConfiguration.setServerIdx(0);
            }
            sdkConfiguration.setServerUrl(serverUrl);
            return new SDK(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     *
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private SDK(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.sdkConfiguration.initialize();
        this.auth = new Auth(sdkConfiguration);
        this.ledger = new Ledger(sdkConfiguration);
        this.orchestration = new Orchestration(sdkConfiguration);
        this.payments = new Payments(sdkConfiguration);
        this.reconciliation = new Reconciliation(sdkConfiguration);
        this.search = new Search(sdkConfiguration);
        this.wallets = new Wallets(sdkConfiguration);
        this.webhooks = new Webhooks(sdkConfiguration);
        SdkInitData data = this.sdkConfiguration.hooks().sdkInit(
                new SdkInitData(
                        this.sdkConfiguration.resolvedServerUrl(), 
                        this.sdkConfiguration.client()));
        this.sdkConfiguration.setServerUrl(data.baseUrl());
        this.sdkConfiguration.setClient(data.client());
    }
    /**
     * Show stack version information
     * 
     * @return The call builder
     */
    public GetVersionsRequestBuilder getVersions() {
        return new GetVersionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Show stack version information
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetVersionsResponse getVersionsDirect() throws Exception {
        RequestlessOperation<GetVersionsResponse> operation
            = new GetVersions.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

}
