/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;
import static com.formance.formance_sdk.operations.Operations.RequestlessOperation;

import com.formance.formance_sdk.models.operations.TestTriggerRequest;
import com.formance.formance_sdk.models.operations.TestTriggerRequestBuilder;
import com.formance.formance_sdk.models.operations.TestTriggerResponse;
import com.formance.formance_sdk.models.operations.V2CancelEventRequest;
import com.formance.formance_sdk.models.operations.V2CancelEventRequestBuilder;
import com.formance.formance_sdk.models.operations.V2CancelEventResponse;
import com.formance.formance_sdk.models.operations.V2CreateTriggerRequestBuilder;
import com.formance.formance_sdk.models.operations.V2CreateTriggerResponse;
import com.formance.formance_sdk.models.operations.V2CreateWorkflowRequestBuilder;
import com.formance.formance_sdk.models.operations.V2CreateWorkflowResponse;
import com.formance.formance_sdk.models.operations.V2DeleteTriggerRequest;
import com.formance.formance_sdk.models.operations.V2DeleteTriggerRequestBuilder;
import com.formance.formance_sdk.models.operations.V2DeleteTriggerResponse;
import com.formance.formance_sdk.models.operations.V2DeleteWorkflowRequest;
import com.formance.formance_sdk.models.operations.V2DeleteWorkflowRequestBuilder;
import com.formance.formance_sdk.models.operations.V2DeleteWorkflowResponse;
import com.formance.formance_sdk.models.operations.V2GetInstanceHistoryRequest;
import com.formance.formance_sdk.models.operations.V2GetInstanceHistoryRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetInstanceHistoryResponse;
import com.formance.formance_sdk.models.operations.V2GetInstanceRequest;
import com.formance.formance_sdk.models.operations.V2GetInstanceRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetInstanceResponse;
import com.formance.formance_sdk.models.operations.V2GetInstanceStageHistoryRequest;
import com.formance.formance_sdk.models.operations.V2GetInstanceStageHistoryRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetInstanceStageHistoryResponse;
import com.formance.formance_sdk.models.operations.V2GetServerInfoRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetServerInfoResponse;
import com.formance.formance_sdk.models.operations.V2GetWorkflowRequest;
import com.formance.formance_sdk.models.operations.V2GetWorkflowRequestBuilder;
import com.formance.formance_sdk.models.operations.V2GetWorkflowResponse;
import com.formance.formance_sdk.models.operations.V2ListInstancesRequest;
import com.formance.formance_sdk.models.operations.V2ListInstancesRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ListInstancesResponse;
import com.formance.formance_sdk.models.operations.V2ListTriggersOccurrencesRequest;
import com.formance.formance_sdk.models.operations.V2ListTriggersOccurrencesRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ListTriggersOccurrencesResponse;
import com.formance.formance_sdk.models.operations.V2ListTriggersRequest;
import com.formance.formance_sdk.models.operations.V2ListTriggersRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ListTriggersResponse;
import com.formance.formance_sdk.models.operations.V2ListWorkflowsRequest;
import com.formance.formance_sdk.models.operations.V2ListWorkflowsRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ListWorkflowsResponse;
import com.formance.formance_sdk.models.operations.V2ReadTriggerRequest;
import com.formance.formance_sdk.models.operations.V2ReadTriggerRequestBuilder;
import com.formance.formance_sdk.models.operations.V2ReadTriggerResponse;
import com.formance.formance_sdk.models.operations.V2RunWorkflowRequest;
import com.formance.formance_sdk.models.operations.V2RunWorkflowRequestBuilder;
import com.formance.formance_sdk.models.operations.V2RunWorkflowResponse;
import com.formance.formance_sdk.models.operations.V2SendEventRequest;
import com.formance.formance_sdk.models.operations.V2SendEventRequestBuilder;
import com.formance.formance_sdk.models.operations.V2SendEventResponse;
import com.formance.formance_sdk.models.shared.V2TriggerData;
import com.formance.formance_sdk.models.shared.V2WorkflowConfig;
import com.formance.formance_sdk.operations.TestTrigger;
import com.formance.formance_sdk.operations.V2CancelEvent;
import com.formance.formance_sdk.operations.V2CreateTrigger;
import com.formance.formance_sdk.operations.V2CreateWorkflow;
import com.formance.formance_sdk.operations.V2DeleteTrigger;
import com.formance.formance_sdk.operations.V2DeleteWorkflow;
import com.formance.formance_sdk.operations.V2GetInstance;
import com.formance.formance_sdk.operations.V2GetInstanceHistory;
import com.formance.formance_sdk.operations.V2GetInstanceStageHistory;
import com.formance.formance_sdk.operations.V2GetServerInfo;
import com.formance.formance_sdk.operations.V2GetWorkflow;
import com.formance.formance_sdk.operations.V2ListInstances;
import com.formance.formance_sdk.operations.V2ListTriggers;
import com.formance.formance_sdk.operations.V2ListTriggersOccurrences;
import com.formance.formance_sdk.operations.V2ListWorkflows;
import com.formance.formance_sdk.operations.V2ReadTrigger;
import com.formance.formance_sdk.operations.V2RunWorkflow;
import com.formance.formance_sdk.operations.V2SendEvent;
import java.lang.Exception;
import java.util.Optional;


public class OrchestrationV2 {
    private final SDKConfiguration sdkConfiguration;

    OrchestrationV2(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Cancel a running workflow
     * 
     * <p>Cancel a running workflow
     * 
     * @return The call builder
     */
    public V2CancelEventRequestBuilder cancelEvent() {
        return new V2CancelEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel a running workflow
     * 
     * <p>Cancel a running workflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2CancelEventResponse cancelEvent(V2CancelEventRequest request) throws Exception {
        RequestOperation<V2CancelEventRequest, V2CancelEventResponse> operation
              = new V2CancelEvent.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create trigger
     * 
     * <p>Create trigger
     * 
     * @return The call builder
     */
    public V2CreateTriggerRequestBuilder createTrigger() {
        return new V2CreateTriggerRequestBuilder(sdkConfiguration);
    }

    /**
     * Create trigger
     * 
     * <p>Create trigger
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2CreateTriggerResponse createTriggerDirect() throws Exception {
        return createTrigger(Optional.empty());
    }

    /**
     * Create trigger
     * 
     * <p>Create trigger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2CreateTriggerResponse createTrigger(Optional<? extends V2TriggerData> request) throws Exception {
        RequestOperation<Optional<? extends V2TriggerData>, V2CreateTriggerResponse> operation
              = new V2CreateTrigger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create workflow
     * 
     * <p>Create a workflow
     * 
     * @return The call builder
     */
    public V2CreateWorkflowRequestBuilder createWorkflow() {
        return new V2CreateWorkflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Create workflow
     * 
     * <p>Create a workflow
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2CreateWorkflowResponse createWorkflowDirect() throws Exception {
        return createWorkflow(Optional.empty());
    }

    /**
     * Create workflow
     * 
     * <p>Create a workflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2CreateWorkflowResponse createWorkflow(Optional<? extends V2WorkflowConfig> request) throws Exception {
        RequestOperation<Optional<? extends V2WorkflowConfig>, V2CreateWorkflowResponse> operation
              = new V2CreateWorkflow.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete trigger
     * 
     * <p>Read trigger
     * 
     * @return The call builder
     */
    public V2DeleteTriggerRequestBuilder deleteTrigger() {
        return new V2DeleteTriggerRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete trigger
     * 
     * <p>Read trigger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2DeleteTriggerResponse deleteTrigger(V2DeleteTriggerRequest request) throws Exception {
        RequestOperation<V2DeleteTriggerRequest, V2DeleteTriggerResponse> operation
              = new V2DeleteTrigger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a flow by id
     * 
     * <p>Delete a flow by id
     * 
     * @return The call builder
     */
    public V2DeleteWorkflowRequestBuilder deleteWorkflow() {
        return new V2DeleteWorkflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a flow by id
     * 
     * <p>Delete a flow by id
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2DeleteWorkflowResponse deleteWorkflow(V2DeleteWorkflowRequest request) throws Exception {
        RequestOperation<V2DeleteWorkflowRequest, V2DeleteWorkflowResponse> operation
              = new V2DeleteWorkflow.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a workflow instance by id
     * 
     * <p>Get a workflow instance by id
     * 
     * @return The call builder
     */
    public V2GetInstanceRequestBuilder getInstance() {
        return new V2GetInstanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a workflow instance by id
     * 
     * <p>Get a workflow instance by id
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetInstanceResponse getInstance(V2GetInstanceRequest request) throws Exception {
        RequestOperation<V2GetInstanceRequest, V2GetInstanceResponse> operation
              = new V2GetInstance.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a workflow instance history by id
     * 
     * <p>Get a workflow instance history by id
     * 
     * @return The call builder
     */
    public V2GetInstanceHistoryRequestBuilder getInstanceHistory() {
        return new V2GetInstanceHistoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a workflow instance history by id
     * 
     * <p>Get a workflow instance history by id
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetInstanceHistoryResponse getInstanceHistory(V2GetInstanceHistoryRequest request) throws Exception {
        RequestOperation<V2GetInstanceHistoryRequest, V2GetInstanceHistoryResponse> operation
              = new V2GetInstanceHistory.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a workflow instance stage history
     * 
     * <p>Get a workflow instance stage history
     * 
     * @return The call builder
     */
    public V2GetInstanceStageHistoryRequestBuilder getInstanceStageHistory() {
        return new V2GetInstanceStageHistoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a workflow instance stage history
     * 
     * <p>Get a workflow instance stage history
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetInstanceStageHistoryResponse getInstanceStageHistory(V2GetInstanceStageHistoryRequest request) throws Exception {
        RequestOperation<V2GetInstanceStageHistoryRequest, V2GetInstanceStageHistoryResponse> operation
              = new V2GetInstanceStageHistory.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get server info
     * 
     * @return The call builder
     */
    public V2GetServerInfoRequestBuilder getServerInfo() {
        return new V2GetServerInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get server info
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetServerInfoResponse getServerInfoDirect() throws Exception {
        RequestlessOperation<V2GetServerInfoResponse> operation
            = new V2GetServerInfo.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get a flow by id
     * 
     * <p>Get a flow by id
     * 
     * @return The call builder
     */
    public V2GetWorkflowRequestBuilder getWorkflow() {
        return new V2GetWorkflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a flow by id
     * 
     * <p>Get a flow by id
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2GetWorkflowResponse getWorkflow(V2GetWorkflowRequest request) throws Exception {
        RequestOperation<V2GetWorkflowRequest, V2GetWorkflowResponse> operation
              = new V2GetWorkflow.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List instances of a workflow
     * 
     * <p>List instances of a workflow
     * 
     * @return The call builder
     */
    public V2ListInstancesRequestBuilder listInstances() {
        return new V2ListInstancesRequestBuilder(sdkConfiguration);
    }

    /**
     * List instances of a workflow
     * 
     * <p>List instances of a workflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ListInstancesResponse listInstances(V2ListInstancesRequest request) throws Exception {
        RequestOperation<V2ListInstancesRequest, V2ListInstancesResponse> operation
              = new V2ListInstances.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List triggers
     * 
     * <p>List triggers
     * 
     * @return The call builder
     */
    public V2ListTriggersRequestBuilder listTriggers() {
        return new V2ListTriggersRequestBuilder(sdkConfiguration);
    }

    /**
     * List triggers
     * 
     * <p>List triggers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ListTriggersResponse listTriggers(V2ListTriggersRequest request) throws Exception {
        RequestOperation<V2ListTriggersRequest, V2ListTriggersResponse> operation
              = new V2ListTriggers.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List triggers occurrences
     * 
     * <p>List triggers occurrences
     * 
     * @return The call builder
     */
    public V2ListTriggersOccurrencesRequestBuilder listTriggersOccurrences() {
        return new V2ListTriggersOccurrencesRequestBuilder(sdkConfiguration);
    }

    /**
     * List triggers occurrences
     * 
     * <p>List triggers occurrences
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ListTriggersOccurrencesResponse listTriggersOccurrences(V2ListTriggersOccurrencesRequest request) throws Exception {
        RequestOperation<V2ListTriggersOccurrencesRequest, V2ListTriggersOccurrencesResponse> operation
              = new V2ListTriggersOccurrences.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List registered workflows
     * 
     * <p>List registered workflows
     * 
     * @return The call builder
     */
    public V2ListWorkflowsRequestBuilder listWorkflows() {
        return new V2ListWorkflowsRequestBuilder(sdkConfiguration);
    }

    /**
     * List registered workflows
     * 
     * <p>List registered workflows
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ListWorkflowsResponse listWorkflows(V2ListWorkflowsRequest request) throws Exception {
        RequestOperation<V2ListWorkflowsRequest, V2ListWorkflowsResponse> operation
              = new V2ListWorkflows.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Read trigger
     * 
     * <p>Read trigger
     * 
     * @return The call builder
     */
    public V2ReadTriggerRequestBuilder readTrigger() {
        return new V2ReadTriggerRequestBuilder(sdkConfiguration);
    }

    /**
     * Read trigger
     * 
     * <p>Read trigger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2ReadTriggerResponse readTrigger(V2ReadTriggerRequest request) throws Exception {
        RequestOperation<V2ReadTriggerRequest, V2ReadTriggerResponse> operation
              = new V2ReadTrigger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Run workflow
     * 
     * <p>Run workflow
     * 
     * @return The call builder
     */
    public V2RunWorkflowRequestBuilder runWorkflow() {
        return new V2RunWorkflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Run workflow
     * 
     * <p>Run workflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2RunWorkflowResponse runWorkflow(V2RunWorkflowRequest request) throws Exception {
        RequestOperation<V2RunWorkflowRequest, V2RunWorkflowResponse> operation
              = new V2RunWorkflow.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Send an event to a running workflow
     * 
     * <p>Send an event to a running workflow
     * 
     * @return The call builder
     */
    public V2SendEventRequestBuilder sendEvent() {
        return new V2SendEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Send an event to a running workflow
     * 
     * <p>Send an event to a running workflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public V2SendEventResponse sendEvent(V2SendEventRequest request) throws Exception {
        RequestOperation<V2SendEventRequest, V2SendEventResponse> operation
              = new V2SendEvent.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Test trigger
     * 
     * <p>Test trigger
     * 
     * @return The call builder
     */
    public TestTriggerRequestBuilder testTrigger() {
        return new TestTriggerRequestBuilder(sdkConfiguration);
    }

    /**
     * Test trigger
     * 
     * <p>Test trigger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public TestTriggerResponse testTrigger(TestTriggerRequest request) throws Exception {
        RequestOperation<TestTriggerRequest, TestTriggerResponse> operation
              = new TestTrigger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
