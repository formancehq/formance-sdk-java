/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;
import static com.formance.formance_sdk.operations.Operations.RequestlessOperation;

import com.formance.formance_sdk.models.operations.AddMetadataOnTransactionRequest;
import com.formance.formance_sdk.models.operations.AddMetadataOnTransactionRequestBuilder;
import com.formance.formance_sdk.models.operations.AddMetadataOnTransactionResponse;
import com.formance.formance_sdk.models.operations.AddMetadataToAccountRequest;
import com.formance.formance_sdk.models.operations.AddMetadataToAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.AddMetadataToAccountResponse;
import com.formance.formance_sdk.models.operations.CountAccountsRequest;
import com.formance.formance_sdk.models.operations.CountAccountsRequestBuilder;
import com.formance.formance_sdk.models.operations.CountAccountsResponse;
import com.formance.formance_sdk.models.operations.CountTransactionsRequest;
import com.formance.formance_sdk.models.operations.CountTransactionsRequestBuilder;
import com.formance.formance_sdk.models.operations.CountTransactionsResponse;
import com.formance.formance_sdk.models.operations.CreateTransactionRequest;
import com.formance.formance_sdk.models.operations.CreateTransactionRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateTransactionResponse;
import com.formance.formance_sdk.models.operations.CreateTransactionsRequest;
import com.formance.formance_sdk.models.operations.CreateTransactionsRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateTransactionsResponse;
import com.formance.formance_sdk.models.operations.GetAccountRequest;
import com.formance.formance_sdk.models.operations.GetAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.GetAccountResponse;
import com.formance.formance_sdk.models.operations.GetBalancesAggregatedRequest;
import com.formance.formance_sdk.models.operations.GetBalancesAggregatedRequestBuilder;
import com.formance.formance_sdk.models.operations.GetBalancesAggregatedResponse;
import com.formance.formance_sdk.models.operations.GetBalancesRequest;
import com.formance.formance_sdk.models.operations.GetBalancesRequestBuilder;
import com.formance.formance_sdk.models.operations.GetBalancesResponse;
import com.formance.formance_sdk.models.operations.GetInfoRequestBuilder;
import com.formance.formance_sdk.models.operations.GetInfoResponse;
import com.formance.formance_sdk.models.operations.GetLedgerInfoRequest;
import com.formance.formance_sdk.models.operations.GetLedgerInfoRequestBuilder;
import com.formance.formance_sdk.models.operations.GetLedgerInfoResponse;
import com.formance.formance_sdk.models.operations.GetMappingRequest;
import com.formance.formance_sdk.models.operations.GetMappingRequestBuilder;
import com.formance.formance_sdk.models.operations.GetMappingResponse;
import com.formance.formance_sdk.models.operations.GetTransactionRequest;
import com.formance.formance_sdk.models.operations.GetTransactionRequestBuilder;
import com.formance.formance_sdk.models.operations.GetTransactionResponse;
import com.formance.formance_sdk.models.operations.ListAccountsRequest;
import com.formance.formance_sdk.models.operations.ListAccountsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListAccountsResponse;
import com.formance.formance_sdk.models.operations.ListLogsRequest;
import com.formance.formance_sdk.models.operations.ListLogsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListLogsResponse;
import com.formance.formance_sdk.models.operations.ListTransactionsRequest;
import com.formance.formance_sdk.models.operations.ListTransactionsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListTransactionsResponse;
import com.formance.formance_sdk.models.operations.ReadStatsRequest;
import com.formance.formance_sdk.models.operations.ReadStatsRequestBuilder;
import com.formance.formance_sdk.models.operations.ReadStatsResponse;
import com.formance.formance_sdk.models.operations.RevertTransactionRequest;
import com.formance.formance_sdk.models.operations.RevertTransactionRequestBuilder;
import com.formance.formance_sdk.models.operations.RevertTransactionResponse;
import com.formance.formance_sdk.models.operations.RunScriptRequest;
import com.formance.formance_sdk.models.operations.RunScriptRequestBuilder;
import com.formance.formance_sdk.models.operations.RunScriptResponse;
import com.formance.formance_sdk.models.operations.UpdateMappingRequest;
import com.formance.formance_sdk.models.operations.UpdateMappingRequestBuilder;
import com.formance.formance_sdk.models.operations.UpdateMappingResponse;
import com.formance.formance_sdk.operations.AddMetadataOnTransaction;
import com.formance.formance_sdk.operations.AddMetadataToAccount;
import com.formance.formance_sdk.operations.CountAccounts;
import com.formance.formance_sdk.operations.CountTransactions;
import com.formance.formance_sdk.operations.CreateTransaction;
import com.formance.formance_sdk.operations.CreateTransactions;
import com.formance.formance_sdk.operations.GetAccount;
import com.formance.formance_sdk.operations.GetBalances;
import com.formance.formance_sdk.operations.GetBalancesAggregated;
import com.formance.formance_sdk.operations.GetInfo;
import com.formance.formance_sdk.operations.GetLedgerInfo;
import com.formance.formance_sdk.operations.GetMapping;
import com.formance.formance_sdk.operations.GetTransaction;
import com.formance.formance_sdk.operations.ListAccounts;
import com.formance.formance_sdk.operations.ListLogs;
import com.formance.formance_sdk.operations.ListTransactions;
import com.formance.formance_sdk.operations.ReadStats;
import com.formance.formance_sdk.operations.RevertTransaction;
import com.formance.formance_sdk.operations.RunScript;
import com.formance.formance_sdk.operations.UpdateMapping;
import java.lang.Deprecated;
import java.lang.Exception;


public class LedgerV1 {
    private final SDKConfiguration sdkConfiguration;

    LedgerV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a new batch of transactions to a ledger
     * 
     * @return The call builder
     */
    public CreateTransactionsRequestBuilder createTransactions() {
        return new CreateTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a new batch of transactions to a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTransactionsResponse createTransactions(CreateTransactionsRequest request) throws Exception {
        RequestOperation<CreateTransactionsRequest, CreateTransactionsResponse> operation
              = new CreateTransactions.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Set the metadata of a transaction by its ID
     * 
     * @return The call builder
     */
    public AddMetadataOnTransactionRequestBuilder addMetadataOnTransaction() {
        return new AddMetadataOnTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Set the metadata of a transaction by its ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddMetadataOnTransactionResponse addMetadataOnTransaction(AddMetadataOnTransactionRequest request) throws Exception {
        RequestOperation<AddMetadataOnTransactionRequest, AddMetadataOnTransactionResponse> operation
              = new AddMetadataOnTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Add metadata to an account
     * 
     * @return The call builder
     */
    public AddMetadataToAccountRequestBuilder addMetadataToAccount() {
        return new AddMetadataToAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Add metadata to an account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddMetadataToAccountResponse addMetadataToAccount(AddMetadataToAccountRequest request) throws Exception {
        RequestOperation<AddMetadataToAccountRequest, AddMetadataToAccountResponse> operation
              = new AddMetadataToAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Count the accounts from a ledger
     * 
     * @return The call builder
     */
    public CountAccountsRequestBuilder countAccounts() {
        return new CountAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * Count the accounts from a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CountAccountsResponse countAccounts(CountAccountsRequest request) throws Exception {
        RequestOperation<CountAccountsRequest, CountAccountsResponse> operation
              = new CountAccounts.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Count the transactions from a ledger
     * 
     * @return The call builder
     */
    public CountTransactionsRequestBuilder countTransactions() {
        return new CountTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Count the transactions from a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CountTransactionsResponse countTransactions(CountTransactionsRequest request) throws Exception {
        RequestOperation<CountTransactionsRequest, CountTransactionsResponse> operation
              = new CountTransactions.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a new transaction to a ledger
     * 
     * @return The call builder
     */
    public CreateTransactionRequestBuilder createTransaction() {
        return new CreateTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a new transaction to a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTransactionResponse createTransaction(CreateTransactionRequest request) throws Exception {
        RequestOperation<CreateTransactionRequest, CreateTransactionResponse> operation
              = new CreateTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get account by its address
     * 
     * @return The call builder
     */
    public GetAccountRequestBuilder getAccount() {
        return new GetAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get account by its address
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAccountResponse getAccount(GetAccountRequest request) throws Exception {
        RequestOperation<GetAccountRequest, GetAccountResponse> operation
              = new GetAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get the balances from a ledger's account
     * 
     * @return The call builder
     */
    public GetBalancesRequestBuilder getBalances() {
        return new GetBalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get the balances from a ledger's account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBalancesResponse getBalances(GetBalancesRequest request) throws Exception {
        RequestOperation<GetBalancesRequest, GetBalancesResponse> operation
              = new GetBalances.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get the aggregated balances from selected accounts
     * 
     * @return The call builder
     */
    public GetBalancesAggregatedRequestBuilder getBalancesAggregated() {
        return new GetBalancesAggregatedRequestBuilder(sdkConfiguration);
    }

    /**
     * Get the aggregated balances from selected accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBalancesAggregatedResponse getBalancesAggregated(GetBalancesAggregatedRequest request) throws Exception {
        RequestOperation<GetBalancesAggregatedRequest, GetBalancesAggregatedResponse> operation
              = new GetBalancesAggregated.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Show server information
     * 
     * @return The call builder
     */
    public GetInfoRequestBuilder getInfo() {
        return new GetInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Show server information
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetInfoResponse getInfoDirect() throws Exception {
        RequestlessOperation<GetInfoResponse> operation
            = new GetInfo.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get information about a ledger
     * 
     * @return The call builder
     */
    public GetLedgerInfoRequestBuilder getLedgerInfo() {
        return new GetLedgerInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get information about a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetLedgerInfoResponse getLedgerInfo(GetLedgerInfoRequest request) throws Exception {
        RequestOperation<GetLedgerInfoRequest, GetLedgerInfoResponse> operation
              = new GetLedgerInfo.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get the mapping of a ledger
     * 
     * @return The call builder
     */
    public GetMappingRequestBuilder getMapping() {
        return new GetMappingRequestBuilder(sdkConfiguration);
    }

    /**
     * Get the mapping of a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetMappingResponse getMapping(GetMappingRequest request) throws Exception {
        RequestOperation<GetMappingRequest, GetMappingResponse> operation
              = new GetMapping.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get transaction from a ledger by its ID
     * 
     * @return The call builder
     */
    public GetTransactionRequestBuilder getTransaction() {
        return new GetTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Get transaction from a ledger by its ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionResponse getTransaction(GetTransactionRequest request) throws Exception {
        RequestOperation<GetTransactionRequest, GetTransactionResponse> operation
              = new GetTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List accounts from a ledger
     * 
     * <p>List accounts from a ledger, sorted by address in descending order.
     * 
     * @return The call builder
     */
    public ListAccountsRequestBuilder listAccounts() {
        return new ListAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List accounts from a ledger
     * 
     * <p>List accounts from a ledger, sorted by address in descending order.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAccountsResponse listAccounts(ListAccountsRequest request) throws Exception {
        RequestOperation<ListAccountsRequest, ListAccountsResponse> operation
              = new ListAccounts.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List the logs from a ledger
     * 
     * <p>List the logs from a ledger, sorted by ID in descending order.
     * 
     * @return The call builder
     */
    public ListLogsRequestBuilder listLogs() {
        return new ListLogsRequestBuilder(sdkConfiguration);
    }

    /**
     * List the logs from a ledger
     * 
     * <p>List the logs from a ledger, sorted by ID in descending order.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListLogsResponse listLogs(ListLogsRequest request) throws Exception {
        RequestOperation<ListLogsRequest, ListLogsResponse> operation
              = new ListLogs.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List transactions from a ledger
     * 
     * <p>List transactions from a ledger, sorted by txid in descending order.
     * 
     * @return The call builder
     */
    public ListTransactionsRequestBuilder listTransactions() {
        return new ListTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List transactions from a ledger
     * 
     * <p>List transactions from a ledger, sorted by txid in descending order.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTransactionsResponse listTransactions(ListTransactionsRequest request) throws Exception {
        RequestOperation<ListTransactionsRequest, ListTransactionsResponse> operation
              = new ListTransactions.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get statistics from a ledger
     * 
     * <p>Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     * 
     * @return The call builder
     */
    public ReadStatsRequestBuilder readStats() {
        return new ReadStatsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get statistics from a ledger
     * 
     * <p>Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ReadStatsResponse readStats(ReadStatsRequest request) throws Exception {
        RequestOperation<ReadStatsRequest, ReadStatsResponse> operation
              = new ReadStats.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revert a ledger transaction by its ID
     * 
     * @return The call builder
     */
    public RevertTransactionRequestBuilder revertTransaction() {
        return new RevertTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Revert a ledger transaction by its ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevertTransactionResponse revertTransaction(RevertTransactionRequest request) throws Exception {
        RequestOperation<RevertTransactionRequest, RevertTransactionResponse> operation
              = new RevertTransaction.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Execute a Numscript
     * 
     * <p>This route is deprecated, and has been merged into `POST /{ledger}/transactions`.
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public RunScriptRequestBuilder runScript() {
        return new RunScriptRequestBuilder(sdkConfiguration);
    }

    /**
     * Execute a Numscript
     * 
     * <p>This route is deprecated, and has been merged into `POST /{ledger}/transactions`.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public RunScriptResponse runScript(RunScriptRequest request) throws Exception {
        RequestOperation<RunScriptRequest, RunScriptResponse> operation
              = new RunScript.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update the mapping of a ledger
     * 
     * @return The call builder
     */
    public UpdateMappingRequestBuilder updateMapping() {
        return new UpdateMappingRequestBuilder(sdkConfiguration);
    }

    /**
     * Update the mapping of a ledger
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateMappingResponse updateMapping(UpdateMappingRequest request) throws Exception {
        RequestOperation<UpdateMappingRequest, UpdateMappingResponse> operation
              = new UpdateMapping.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
