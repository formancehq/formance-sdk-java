/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.formance.formance_sdk;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.formance.formance_sdk.models.errors.SDKError;
import com.formance.formance_sdk.models.operations.SDKMethodInterfaces.*;
import com.formance.formance_sdk.utils.HTTPClient;
import com.formance.formance_sdk.utils.HTTPRequest;
import com.formance.formance_sdk.utils.JSON;
import com.formance.formance_sdk.utils.SerializedBody;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

public class Ledger implements
            MethodCallCreateTransactions,
            MethodCallAddMetadataOnTransaction,
            MethodCallAddMetadataToAccount,
            MethodCallCountAccounts,
            MethodCallCountTransactions,
            MethodCallCreateTransaction,
            MethodCallGetAccount,
            MethodCallGetBalances,
            MethodCallGetBalancesAggregated,
            MethodCallGetInfo,
            MethodCallGetLedgerInfo,
            MethodCallGetMapping,
            MethodCallGetTransaction,
            MethodCallListAccounts,
            MethodCallListLogs,
            MethodCallListTransactions,
            MethodCallReadStats,
            MethodCallRevertTransaction,
            MethodCallRunScript,
            MethodCallUpdateMapping,
            MethodCallV2AddMetadataOnTransaction,
            MethodCallV2AddMetadataToAccount,
            MethodCallV2CountAccounts,
            MethodCallV2CountTransactions,
            MethodCallV2CreateBulk,
            MethodCallV2CreateLedger,
            MethodCallV2CreateTransaction,
            MethodCallV2DeleteAccountMetadata,
            MethodCallV2DeleteLedgerMetadata,
            MethodCallV2DeleteTransactionMetadata,
            MethodCallV2GetAccount,
            MethodCallV2GetBalancesAggregated,
            MethodCallV2GetInfo,
            MethodCallV2GetLedger,
            MethodCallV2GetLedgerInfo,
            MethodCallV2GetTransaction,
            MethodCallV2ListAccounts,
            MethodCallV2ListLedgers,
            MethodCallV2ListLogs,
            MethodCallV2ListTransactions,
            MethodCallV2ReadStats,
            MethodCallV2RevertTransaction,
            MethodCallV2UpdateLedgerMetadata {

    private final SDKConfiguration sdkConfiguration;

    Ledger(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.formance.formance_sdk.models.operations.CreateTransactionsRequestBuilder createTransactions() {
        return new com.formance.formance_sdk.models.operations.CreateTransactionsRequestBuilder(this);
    }

    /**
     * Create a new batch of transactions to a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.CreateTransactionsResponse createTransactions(
            com.formance.formance_sdk.models.operations.CreateTransactionsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.CreateTransactionsRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/transactions/batch",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.CreateTransactionsRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "transactions", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.CreateTransactionsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.CreateTransactionsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.CreateTransactionsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TransactionsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TransactionsResponse>() {});
                res.withTransactionsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.AddMetadataOnTransactionRequestBuilder addMetadataOnTransaction() {
        return new com.formance.formance_sdk.models.operations.AddMetadataOnTransactionRequestBuilder(this);
    }

    /**
     * Set the metadata of a transaction by its ID
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.AddMetadataOnTransactionResponse addMetadataOnTransaction(
            com.formance.formance_sdk.models.operations.AddMetadataOnTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.AddMetadataOnTransactionRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/transactions/{txid}/metadata",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.AddMetadataOnTransactionRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", true);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.AddMetadataOnTransactionResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.AddMetadataOnTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.AddMetadataOnTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.AddMetadataToAccountRequestBuilder addMetadataToAccount() {
        return new com.formance.formance_sdk.models.operations.AddMetadataToAccountRequestBuilder(this);
    }

    /**
     * Add metadata to an account
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.AddMetadataToAccountResponse addMetadataToAccount(
            com.formance.formance_sdk.models.operations.AddMetadataToAccountRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.AddMetadataToAccountRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/accounts/{address}/metadata",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.AddMetadataToAccountRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", true);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.AddMetadataToAccountResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.AddMetadataToAccountResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.AddMetadataToAccountResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.CountAccountsRequestBuilder countAccounts() {
        return new com.formance.formance_sdk.models.operations.CountAccountsRequestBuilder(this);
    }

    /**
     * Count the accounts from a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.CountAccountsResponse countAccounts(
            com.formance.formance_sdk.models.operations.CountAccountsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.CountAccountsRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/accounts",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("HEAD");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.CountAccountsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.CountAccountsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.CountAccountsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.CountAccountsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            res.withHeaders(httpRes
                    .headers()
                    .map()
                    .keySet()
                    .stream()
                    .collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k))));
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.CountTransactionsRequestBuilder countTransactions() {
        return new com.formance.formance_sdk.models.operations.CountTransactionsRequestBuilder(this);
    }

    /**
     * Count the transactions from a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.CountTransactionsResponse countTransactions(
            com.formance.formance_sdk.models.operations.CountTransactionsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.CountTransactionsRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/transactions",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("HEAD");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.CountTransactionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.CountTransactionsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.CountTransactionsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.CountTransactionsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            res.withHeaders(httpRes
                    .headers()
                    .map()
                    .keySet()
                    .stream()
                    .collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k))));
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.CreateTransactionRequestBuilder createTransaction() {
        return new com.formance.formance_sdk.models.operations.CreateTransactionRequestBuilder(this);
    }

    /**
     * Create a new transaction to a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.CreateTransactionResponse createTransaction(
            com.formance.formance_sdk.models.operations.CreateTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.CreateTransactionRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/transactions",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.CreateTransactionRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "postTransaction", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.CreateTransactionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.CreateTransactionResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.CreateTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.CreateTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TransactionsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TransactionsResponse>() {});
                res.withTransactionsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetAccountRequestBuilder getAccount() {
        return new com.formance.formance_sdk.models.operations.GetAccountRequestBuilder(this);
    }

    /**
     * Get account by its address
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetAccountResponse getAccount(
            com.formance.formance_sdk.models.operations.GetAccountRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetAccountRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/accounts/{address}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetAccountResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetAccountResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetAccountResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.AccountResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.AccountResponse>() {});
                res.withAccountResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetBalancesRequestBuilder getBalances() {
        return new com.formance.formance_sdk.models.operations.GetBalancesRequestBuilder(this);
    }

    /**
     * Get the balances from a ledger's account
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetBalancesResponse getBalances(
            com.formance.formance_sdk.models.operations.GetBalancesRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetBalancesRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/balances",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.GetBalancesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetBalancesResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetBalancesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetBalancesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.BalancesCursorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.BalancesCursorResponse>() {});
                res.withBalancesCursorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetBalancesAggregatedRequestBuilder getBalancesAggregated() {
        return new com.formance.formance_sdk.models.operations.GetBalancesAggregatedRequestBuilder(this);
    }

    /**
     * Get the aggregated balances from selected accounts
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetBalancesAggregatedResponse getBalancesAggregated(
            com.formance.formance_sdk.models.operations.GetBalancesAggregatedRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetBalancesAggregatedRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/aggregate/balances",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.GetBalancesAggregatedRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetBalancesAggregatedResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetBalancesAggregatedResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetBalancesAggregatedResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.AggregateBalancesResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.AggregateBalancesResponse>() {});
                res.withAggregateBalancesResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetInfoRequestBuilder getInfo() {
        return new com.formance.formance_sdk.models.operations.GetInfoRequestBuilder(this);
    }

    /**
     * Show server information
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetInfoResponse getInfoDirect() throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/ledger/_info");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetInfoResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetInfoResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetInfoResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ConfigInfoResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ConfigInfoResponse>() {});
                res.withConfigInfoResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetLedgerInfoRequestBuilder getLedgerInfo() {
        return new com.formance.formance_sdk.models.operations.GetLedgerInfoRequestBuilder(this);
    }

    /**
     * Get information about a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetLedgerInfoResponse getLedgerInfo(
            com.formance.formance_sdk.models.operations.GetLedgerInfoRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetLedgerInfoRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/_info",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetLedgerInfoResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetLedgerInfoResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetLedgerInfoResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.LedgerInfoResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.LedgerInfoResponse>() {});
                res.withLedgerInfoResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetMappingRequestBuilder getMapping() {
        return new com.formance.formance_sdk.models.operations.GetMappingRequestBuilder(this);
    }

    /**
     * Get the mapping of a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetMappingResponse getMapping(
            com.formance.formance_sdk.models.operations.GetMappingRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetMappingRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/mapping",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetMappingResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetMappingResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetMappingResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.MappingResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.MappingResponse>() {});
                res.withMappingResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetTransactionRequestBuilder getTransaction() {
        return new com.formance.formance_sdk.models.operations.GetTransactionRequestBuilder(this);
    }

    /**
     * Get transaction from a ledger by its ID
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetTransactionResponse getTransaction(
            com.formance.formance_sdk.models.operations.GetTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetTransactionRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/transactions/{txid}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetTransactionResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TransactionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TransactionResponse>() {});
                res.withTransactionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListAccountsRequestBuilder listAccounts() {
        return new com.formance.formance_sdk.models.operations.ListAccountsRequestBuilder(this);
    }

    /**
     * List accounts from a ledger
     * List accounts from a ledger, sorted by address in descending order.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListAccountsResponse listAccounts(
            com.formance.formance_sdk.models.operations.ListAccountsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ListAccountsRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/accounts",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListAccountsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListAccountsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListAccountsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListAccountsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.AccountsCursorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.AccountsCursorResponse>() {});
                res.withAccountsCursorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListLogsRequestBuilder listLogs() {
        return new com.formance.formance_sdk.models.operations.ListLogsRequestBuilder(this);
    }

    /**
     * List the logs from a ledger
     * List the logs from a ledger, sorted by ID in descending order.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListLogsResponse listLogs(
            com.formance.formance_sdk.models.operations.ListLogsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ListLogsRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/logs",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListLogsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListLogsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListLogsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListLogsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.LogsCursorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.LogsCursorResponse>() {});
                res.withLogsCursorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListTransactionsRequestBuilder listTransactions() {
        return new com.formance.formance_sdk.models.operations.ListTransactionsRequestBuilder(this);
    }

    /**
     * List transactions from a ledger
     * List transactions from a ledger, sorted by txid in descending order.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListTransactionsResponse listTransactions(
            com.formance.formance_sdk.models.operations.ListTransactionsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ListTransactionsRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/transactions",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListTransactionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListTransactionsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListTransactionsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListTransactionsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TransactionsCursorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TransactionsCursorResponse>() {});
                res.withTransactionsCursorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ReadStatsRequestBuilder readStats() {
        return new com.formance.formance_sdk.models.operations.ReadStatsRequestBuilder(this);
    }

    /**
     * Get statistics from a ledger
     * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ReadStatsResponse readStats(
            com.formance.formance_sdk.models.operations.ReadStatsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ReadStatsRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/stats",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ReadStatsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ReadStatsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ReadStatsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.StatsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.StatsResponse>() {});
                res.withStatsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.RevertTransactionRequestBuilder revertTransaction() {
        return new com.formance.formance_sdk.models.operations.RevertTransactionRequestBuilder(this);
    }

    /**
     * Revert a ledger transaction by its ID
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.RevertTransactionResponse revertTransaction(
            com.formance.formance_sdk.models.operations.RevertTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.RevertTransactionRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/transactions/{txid}/revert",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.RevertTransactionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.RevertTransactionResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.RevertTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.RevertTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.TransactionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.TransactionResponse>() {});
                res.withTransactionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.RunScriptRequestBuilder runScript() {
        return new com.formance.formance_sdk.models.operations.RunScriptRequestBuilder(this);
    }

    /**
     * Execute a Numscript
     * This route is deprecated, and has been merged into `POST /{ledger}/transactions`.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.formance.formance_sdk.models.operations.RunScriptResponse runScript(
            com.formance.formance_sdk.models.operations.RunScriptRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.RunScriptRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/script",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.RunScriptRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "script", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.RunScriptRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.RunScriptResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.RunScriptResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.RunScriptResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ScriptResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ScriptResponse>() {});
                res.withScriptResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.UpdateMappingRequestBuilder updateMapping() {
        return new com.formance.formance_sdk.models.operations.UpdateMappingRequestBuilder(this);
    }

    /**
     * Update the mapping of a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.UpdateMappingResponse updateMapping(
            com.formance.formance_sdk.models.operations.UpdateMappingRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.UpdateMappingRequest.class,
                baseUrl,
                "/api/ledger/{ledger}/mapping",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.UpdateMappingRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "mapping", "json", true);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.UpdateMappingResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.UpdateMappingResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.UpdateMappingResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.MappingResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.MappingResponse>() {});
                res.withMappingResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ErrorResponse>() {});
                res.withErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionRequestBuilder v2AddMetadataOnTransaction() {
        return new com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionRequestBuilder(this);
    }

    /**
     * Set the metadata of a transaction by its ID
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionResponse v2AddMetadataOnTransaction(
            com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/transactions/{id}/metadata",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        java.util.Map<String, java.util.List<String>> headers = com.formance.formance_sdk.utils.Utils.getHeaders(request, null);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2AddMetadataToAccountRequestBuilder v2AddMetadataToAccount() {
        return new com.formance.formance_sdk.models.operations.V2AddMetadataToAccountRequestBuilder(this);
    }

    /**
     * Add metadata to an account
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2AddMetadataToAccountResponse v2AddMetadataToAccount(
            com.formance.formance_sdk.models.operations.V2AddMetadataToAccountRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2AddMetadataToAccountRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/accounts/{address}/metadata",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2AddMetadataToAccountRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2AddMetadataToAccountRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        java.util.Map<String, java.util.List<String>> headers = com.formance.formance_sdk.utils.Utils.getHeaders(request, null);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2AddMetadataToAccountResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2AddMetadataToAccountResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2AddMetadataToAccountResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2CountAccountsRequestBuilder v2CountAccounts() {
        return new com.formance.formance_sdk.models.operations.V2CountAccountsRequestBuilder(this);
    }

    /**
     * Count the accounts from a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2CountAccountsResponse v2CountAccounts(
            com.formance.formance_sdk.models.operations.V2CountAccountsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2CountAccountsRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/accounts",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("HEAD");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2CountAccountsRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2CountAccountsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2CountAccountsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2CountAccountsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2CountAccountsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
            res.withHeaders(httpRes
                    .headers()
                    .map()
                    .keySet()
                    .stream()
                    .collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k))));
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2CountTransactionsRequestBuilder v2CountTransactions() {
        return new com.formance.formance_sdk.models.operations.V2CountTransactionsRequestBuilder(this);
    }

    /**
     * Count the transactions from a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2CountTransactionsResponse v2CountTransactions(
            com.formance.formance_sdk.models.operations.V2CountTransactionsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2CountTransactionsRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/transactions",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("HEAD");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2CountTransactionsRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2CountTransactionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2CountTransactionsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2CountTransactionsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2CountTransactionsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
            res.withHeaders(httpRes
                    .headers()
                    .map()
                    .keySet()
                    .stream()
                    .collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k))));
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2CreateBulkRequestBuilder v2CreateBulk() {
        return new com.formance.formance_sdk.models.operations.V2CreateBulkRequestBuilder(this);
    }

    /**
     * Bulk request
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2CreateBulkResponse v2CreateBulk(
            com.formance.formance_sdk.models.operations.V2CreateBulkRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2CreateBulkRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/_bulk",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2CreateBulkRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2CreateBulkResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2CreateBulkResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2CreateBulkResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2BulkResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2BulkResponse>() {});
                res.withV2BulkResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2CreateLedgerRequestBuilder v2CreateLedger() {
        return new com.formance.formance_sdk.models.operations.V2CreateLedgerRequestBuilder(this);
    }

    /**
     * Create a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2CreateLedgerResponse v2CreateLedger(
            com.formance.formance_sdk.models.operations.V2CreateLedgerRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2CreateLedgerRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2CreateLedgerRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "v2CreateLedgerRequest", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2CreateLedgerResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2CreateLedgerResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2CreateLedgerResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if (httpRes.statusCode() == 400) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2CreateTransactionRequestBuilder v2CreateTransaction() {
        return new com.formance.formance_sdk.models.operations.V2CreateTransactionRequestBuilder(this);
    }

    /**
     * Create a new transaction to a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2CreateTransactionResponse v2CreateTransaction(
            com.formance.formance_sdk.models.operations.V2CreateTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2CreateTransactionRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/transactions",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2CreateTransactionRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "v2PostTransaction", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2CreateTransactionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        java.util.Map<String, java.util.List<String>> headers = com.formance.formance_sdk.utils.Utils.getHeaders(request, null);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2CreateTransactionResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2CreateTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2CreateTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2CreateTransactionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2CreateTransactionResponse>() {});
                res.withV2CreateTransactionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataRequestBuilder v2DeleteAccountMetadata() {
        return new com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataRequestBuilder(this);
    }

    /**
     * Delete metadata by key
     * Delete metadata by key
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataResponse v2DeleteAccountMetadata(
            com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/accounts/{address}/metadata/{key}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataRequestBuilder v2DeleteLedgerMetadata() {
        return new com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataRequestBuilder(this);
    }

    /**
     * Delete ledger metadata by key
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataResponse v2DeleteLedgerMetadata(
            com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/metadata/{key}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if (httpRes.statusCode() == 400) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataRequestBuilder v2DeleteTransactionMetadata() {
        return new com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataRequestBuilder(this);
    }

    /**
     * Delete metadata by key
     * Delete metadata by key
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataResponse v2DeleteTransactionMetadata(
            com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/transactions/{id}/metadata/{key}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        } else if (httpRes.statusCode() == 400) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2GetAccountRequestBuilder v2GetAccount() {
        return new com.formance.formance_sdk.models.operations.V2GetAccountRequestBuilder(this);
    }

    /**
     * Get account by its address
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2GetAccountResponse v2GetAccount(
            com.formance.formance_sdk.models.operations.V2GetAccountRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2GetAccountRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/accounts/{address}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2GetAccountRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2GetAccountResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2GetAccountResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2GetAccountResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2AccountResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2AccountResponse>() {});
                res.withV2AccountResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedRequestBuilder v2GetBalancesAggregated() {
        return new com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedRequestBuilder(this);
    }

    /**
     * Get the aggregated balances from selected accounts
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedResponse v2GetBalancesAggregated(
            com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/aggregate/balances",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2AggregateBalancesResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2AggregateBalancesResponse>() {});
                res.withV2AggregateBalancesResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2GetInfoRequestBuilder v2GetInfo() {
        return new com.formance.formance_sdk.models.operations.V2GetInfoRequestBuilder(this);
    }

    /**
     * Show server information
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2GetInfoResponse v2GetInfoDirect() throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/ledger/v2/_info");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2GetInfoResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2GetInfoResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2GetInfoResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2ConfigInfoResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2ConfigInfoResponse>() {});
                res.withV2ConfigInfoResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2GetLedgerRequestBuilder v2GetLedger() {
        return new com.formance.formance_sdk.models.operations.V2GetLedgerRequestBuilder(this);
    }

    /**
     * Get a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2GetLedgerResponse v2GetLedger(
            com.formance.formance_sdk.models.operations.V2GetLedgerRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2GetLedgerRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2GetLedgerResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2GetLedgerResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2GetLedgerResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2GetLedgerResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2GetLedgerResponse>() {});
                res.withV2GetLedgerResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2GetLedgerInfoRequestBuilder v2GetLedgerInfo() {
        return new com.formance.formance_sdk.models.operations.V2GetLedgerInfoRequestBuilder(this);
    }

    /**
     * Get information about a ledger
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2GetLedgerInfoResponse v2GetLedgerInfo(
            com.formance.formance_sdk.models.operations.V2GetLedgerInfoRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2GetLedgerInfoRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/_info",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2GetLedgerInfoResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2GetLedgerInfoResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2GetLedgerInfoResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2LedgerInfoResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2LedgerInfoResponse>() {});
                res.withV2LedgerInfoResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2GetTransactionRequestBuilder v2GetTransaction() {
        return new com.formance.formance_sdk.models.operations.V2GetTransactionRequestBuilder(this);
    }

    /**
     * Get transaction from a ledger by its ID
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2GetTransactionResponse v2GetTransaction(
            com.formance.formance_sdk.models.operations.V2GetTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2GetTransactionRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/transactions/{id}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2GetTransactionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2GetTransactionResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2GetTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2GetTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2GetTransactionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2GetTransactionResponse>() {});
                res.withV2GetTransactionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 404) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2ListAccountsRequestBuilder v2ListAccounts() {
        return new com.formance.formance_sdk.models.operations.V2ListAccountsRequestBuilder(this);
    }

    /**
     * List accounts from a ledger
     * List accounts from a ledger, sorted by address in descending order.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2ListAccountsResponse v2ListAccounts(
            com.formance.formance_sdk.models.operations.V2ListAccountsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2ListAccountsRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/accounts",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2ListAccountsRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2ListAccountsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2ListAccountsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2ListAccountsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2ListAccountsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2AccountsCursorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2AccountsCursorResponse>() {});
                res.withV2AccountsCursorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2ListLedgersRequestBuilder v2ListLedgers() {
        return new com.formance.formance_sdk.models.operations.V2ListLedgersRequestBuilder(this);
    }

    /**
     * List ledgers
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2ListLedgersResponse v2ListLedgers(
            com.formance.formance_sdk.models.operations.V2ListLedgersRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/ledger/v2");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2ListLedgersRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2ListLedgersResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2ListLedgersResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2ListLedgersResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2LedgerListResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2LedgerListResponse>() {});
                res.withV2LedgerListResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2ListLogsRequestBuilder v2ListLogs() {
        return new com.formance.formance_sdk.models.operations.V2ListLogsRequestBuilder(this);
    }

    /**
     * List the logs from a ledger
     * List the logs from a ledger, sorted by ID in descending order.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2ListLogsResponse v2ListLogs(
            com.formance.formance_sdk.models.operations.V2ListLogsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2ListLogsRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/logs",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2ListLogsRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2ListLogsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2ListLogsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2ListLogsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2ListLogsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2LogsCursorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2LogsCursorResponse>() {});
                res.withV2LogsCursorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2ListTransactionsRequestBuilder v2ListTransactions() {
        return new com.formance.formance_sdk.models.operations.V2ListTransactionsRequestBuilder(this);
    }

    /**
     * List transactions from a ledger
     * List transactions from a ledger, sorted by id in descending order.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2ListTransactionsResponse v2ListTransactions(
            com.formance.formance_sdk.models.operations.V2ListTransactionsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2ListTransactionsRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/transactions",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2ListTransactionsRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2ListTransactionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2ListTransactionsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2ListTransactionsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2ListTransactionsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2TransactionsCursorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2TransactionsCursorResponse>() {});
                res.withV2TransactionsCursorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2ReadStatsRequestBuilder v2ReadStats() {
        return new com.formance.formance_sdk.models.operations.V2ReadStatsRequestBuilder(this);
    }

    /**
     * Get statistics from a ledger
     * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2ReadStatsResponse v2ReadStats(
            com.formance.formance_sdk.models.operations.V2ReadStatsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2ReadStatsRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/stats",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2ReadStatsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2ReadStatsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2ReadStatsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2StatsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2StatsResponse>() {});
                res.withV2StatsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2RevertTransactionRequestBuilder v2RevertTransaction() {
        return new com.formance.formance_sdk.models.operations.V2RevertTransactionRequestBuilder(this);
    }

    /**
     * Revert a ledger transaction by its ID
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2RevertTransactionResponse v2RevertTransaction(
            com.formance.formance_sdk.models.operations.V2RevertTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2RevertTransactionRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/transactions/{id}/revert",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.V2RevertTransactionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2RevertTransactionResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2RevertTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2RevertTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 201) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.V2RevertTransactionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.V2RevertTransactionResponse>() {});
                res.withV2RevertTransactionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataRequestBuilder v2UpdateLedgerMetadata() {
        return new com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataRequestBuilder(this);
    }

    /**
     * Update ledger metadata
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataResponse v2UpdateLedgerMetadata(
            com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataRequest.class,
                baseUrl,
                "/api/ledger/v2/{ledger}/metadata",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        } else if (httpRes.statusCode() == 400) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500) || (httpRes.statusCode() >= 500 && httpRes.statusCode() < 600)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.V2ErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.V2ErrorResponse>() {});
                res.withV2ErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
