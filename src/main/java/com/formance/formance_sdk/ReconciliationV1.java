/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;
import static com.formance.formance_sdk.operations.Operations.RequestlessOperation;

import com.formance.formance_sdk.models.operations.CreatePolicyRequestBuilder;
import com.formance.formance_sdk.models.operations.CreatePolicyResponse;
import com.formance.formance_sdk.models.operations.DeletePolicyRequest;
import com.formance.formance_sdk.models.operations.DeletePolicyRequestBuilder;
import com.formance.formance_sdk.models.operations.DeletePolicyResponse;
import com.formance.formance_sdk.models.operations.GetPolicyRequest;
import com.formance.formance_sdk.models.operations.GetPolicyRequestBuilder;
import com.formance.formance_sdk.models.operations.GetPolicyResponse;
import com.formance.formance_sdk.models.operations.GetReconciliationRequest;
import com.formance.formance_sdk.models.operations.GetReconciliationRequestBuilder;
import com.formance.formance_sdk.models.operations.GetReconciliationResponse;
import com.formance.formance_sdk.models.operations.ListPoliciesRequest;
import com.formance.formance_sdk.models.operations.ListPoliciesRequestBuilder;
import com.formance.formance_sdk.models.operations.ListPoliciesResponse;
import com.formance.formance_sdk.models.operations.ListReconciliationsRequest;
import com.formance.formance_sdk.models.operations.ListReconciliationsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListReconciliationsResponse;
import com.formance.formance_sdk.models.operations.ReconcileRequest;
import com.formance.formance_sdk.models.operations.ReconcileRequestBuilder;
import com.formance.formance_sdk.models.operations.ReconcileResponse;
import com.formance.formance_sdk.models.operations.ReconciliationgetServerInfoRequestBuilder;
import com.formance.formance_sdk.models.operations.ReconciliationgetServerInfoResponse;
import com.formance.formance_sdk.models.shared.PolicyRequest;
import com.formance.formance_sdk.operations.CreatePolicy;
import com.formance.formance_sdk.operations.DeletePolicy;
import com.formance.formance_sdk.operations.GetPolicy;
import com.formance.formance_sdk.operations.GetReconciliation;
import com.formance.formance_sdk.operations.ListPolicies;
import com.formance.formance_sdk.operations.ListReconciliations;
import com.formance.formance_sdk.operations.Reconcile;
import com.formance.formance_sdk.operations.ReconciliationgetServerInfo;
import java.lang.Exception;


public class ReconciliationV1 {
    private final SDKConfiguration sdkConfiguration;

    ReconciliationV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a policy
     * 
     * <p>Create a policy
     * 
     * @return The call builder
     */
    public CreatePolicyRequestBuilder createPolicy() {
        return new CreatePolicyRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a policy
     * 
     * <p>Create a policy
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePolicyResponse createPolicy(PolicyRequest request) throws Exception {
        RequestOperation<PolicyRequest, CreatePolicyResponse> operation
              = new CreatePolicy.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a policy
     * 
     * <p>Delete a policy by its id.
     * 
     * @return The call builder
     */
    public DeletePolicyRequestBuilder deletePolicy() {
        return new DeletePolicyRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a policy
     * 
     * <p>Delete a policy by its id.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePolicyResponse deletePolicy(DeletePolicyRequest request) throws Exception {
        RequestOperation<DeletePolicyRequest, DeletePolicyResponse> operation
              = new DeletePolicy.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a policy
     * 
     * @return The call builder
     */
    public GetPolicyRequestBuilder getPolicy() {
        return new GetPolicyRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a policy
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPolicyResponse getPolicy(GetPolicyRequest request) throws Exception {
        RequestOperation<GetPolicyRequest, GetPolicyResponse> operation
              = new GetPolicy.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a reconciliation
     * 
     * @return The call builder
     */
    public GetReconciliationRequestBuilder getReconciliation() {
        return new GetReconciliationRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a reconciliation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetReconciliationResponse getReconciliation(GetReconciliationRequest request) throws Exception {
        RequestOperation<GetReconciliationRequest, GetReconciliationResponse> operation
              = new GetReconciliation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List policies
     * 
     * @return The call builder
     */
    public ListPoliciesRequestBuilder listPolicies() {
        return new ListPoliciesRequestBuilder(sdkConfiguration);
    }

    /**
     * List policies
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPoliciesResponse listPolicies(ListPoliciesRequest request) throws Exception {
        RequestOperation<ListPoliciesRequest, ListPoliciesResponse> operation
              = new ListPolicies.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List reconciliations
     * 
     * @return The call builder
     */
    public ListReconciliationsRequestBuilder listReconciliations() {
        return new ListReconciliationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List reconciliations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListReconciliationsResponse listReconciliations(ListReconciliationsRequest request) throws Exception {
        RequestOperation<ListReconciliationsRequest, ListReconciliationsResponse> operation
              = new ListReconciliations.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Reconcile using a policy
     * 
     * <p>Reconcile using a policy
     * 
     * @return The call builder
     */
    public ReconcileRequestBuilder reconcile() {
        return new ReconcileRequestBuilder(sdkConfiguration);
    }

    /**
     * Reconcile using a policy
     * 
     * <p>Reconcile using a policy
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ReconcileResponse reconcile(ReconcileRequest request) throws Exception {
        RequestOperation<ReconcileRequest, ReconcileResponse> operation
              = new Reconcile.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get server info
     * 
     * @return The call builder
     */
    public ReconciliationgetServerInfoRequestBuilder reconciliationgetServerInfo() {
        return new ReconciliationgetServerInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get server info
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ReconciliationgetServerInfoResponse reconciliationgetServerInfoDirect() throws Exception {
        RequestlessOperation<ReconciliationgetServerInfoResponse> operation
            = new ReconciliationgetServerInfo.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

}
