/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.formance.formance_sdk;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.formance.formance_sdk.models.errors.SDKError;
import com.formance.formance_sdk.models.operations.SDKMethodInterfaces.*;
import com.formance.formance_sdk.utils.HTTPClient;
import com.formance.formance_sdk.utils.HTTPRequest;
import com.formance.formance_sdk.utils.JSON;
import com.formance.formance_sdk.utils.SerializedBody;
import com.formance.formance_sdk.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

public class Reconciliation implements
            MethodCallCreatePolicy,
            MethodCallDeletePolicy,
            MethodCallGetPolicy,
            MethodCallGetReconciliation,
            MethodCallListPolicies,
            MethodCallListReconciliations,
            MethodCallReconcile,
            MethodCallReconciliationgetServerInfo {

    private final SDKConfiguration sdkConfiguration;

    Reconciliation(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.formance.formance_sdk.models.operations.CreatePolicyRequestBuilder createPolicy() {
        return new com.formance.formance_sdk.models.operations.CreatePolicyRequestBuilder(this);
    }

    /**
     * Create a policy
     * Create a policy
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.CreatePolicyResponse createPolicy(
            com.formance.formance_sdk.models.shared.PolicyRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/reconciliation/policies");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.shared.PolicyRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.CreatePolicyResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.CreatePolicyResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.CreatePolicyResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 201) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PolicyResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PolicyResponse>() {});
                res.withPolicyResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ReconciliationErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ReconciliationErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.DeletePolicyRequestBuilder deletePolicy() {
        return new com.formance.formance_sdk.models.operations.DeletePolicyRequestBuilder(this);
    }

    /**
     * Delete a policy
     * Delete a policy by its id.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.DeletePolicyResponse deletePolicy(
            com.formance.formance_sdk.models.operations.DeletePolicyRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.DeletePolicyRequest.class,
                baseUrl,
                "/api/reconciliation/policies/{policyID}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.DeletePolicyResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.DeletePolicyResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.DeletePolicyResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 204) {
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ReconciliationErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ReconciliationErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetPolicyRequestBuilder getPolicy() {
        return new com.formance.formance_sdk.models.operations.GetPolicyRequestBuilder(this);
    }

    /**
     * Get a policy
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetPolicyResponse getPolicy(
            com.formance.formance_sdk.models.operations.GetPolicyRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetPolicyRequest.class,
                baseUrl,
                "/api/reconciliation/policies/{policyID}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetPolicyResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetPolicyResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetPolicyResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PolicyResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PolicyResponse>() {});
                res.withPolicyResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ReconciliationErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ReconciliationErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.GetReconciliationRequestBuilder getReconciliation() {
        return new com.formance.formance_sdk.models.operations.GetReconciliationRequestBuilder(this);
    }

    /**
     * Get a reconciliation
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.GetReconciliationResponse getReconciliation(
            com.formance.formance_sdk.models.operations.GetReconciliationRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.GetReconciliationRequest.class,
                baseUrl,
                "/api/reconciliation/reconciliations/{reconciliationID}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.GetReconciliationResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.GetReconciliationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.GetReconciliationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ReconciliationResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ReconciliationResponse>() {});
                res.withReconciliationResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ReconciliationErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ReconciliationErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListPoliciesRequestBuilder listPolicies() {
        return new com.formance.formance_sdk.models.operations.ListPoliciesRequestBuilder(this);
    }

    /**
     * List policies
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListPoliciesResponse listPolicies(
            com.formance.formance_sdk.models.operations.ListPoliciesRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/reconciliation/policies");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListPoliciesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListPoliciesResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListPoliciesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListPoliciesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.PoliciesCursorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.PoliciesCursorResponse>() {});
                res.withPoliciesCursorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ReconciliationErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ReconciliationErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ListReconciliationsRequestBuilder listReconciliations() {
        return new com.formance.formance_sdk.models.operations.ListReconciliationsRequestBuilder(this);
    }

    /**
     * List reconciliations
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ListReconciliationsResponse listReconciliations(
            com.formance.formance_sdk.models.operations.ListReconciliationsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/reconciliation/reconciliations");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.formance.formance_sdk.utils.Utils.getQueryParams(
                com.formance.formance_sdk.models.operations.ListReconciliationsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ListReconciliationsResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ListReconciliationsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ListReconciliationsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ReconciliationsCursorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ReconciliationsCursorResponse>() {});
                res.withReconciliationsCursorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ReconciliationErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ReconciliationErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ReconcileRequestBuilder reconcile() {
        return new com.formance.formance_sdk.models.operations.ReconcileRequestBuilder(this);
    }

    /**
     * Reconcile using a policy
     * Reconcile using a policy
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ReconcileResponse reconcile(
            com.formance.formance_sdk.models.operations.ReconcileRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                com.formance.formance_sdk.models.operations.ReconcileRequest.class,
                baseUrl,
                "/api/reconciliation/policies/{policyID}/reconciliation",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.formance.formance_sdk.models.operations.ReconcileRequest>() {});
        SerializedBody serializedRequestBody = com.formance.formance_sdk.utils.Utils.serializeRequestBody(
                _convertedRequest, "reconciliationRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ReconcileResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ReconcileResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ReconcileResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ReconciliationResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ReconciliationResponse>() {});
                res.withReconciliationResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ReconciliationErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ReconciliationErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.formance.formance_sdk.models.operations.ReconciliationgetServerInfoRequestBuilder reconciliationgetServerInfo() {
        return new com.formance.formance_sdk.models.operations.ReconciliationgetServerInfoRequestBuilder(this);
    }

    /**
     * Get server info
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.formance.formance_sdk.models.operations.ReconciliationgetServerInfoResponse reconciliationgetServerInfoDirect() throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.formance.formance_sdk.utils.Utils.generateURL(
                baseUrl,
                "/api/reconciliation/_info");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.formance.formance_sdk.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.formance.formance_sdk.models.operations.ReconciliationgetServerInfoResponse.Builder resBuilder = 
            com.formance.formance_sdk.models.operations.ReconciliationgetServerInfoResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.formance.formance_sdk.models.operations.ReconciliationgetServerInfoResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.shared.ServerInfo out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.shared.ServerInfo>() {});
                res.withServerInfo(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.formance.formance_sdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.formance.formance_sdk.models.errors.ReconciliationErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.formance.formance_sdk.models.errors.ReconciliationErrorResponse>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
