/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;
import static com.formance.formance_sdk.operations.Operations.RequestlessOperation;

import com.formance.formance_sdk.models.operations.AddAccountToPoolRequest;
import com.formance.formance_sdk.models.operations.AddAccountToPoolRequestBuilder;
import com.formance.formance_sdk.models.operations.AddAccountToPoolResponse;
import com.formance.formance_sdk.models.operations.ConnectorsTransferRequest;
import com.formance.formance_sdk.models.operations.ConnectorsTransferRequestBuilder;
import com.formance.formance_sdk.models.operations.ConnectorsTransferResponse;
import com.formance.formance_sdk.models.operations.CreateAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateAccountResponse;
import com.formance.formance_sdk.models.operations.CreateBankAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateBankAccountResponse;
import com.formance.formance_sdk.models.operations.CreatePaymentRequestBuilder;
import com.formance.formance_sdk.models.operations.CreatePaymentResponse;
import com.formance.formance_sdk.models.operations.CreatePoolRequestBuilder;
import com.formance.formance_sdk.models.operations.CreatePoolResponse;
import com.formance.formance_sdk.models.operations.CreateTransferInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateTransferInitiationResponse;
import com.formance.formance_sdk.models.operations.DeletePoolRequest;
import com.formance.formance_sdk.models.operations.DeletePoolRequestBuilder;
import com.formance.formance_sdk.models.operations.DeletePoolResponse;
import com.formance.formance_sdk.models.operations.DeleteTransferInitiationRequest;
import com.formance.formance_sdk.models.operations.DeleteTransferInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.DeleteTransferInitiationResponse;
import com.formance.formance_sdk.models.operations.ForwardBankAccountRequest;
import com.formance.formance_sdk.models.operations.ForwardBankAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.ForwardBankAccountResponse;
import com.formance.formance_sdk.models.operations.GetAccountBalancesRequest;
import com.formance.formance_sdk.models.operations.GetAccountBalancesRequestBuilder;
import com.formance.formance_sdk.models.operations.GetAccountBalancesResponse;
import com.formance.formance_sdk.models.operations.GetBankAccountRequest;
import com.formance.formance_sdk.models.operations.GetBankAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.GetBankAccountResponse;
import com.formance.formance_sdk.models.operations.GetConnectorTaskRequest;
import com.formance.formance_sdk.models.operations.GetConnectorTaskRequestBuilder;
import com.formance.formance_sdk.models.operations.GetConnectorTaskResponse;
import com.formance.formance_sdk.models.operations.GetConnectorTaskV1Request;
import com.formance.formance_sdk.models.operations.GetConnectorTaskV1RequestBuilder;
import com.formance.formance_sdk.models.operations.GetConnectorTaskV1Response;
import com.formance.formance_sdk.models.operations.GetPaymentRequest;
import com.formance.formance_sdk.models.operations.GetPaymentRequestBuilder;
import com.formance.formance_sdk.models.operations.GetPaymentResponse;
import com.formance.formance_sdk.models.operations.GetPoolBalancesLatestRequest;
import com.formance.formance_sdk.models.operations.GetPoolBalancesLatestRequestBuilder;
import com.formance.formance_sdk.models.operations.GetPoolBalancesLatestResponse;
import com.formance.formance_sdk.models.operations.GetPoolBalancesRequest;
import com.formance.formance_sdk.models.operations.GetPoolBalancesRequestBuilder;
import com.formance.formance_sdk.models.operations.GetPoolBalancesResponse;
import com.formance.formance_sdk.models.operations.GetPoolRequest;
import com.formance.formance_sdk.models.operations.GetPoolRequestBuilder;
import com.formance.formance_sdk.models.operations.GetPoolResponse;
import com.formance.formance_sdk.models.operations.GetTransferInitiationRequest;
import com.formance.formance_sdk.models.operations.GetTransferInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.GetTransferInitiationResponse;
import com.formance.formance_sdk.models.operations.InstallConnectorRequest;
import com.formance.formance_sdk.models.operations.InstallConnectorRequestBuilder;
import com.formance.formance_sdk.models.operations.InstallConnectorResponse;
import com.formance.formance_sdk.models.operations.ListAllConnectorsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListAllConnectorsResponse;
import com.formance.formance_sdk.models.operations.ListBankAccountsRequest;
import com.formance.formance_sdk.models.operations.ListBankAccountsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListBankAccountsResponse;
import com.formance.formance_sdk.models.operations.ListConfigsAvailableConnectorsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListConfigsAvailableConnectorsResponse;
import com.formance.formance_sdk.models.operations.ListConnectorTasksRequest;
import com.formance.formance_sdk.models.operations.ListConnectorTasksRequestBuilder;
import com.formance.formance_sdk.models.operations.ListConnectorTasksResponse;
import com.formance.formance_sdk.models.operations.ListConnectorTasksV1Request;
import com.formance.formance_sdk.models.operations.ListConnectorTasksV1RequestBuilder;
import com.formance.formance_sdk.models.operations.ListConnectorTasksV1Response;
import com.formance.formance_sdk.models.operations.ListPaymentsRequest;
import com.formance.formance_sdk.models.operations.ListPaymentsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListPaymentsResponse;
import com.formance.formance_sdk.models.operations.ListPoolsRequest;
import com.formance.formance_sdk.models.operations.ListPoolsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListPoolsResponse;
import com.formance.formance_sdk.models.operations.ListTransferInitiationsRequest;
import com.formance.formance_sdk.models.operations.ListTransferInitiationsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListTransferInitiationsResponse;
import com.formance.formance_sdk.models.operations.PaymentsgetAccountRequest;
import com.formance.formance_sdk.models.operations.PaymentsgetAccountRequestBuilder;
import com.formance.formance_sdk.models.operations.PaymentsgetAccountResponse;
import com.formance.formance_sdk.models.operations.PaymentsgetServerInfoRequestBuilder;
import com.formance.formance_sdk.models.operations.PaymentsgetServerInfoResponse;
import com.formance.formance_sdk.models.operations.PaymentslistAccountsRequest;
import com.formance.formance_sdk.models.operations.PaymentslistAccountsRequestBuilder;
import com.formance.formance_sdk.models.operations.PaymentslistAccountsResponse;
import com.formance.formance_sdk.models.operations.ReadConnectorConfigRequest;
import com.formance.formance_sdk.models.operations.ReadConnectorConfigRequestBuilder;
import com.formance.formance_sdk.models.operations.ReadConnectorConfigResponse;
import com.formance.formance_sdk.models.operations.ReadConnectorConfigV1Request;
import com.formance.formance_sdk.models.operations.ReadConnectorConfigV1RequestBuilder;
import com.formance.formance_sdk.models.operations.ReadConnectorConfigV1Response;
import com.formance.formance_sdk.models.operations.RemoveAccountFromPoolRequest;
import com.formance.formance_sdk.models.operations.RemoveAccountFromPoolRequestBuilder;
import com.formance.formance_sdk.models.operations.RemoveAccountFromPoolResponse;
import com.formance.formance_sdk.models.operations.ResetConnectorRequest;
import com.formance.formance_sdk.models.operations.ResetConnectorRequestBuilder;
import com.formance.formance_sdk.models.operations.ResetConnectorResponse;
import com.formance.formance_sdk.models.operations.ResetConnectorV1Request;
import com.formance.formance_sdk.models.operations.ResetConnectorV1RequestBuilder;
import com.formance.formance_sdk.models.operations.ResetConnectorV1Response;
import com.formance.formance_sdk.models.operations.RetryTransferInitiationRequest;
import com.formance.formance_sdk.models.operations.RetryTransferInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.RetryTransferInitiationResponse;
import com.formance.formance_sdk.models.operations.ReverseTransferInitiationRequest;
import com.formance.formance_sdk.models.operations.ReverseTransferInitiationRequestBuilder;
import com.formance.formance_sdk.models.operations.ReverseTransferInitiationResponse;
import com.formance.formance_sdk.models.operations.UninstallConnectorRequest;
import com.formance.formance_sdk.models.operations.UninstallConnectorRequestBuilder;
import com.formance.formance_sdk.models.operations.UninstallConnectorResponse;
import com.formance.formance_sdk.models.operations.UninstallConnectorV1Request;
import com.formance.formance_sdk.models.operations.UninstallConnectorV1RequestBuilder;
import com.formance.formance_sdk.models.operations.UninstallConnectorV1Response;
import com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataRequest;
import com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataRequestBuilder;
import com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataResponse;
import com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Request;
import com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1RequestBuilder;
import com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Response;
import com.formance.formance_sdk.models.operations.UpdateMetadataRequest;
import com.formance.formance_sdk.models.operations.UpdateMetadataRequestBuilder;
import com.formance.formance_sdk.models.operations.UpdateMetadataResponse;
import com.formance.formance_sdk.models.operations.UpdateTransferInitiationStatusRequest;
import com.formance.formance_sdk.models.operations.UpdateTransferInitiationStatusRequestBuilder;
import com.formance.formance_sdk.models.operations.UpdateTransferInitiationStatusResponse;
import com.formance.formance_sdk.models.shared.AccountRequest;
import com.formance.formance_sdk.models.shared.BankAccountRequest;
import com.formance.formance_sdk.models.shared.PaymentRequest;
import com.formance.formance_sdk.models.shared.PoolRequest;
import com.formance.formance_sdk.models.shared.TransferInitiationRequest;
import com.formance.formance_sdk.operations.AddAccountToPool;
import com.formance.formance_sdk.operations.ConnectorsTransfer;
import com.formance.formance_sdk.operations.CreateAccount;
import com.formance.formance_sdk.operations.CreateBankAccount;
import com.formance.formance_sdk.operations.CreatePayment;
import com.formance.formance_sdk.operations.CreatePool;
import com.formance.formance_sdk.operations.CreateTransferInitiation;
import com.formance.formance_sdk.operations.DeletePool;
import com.formance.formance_sdk.operations.DeleteTransferInitiation;
import com.formance.formance_sdk.operations.ForwardBankAccount;
import com.formance.formance_sdk.operations.GetAccountBalances;
import com.formance.formance_sdk.operations.GetBankAccount;
import com.formance.formance_sdk.operations.GetConnectorTask;
import com.formance.formance_sdk.operations.GetConnectorTaskV1;
import com.formance.formance_sdk.operations.GetPayment;
import com.formance.formance_sdk.operations.GetPool;
import com.formance.formance_sdk.operations.GetPoolBalances;
import com.formance.formance_sdk.operations.GetPoolBalancesLatest;
import com.formance.formance_sdk.operations.GetTransferInitiation;
import com.formance.formance_sdk.operations.InstallConnector;
import com.formance.formance_sdk.operations.ListAllConnectors;
import com.formance.formance_sdk.operations.ListBankAccounts;
import com.formance.formance_sdk.operations.ListConfigsAvailableConnectors;
import com.formance.formance_sdk.operations.ListConnectorTasks;
import com.formance.formance_sdk.operations.ListConnectorTasksV1;
import com.formance.formance_sdk.operations.ListPayments;
import com.formance.formance_sdk.operations.ListPools;
import com.formance.formance_sdk.operations.ListTransferInitiations;
import com.formance.formance_sdk.operations.PaymentsgetAccount;
import com.formance.formance_sdk.operations.PaymentsgetServerInfo;
import com.formance.formance_sdk.operations.PaymentslistAccounts;
import com.formance.formance_sdk.operations.ReadConnectorConfig;
import com.formance.formance_sdk.operations.ReadConnectorConfigV1;
import com.formance.formance_sdk.operations.RemoveAccountFromPool;
import com.formance.formance_sdk.operations.ResetConnector;
import com.formance.formance_sdk.operations.ResetConnectorV1;
import com.formance.formance_sdk.operations.RetryTransferInitiation;
import com.formance.formance_sdk.operations.ReverseTransferInitiation;
import com.formance.formance_sdk.operations.UninstallConnector;
import com.formance.formance_sdk.operations.UninstallConnectorV1;
import com.formance.formance_sdk.operations.UpdateBankAccountMetadata;
import com.formance.formance_sdk.operations.UpdateConnectorConfigV1;
import com.formance.formance_sdk.operations.UpdateMetadata;
import com.formance.formance_sdk.operations.UpdateTransferInitiationStatus;
import java.lang.Deprecated;
import java.lang.Exception;


public class PaymentsV1 {
    private final SDKConfiguration sdkConfiguration;

    PaymentsV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Add an account to a pool
     * 
     * <p>Add an account to a pool
     * 
     * @return The call builder
     */
    public AddAccountToPoolRequestBuilder addAccountToPool() {
        return new AddAccountToPoolRequestBuilder(sdkConfiguration);
    }

    /**
     * Add an account to a pool
     * 
     * <p>Add an account to a pool
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddAccountToPoolResponse addAccountToPool(AddAccountToPoolRequest request) throws Exception {
        RequestOperation<AddAccountToPoolRequest, AddAccountToPoolResponse> operation
              = new AddAccountToPool.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Transfer funds between Connector accounts
     * 
     * <p>Execute a transfer between two accounts.
     * 
     * @return The call builder
     */
    public ConnectorsTransferRequestBuilder connectorsTransfer() {
        return new ConnectorsTransferRequestBuilder(sdkConfiguration);
    }

    /**
     * Transfer funds between Connector accounts
     * 
     * <p>Execute a transfer between two accounts.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ConnectorsTransferResponse connectorsTransfer(ConnectorsTransferRequest request) throws Exception {
        RequestOperation<ConnectorsTransferRequest, ConnectorsTransferResponse> operation
              = new ConnectorsTransfer.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create an account
     * 
     * <p>Create an account
     * 
     * @return The call builder
     */
    public CreateAccountRequestBuilder createAccount() {
        return new CreateAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an account
     * 
     * <p>Create an account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAccountResponse createAccount(AccountRequest request) throws Exception {
        RequestOperation<AccountRequest, CreateAccountResponse> operation
              = new CreateAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a BankAccount in Payments and on the PSP
     * 
     * <p>Create a bank account in Payments and on the PSP.
     * 
     * @return The call builder
     */
    public CreateBankAccountRequestBuilder createBankAccount() {
        return new CreateBankAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a BankAccount in Payments and on the PSP
     * 
     * <p>Create a bank account in Payments and on the PSP.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBankAccountResponse createBankAccount(BankAccountRequest request) throws Exception {
        RequestOperation<BankAccountRequest, CreateBankAccountResponse> operation
              = new CreateBankAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a payment
     * 
     * <p>Create a payment
     * 
     * @return The call builder
     */
    public CreatePaymentRequestBuilder createPayment() {
        return new CreatePaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a payment
     * 
     * <p>Create a payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePaymentResponse createPayment(PaymentRequest request) throws Exception {
        RequestOperation<PaymentRequest, CreatePaymentResponse> operation
              = new CreatePayment.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a Pool
     * 
     * <p>Create a Pool
     * 
     * @return The call builder
     */
    public CreatePoolRequestBuilder createPool() {
        return new CreatePoolRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a Pool
     * 
     * <p>Create a Pool
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreatePoolResponse createPool(PoolRequest request) throws Exception {
        RequestOperation<PoolRequest, CreatePoolResponse> operation
              = new CreatePool.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a TransferInitiation
     * 
     * <p>Create a transfer initiation
     * 
     * @return The call builder
     */
    public CreateTransferInitiationRequestBuilder createTransferInitiation() {
        return new CreateTransferInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a TransferInitiation
     * 
     * <p>Create a transfer initiation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTransferInitiationResponse createTransferInitiation(TransferInitiationRequest request) throws Exception {
        RequestOperation<TransferInitiationRequest, CreateTransferInitiationResponse> operation
              = new CreateTransferInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a Pool
     * 
     * <p>Delete a pool by its id.
     * 
     * @return The call builder
     */
    public DeletePoolRequestBuilder deletePool() {
        return new DeletePoolRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a Pool
     * 
     * <p>Delete a pool by its id.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeletePoolResponse deletePool(DeletePoolRequest request) throws Exception {
        RequestOperation<DeletePoolRequest, DeletePoolResponse> operation
              = new DeletePool.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a transfer initiation
     * 
     * <p>Delete a transfer initiation by its id.
     * 
     * @return The call builder
     */
    public DeleteTransferInitiationRequestBuilder deleteTransferInitiation() {
        return new DeleteTransferInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a transfer initiation
     * 
     * <p>Delete a transfer initiation by its id.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteTransferInitiationResponse deleteTransferInitiation(DeleteTransferInitiationRequest request) throws Exception {
        RequestOperation<DeleteTransferInitiationRequest, DeleteTransferInitiationResponse> operation
              = new DeleteTransferInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Forward a bank account to a connector
     * 
     * @return The call builder
     */
    public ForwardBankAccountRequestBuilder forwardBankAccount() {
        return new ForwardBankAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Forward a bank account to a connector
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ForwardBankAccountResponse forwardBankAccount(ForwardBankAccountRequest request) throws Exception {
        RequestOperation<ForwardBankAccountRequest, ForwardBankAccountResponse> operation
              = new ForwardBankAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get account balances
     * 
     * @return The call builder
     */
    public GetAccountBalancesRequestBuilder getAccountBalances() {
        return new GetAccountBalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get account balances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAccountBalancesResponse getAccountBalances(GetAccountBalancesRequest request) throws Exception {
        RequestOperation<GetAccountBalancesRequest, GetAccountBalancesResponse> operation
              = new GetAccountBalances.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a bank account created by user on Formance
     * 
     * @return The call builder
     */
    public GetBankAccountRequestBuilder getBankAccount() {
        return new GetBankAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a bank account created by user on Formance
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBankAccountResponse getBankAccount(GetBankAccountRequest request) throws Exception {
        RequestOperation<GetBankAccountRequest, GetBankAccountResponse> operation
              = new GetBankAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Read a specific task of the connector
     * 
     * <p>Get a specific task associated to the connector.
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetConnectorTaskRequestBuilder getConnectorTask() {
        return new GetConnectorTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Read a specific task of the connector
     * 
     * <p>Get a specific task associated to the connector.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetConnectorTaskResponse getConnectorTask(GetConnectorTaskRequest request) throws Exception {
        RequestOperation<GetConnectorTaskRequest, GetConnectorTaskResponse> operation
              = new GetConnectorTask.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Read a specific task of the connector
     * 
     * <p>Get a specific task associated to the connector.
     * 
     * @return The call builder
     */
    public GetConnectorTaskV1RequestBuilder getConnectorTaskV1() {
        return new GetConnectorTaskV1RequestBuilder(sdkConfiguration);
    }

    /**
     * Read a specific task of the connector
     * 
     * <p>Get a specific task associated to the connector.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetConnectorTaskV1Response getConnectorTaskV1(GetConnectorTaskV1Request request) throws Exception {
        RequestOperation<GetConnectorTaskV1Request, GetConnectorTaskV1Response> operation
              = new GetConnectorTaskV1.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a payment
     * 
     * @return The call builder
     */
    public GetPaymentRequestBuilder getPayment() {
        return new GetPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentResponse getPayment(GetPaymentRequest request) throws Exception {
        RequestOperation<GetPaymentRequest, GetPaymentResponse> operation
              = new GetPayment.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a Pool
     * 
     * @return The call builder
     */
    public GetPoolRequestBuilder getPool() {
        return new GetPoolRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a Pool
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPoolResponse getPool(GetPoolRequest request) throws Exception {
        RequestOperation<GetPoolRequest, GetPoolResponse> operation
              = new GetPool.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get historical pool balances at a particular point in time
     * 
     * @return The call builder
     */
    public GetPoolBalancesRequestBuilder getPoolBalances() {
        return new GetPoolBalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get historical pool balances at a particular point in time
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPoolBalancesResponse getPoolBalances(GetPoolBalancesRequest request) throws Exception {
        RequestOperation<GetPoolBalancesRequest, GetPoolBalancesResponse> operation
              = new GetPoolBalances.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get latest pool balances
     * 
     * @return The call builder
     */
    public GetPoolBalancesLatestRequestBuilder getPoolBalancesLatest() {
        return new GetPoolBalancesLatestRequestBuilder(sdkConfiguration);
    }

    /**
     * Get latest pool balances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPoolBalancesLatestResponse getPoolBalancesLatest(GetPoolBalancesLatestRequest request) throws Exception {
        RequestOperation<GetPoolBalancesLatestRequest, GetPoolBalancesLatestResponse> operation
              = new GetPoolBalancesLatest.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a transfer initiation
     * 
     * @return The call builder
     */
    public GetTransferInitiationRequestBuilder getTransferInitiation() {
        return new GetTransferInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a transfer initiation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransferInitiationResponse getTransferInitiation(GetTransferInitiationRequest request) throws Exception {
        RequestOperation<GetTransferInitiationRequest, GetTransferInitiationResponse> operation
              = new GetTransferInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Install a connector
     * 
     * <p>Install a connector by its name and config.
     * 
     * @return The call builder
     */
    public InstallConnectorRequestBuilder installConnector() {
        return new InstallConnectorRequestBuilder(sdkConfiguration);
    }

    /**
     * Install a connector
     * 
     * <p>Install a connector by its name and config.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public InstallConnectorResponse installConnector(InstallConnectorRequest request) throws Exception {
        RequestOperation<InstallConnectorRequest, InstallConnectorResponse> operation
              = new InstallConnector.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all installed connectors
     * 
     * <p>List all installed connectors.
     * 
     * @return The call builder
     */
    public ListAllConnectorsRequestBuilder listAllConnectors() {
        return new ListAllConnectorsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all installed connectors
     * 
     * <p>List all installed connectors.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAllConnectorsResponse listAllConnectorsDirect() throws Exception {
        RequestlessOperation<ListAllConnectorsResponse> operation
            = new ListAllConnectors.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * List bank accounts created by user on Formance
     * 
     * <p>List all bank accounts created by user on Formance.
     * 
     * @return The call builder
     */
    public ListBankAccountsRequestBuilder listBankAccounts() {
        return new ListBankAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List bank accounts created by user on Formance
     * 
     * <p>List all bank accounts created by user on Formance.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListBankAccountsResponse listBankAccounts(ListBankAccountsRequest request) throws Exception {
        RequestOperation<ListBankAccountsRequest, ListBankAccountsResponse> operation
              = new ListBankAccounts.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List the configs of each available connector
     * 
     * <p>List the configs of each available connector.
     * 
     * @return The call builder
     */
    public ListConfigsAvailableConnectorsRequestBuilder listConfigsAvailableConnectors() {
        return new ListConfigsAvailableConnectorsRequestBuilder(sdkConfiguration);
    }

    /**
     * List the configs of each available connector
     * 
     * <p>List the configs of each available connector.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListConfigsAvailableConnectorsResponse listConfigsAvailableConnectorsDirect() throws Exception {
        RequestlessOperation<ListConfigsAvailableConnectorsResponse> operation
            = new ListConfigsAvailableConnectors.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * List tasks from a connector
     * 
     * <p>List all tasks associated with this connector.
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListConnectorTasksRequestBuilder listConnectorTasks() {
        return new ListConnectorTasksRequestBuilder(sdkConfiguration);
    }

    /**
     * List tasks from a connector
     * 
     * <p>List all tasks associated with this connector.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListConnectorTasksResponse listConnectorTasks(ListConnectorTasksRequest request) throws Exception {
        RequestOperation<ListConnectorTasksRequest, ListConnectorTasksResponse> operation
              = new ListConnectorTasks.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List tasks from a connector
     * 
     * <p>List all tasks associated with this connector.
     * 
     * @return The call builder
     */
    public ListConnectorTasksV1RequestBuilder listConnectorTasksV1() {
        return new ListConnectorTasksV1RequestBuilder(sdkConfiguration);
    }

    /**
     * List tasks from a connector
     * 
     * <p>List all tasks associated with this connector.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListConnectorTasksV1Response listConnectorTasksV1(ListConnectorTasksV1Request request) throws Exception {
        RequestOperation<ListConnectorTasksV1Request, ListConnectorTasksV1Response> operation
              = new ListConnectorTasksV1.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List payments
     * 
     * @return The call builder
     */
    public ListPaymentsRequestBuilder listPayments() {
        return new ListPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPaymentsResponse listPayments(ListPaymentsRequest request) throws Exception {
        RequestOperation<ListPaymentsRequest, ListPaymentsResponse> operation
              = new ListPayments.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Pools
     * 
     * @return The call builder
     */
    public ListPoolsRequestBuilder listPools() {
        return new ListPoolsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Pools
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListPoolsResponse listPools(ListPoolsRequest request) throws Exception {
        RequestOperation<ListPoolsRequest, ListPoolsResponse> operation
              = new ListPools.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List Transfer Initiations
     * 
     * @return The call builder
     */
    public ListTransferInitiationsRequestBuilder listTransferInitiations() {
        return new ListTransferInitiationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List Transfer Initiations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTransferInitiationsResponse listTransferInitiations(ListTransferInitiationsRequest request) throws Exception {
        RequestOperation<ListTransferInitiationsRequest, ListTransferInitiationsResponse> operation
              = new ListTransferInitiations.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get an account
     * 
     * @return The call builder
     */
    public PaymentsgetAccountRequestBuilder paymentsgetAccount() {
        return new PaymentsgetAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get an account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentsgetAccountResponse paymentsgetAccount(PaymentsgetAccountRequest request) throws Exception {
        RequestOperation<PaymentsgetAccountRequest, PaymentsgetAccountResponse> operation
              = new PaymentsgetAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get server info
     * 
     * @return The call builder
     */
    public PaymentsgetServerInfoRequestBuilder paymentsgetServerInfo() {
        return new PaymentsgetServerInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get server info
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentsgetServerInfoResponse paymentsgetServerInfoDirect() throws Exception {
        RequestlessOperation<PaymentsgetServerInfoResponse> operation
            = new PaymentsgetServerInfo.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * List accounts
     * 
     * @return The call builder
     */
    public PaymentslistAccountsRequestBuilder paymentslistAccounts() {
        return new PaymentslistAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PaymentslistAccountsResponse paymentslistAccounts(PaymentslistAccountsRequest request) throws Exception {
        RequestOperation<PaymentslistAccountsRequest, PaymentslistAccountsResponse> operation
              = new PaymentslistAccounts.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Read the config of a connector
     * 
     * <p>Read connector config
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ReadConnectorConfigRequestBuilder readConnectorConfig() {
        return new ReadConnectorConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * Read the config of a connector
     * 
     * <p>Read connector config
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ReadConnectorConfigResponse readConnectorConfig(ReadConnectorConfigRequest request) throws Exception {
        RequestOperation<ReadConnectorConfigRequest, ReadConnectorConfigResponse> operation
              = new ReadConnectorConfig.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Read the config of a connector
     * 
     * <p>Read connector config
     * 
     * @return The call builder
     */
    public ReadConnectorConfigV1RequestBuilder readConnectorConfigV1() {
        return new ReadConnectorConfigV1RequestBuilder(sdkConfiguration);
    }

    /**
     * Read the config of a connector
     * 
     * <p>Read connector config
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ReadConnectorConfigV1Response readConnectorConfigV1(ReadConnectorConfigV1Request request) throws Exception {
        RequestOperation<ReadConnectorConfigV1Request, ReadConnectorConfigV1Response> operation
              = new ReadConnectorConfigV1.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove an account from a pool
     * 
     * <p>Remove an account from a pool by its id.
     * 
     * @return The call builder
     */
    public RemoveAccountFromPoolRequestBuilder removeAccountFromPool() {
        return new RemoveAccountFromPoolRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an account from a pool
     * 
     * <p>Remove an account from a pool by its id.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveAccountFromPoolResponse removeAccountFromPool(RemoveAccountFromPoolRequest request) throws Exception {
        RequestOperation<RemoveAccountFromPoolRequest, RemoveAccountFromPoolResponse> operation
              = new RemoveAccountFromPool.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Reset a connector
     * 
     * <p>Reset a connector by its name.
     * It will remove the connector and ALL PAYMENTS generated with it.
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ResetConnectorRequestBuilder resetConnector() {
        return new ResetConnectorRequestBuilder(sdkConfiguration);
    }

    /**
     * Reset a connector
     * 
     * <p>Reset a connector by its name.
     * It will remove the connector and ALL PAYMENTS generated with it.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ResetConnectorResponse resetConnector(ResetConnectorRequest request) throws Exception {
        RequestOperation<ResetConnectorRequest, ResetConnectorResponse> operation
              = new ResetConnector.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Reset a connector
     * 
     * <p>Reset a connector by its name.
     * It will remove the connector and ALL PAYMENTS generated with it.
     * 
     * @return The call builder
     */
    public ResetConnectorV1RequestBuilder resetConnectorV1() {
        return new ResetConnectorV1RequestBuilder(sdkConfiguration);
    }

    /**
     * Reset a connector
     * 
     * <p>Reset a connector by its name.
     * It will remove the connector and ALL PAYMENTS generated with it.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ResetConnectorV1Response resetConnectorV1(ResetConnectorV1Request request) throws Exception {
        RequestOperation<ResetConnectorV1Request, ResetConnectorV1Response> operation
              = new ResetConnectorV1.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retry a failed transfer initiation
     * 
     * <p>Retry a failed transfer initiation
     * 
     * @return The call builder
     */
    public RetryTransferInitiationRequestBuilder retryTransferInitiation() {
        return new RetryTransferInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Retry a failed transfer initiation
     * 
     * <p>Retry a failed transfer initiation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RetryTransferInitiationResponse retryTransferInitiation(RetryTransferInitiationRequest request) throws Exception {
        RequestOperation<RetryTransferInitiationRequest, RetryTransferInitiationResponse> operation
              = new RetryTransferInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Reverse a transfer initiation
     * 
     * <p>Reverse transfer initiation
     * 
     * @return The call builder
     */
    public ReverseTransferInitiationRequestBuilder reverseTransferInitiation() {
        return new ReverseTransferInitiationRequestBuilder(sdkConfiguration);
    }

    /**
     * Reverse a transfer initiation
     * 
     * <p>Reverse transfer initiation
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ReverseTransferInitiationResponse reverseTransferInitiation(ReverseTransferInitiationRequest request) throws Exception {
        RequestOperation<ReverseTransferInitiationRequest, ReverseTransferInitiationResponse> operation
              = new ReverseTransferInitiation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Uninstall a connector
     * 
     * <p>Uninstall a connector by its name.
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public UninstallConnectorRequestBuilder uninstallConnector() {
        return new UninstallConnectorRequestBuilder(sdkConfiguration);
    }

    /**
     * Uninstall a connector
     * 
     * <p>Uninstall a connector by its name.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public UninstallConnectorResponse uninstallConnector(UninstallConnectorRequest request) throws Exception {
        RequestOperation<UninstallConnectorRequest, UninstallConnectorResponse> operation
              = new UninstallConnector.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Uninstall a connector
     * 
     * <p>Uninstall a connector by its name.
     * 
     * @return The call builder
     */
    public UninstallConnectorV1RequestBuilder uninstallConnectorV1() {
        return new UninstallConnectorV1RequestBuilder(sdkConfiguration);
    }

    /**
     * Uninstall a connector
     * 
     * <p>Uninstall a connector by its name.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UninstallConnectorV1Response uninstallConnectorV1(UninstallConnectorV1Request request) throws Exception {
        RequestOperation<UninstallConnectorV1Request, UninstallConnectorV1Response> operation
              = new UninstallConnectorV1.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update metadata of a bank account
     * 
     * @return The call builder
     */
    public UpdateBankAccountMetadataRequestBuilder updateBankAccountMetadata() {
        return new UpdateBankAccountMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Update metadata of a bank account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateBankAccountMetadataResponse updateBankAccountMetadata(UpdateBankAccountMetadataRequest request) throws Exception {
        RequestOperation<UpdateBankAccountMetadataRequest, UpdateBankAccountMetadataResponse> operation
              = new UpdateBankAccountMetadata.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update the config of a connector
     * 
     * <p>Update connector config
     * 
     * @return The call builder
     */
    public UpdateConnectorConfigV1RequestBuilder updateConnectorConfigV1() {
        return new UpdateConnectorConfigV1RequestBuilder(sdkConfiguration);
    }

    /**
     * Update the config of a connector
     * 
     * <p>Update connector config
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateConnectorConfigV1Response updateConnectorConfigV1(UpdateConnectorConfigV1Request request) throws Exception {
        RequestOperation<UpdateConnectorConfigV1Request, UpdateConnectorConfigV1Response> operation
              = new UpdateConnectorConfigV1.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update metadata
     * 
     * @return The call builder
     */
    public UpdateMetadataRequestBuilder updateMetadata() {
        return new UpdateMetadataRequestBuilder(sdkConfiguration);
    }

    /**
     * Update metadata
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateMetadataResponse updateMetadata(UpdateMetadataRequest request) throws Exception {
        RequestOperation<UpdateMetadataRequest, UpdateMetadataResponse> operation
              = new UpdateMetadata.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update the status of a transfer initiation
     * 
     * <p>Update a transfer initiation status
     * 
     * @return The call builder
     */
    public UpdateTransferInitiationStatusRequestBuilder updateTransferInitiationStatus() {
        return new UpdateTransferInitiationStatusRequestBuilder(sdkConfiguration);
    }

    /**
     * Update the status of a transfer initiation
     * 
     * <p>Update a transfer initiation status
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTransferInitiationStatusResponse updateTransferInitiationStatus(UpdateTransferInitiationStatusRequest request) throws Exception {
        RequestOperation<UpdateTransferInitiationStatusRequest, UpdateTransferInitiationStatusResponse> operation
              = new UpdateTransferInitiationStatus.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
