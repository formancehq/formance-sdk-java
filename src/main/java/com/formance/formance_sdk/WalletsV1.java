/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static com.formance.formance_sdk.operations.Operations.RequestOperation;
import static com.formance.formance_sdk.operations.Operations.RequestlessOperation;

import com.formance.formance_sdk.models.operations.ConfirmHoldRequest;
import com.formance.formance_sdk.models.operations.ConfirmHoldRequestBuilder;
import com.formance.formance_sdk.models.operations.ConfirmHoldResponse;
import com.formance.formance_sdk.models.operations.CreateBalanceRequest;
import com.formance.formance_sdk.models.operations.CreateBalanceRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateBalanceResponse;
import com.formance.formance_sdk.models.operations.CreateWalletRequest;
import com.formance.formance_sdk.models.operations.CreateWalletRequestBuilder;
import com.formance.formance_sdk.models.operations.CreateWalletResponse;
import com.formance.formance_sdk.models.operations.CreditWalletRequest;
import com.formance.formance_sdk.models.operations.CreditWalletRequestBuilder;
import com.formance.formance_sdk.models.operations.CreditWalletResponse;
import com.formance.formance_sdk.models.operations.DebitWalletRequest;
import com.formance.formance_sdk.models.operations.DebitWalletRequestBuilder;
import com.formance.formance_sdk.models.operations.DebitWalletResponse;
import com.formance.formance_sdk.models.operations.GetBalanceRequest;
import com.formance.formance_sdk.models.operations.GetBalanceRequestBuilder;
import com.formance.formance_sdk.models.operations.GetBalanceResponse;
import com.formance.formance_sdk.models.operations.GetHoldRequest;
import com.formance.formance_sdk.models.operations.GetHoldRequestBuilder;
import com.formance.formance_sdk.models.operations.GetHoldResponse;
import com.formance.formance_sdk.models.operations.GetHoldsRequest;
import com.formance.formance_sdk.models.operations.GetHoldsRequestBuilder;
import com.formance.formance_sdk.models.operations.GetHoldsResponse;
import com.formance.formance_sdk.models.operations.GetTransactionsRequest;
import com.formance.formance_sdk.models.operations.GetTransactionsRequestBuilder;
import com.formance.formance_sdk.models.operations.GetTransactionsResponse;
import com.formance.formance_sdk.models.operations.GetWalletRequest;
import com.formance.formance_sdk.models.operations.GetWalletRequestBuilder;
import com.formance.formance_sdk.models.operations.GetWalletResponse;
import com.formance.formance_sdk.models.operations.GetWalletSummaryRequest;
import com.formance.formance_sdk.models.operations.GetWalletSummaryRequestBuilder;
import com.formance.formance_sdk.models.operations.GetWalletSummaryResponse;
import com.formance.formance_sdk.models.operations.ListBalancesRequest;
import com.formance.formance_sdk.models.operations.ListBalancesRequestBuilder;
import com.formance.formance_sdk.models.operations.ListBalancesResponse;
import com.formance.formance_sdk.models.operations.ListWalletsRequest;
import com.formance.formance_sdk.models.operations.ListWalletsRequestBuilder;
import com.formance.formance_sdk.models.operations.ListWalletsResponse;
import com.formance.formance_sdk.models.operations.UpdateWalletRequest;
import com.formance.formance_sdk.models.operations.UpdateWalletRequestBuilder;
import com.formance.formance_sdk.models.operations.UpdateWalletResponse;
import com.formance.formance_sdk.models.operations.VoidHoldRequest;
import com.formance.formance_sdk.models.operations.VoidHoldRequestBuilder;
import com.formance.formance_sdk.models.operations.VoidHoldResponse;
import com.formance.formance_sdk.models.operations.WalletsgetServerInfoRequestBuilder;
import com.formance.formance_sdk.models.operations.WalletsgetServerInfoResponse;
import com.formance.formance_sdk.operations.ConfirmHold;
import com.formance.formance_sdk.operations.CreateBalance;
import com.formance.formance_sdk.operations.CreateWallet;
import com.formance.formance_sdk.operations.CreditWallet;
import com.formance.formance_sdk.operations.DebitWallet;
import com.formance.formance_sdk.operations.GetBalance;
import com.formance.formance_sdk.operations.GetHold;
import com.formance.formance_sdk.operations.GetHolds;
import com.formance.formance_sdk.operations.GetTransactions;
import com.formance.formance_sdk.operations.GetWallet;
import com.formance.formance_sdk.operations.GetWalletSummary;
import com.formance.formance_sdk.operations.ListBalances;
import com.formance.formance_sdk.operations.ListWallets;
import com.formance.formance_sdk.operations.UpdateWallet;
import com.formance.formance_sdk.operations.VoidHold;
import com.formance.formance_sdk.operations.WalletsgetServerInfo;
import java.lang.Exception;


public class WalletsV1 {
    private final SDKConfiguration sdkConfiguration;

    WalletsV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Confirm a hold
     * 
     * @return The call builder
     */
    public ConfirmHoldRequestBuilder confirmHold() {
        return new ConfirmHoldRequestBuilder(sdkConfiguration);
    }

    /**
     * Confirm a hold
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ConfirmHoldResponse confirmHold(ConfirmHoldRequest request) throws Exception {
        RequestOperation<ConfirmHoldRequest, ConfirmHoldResponse> operation
              = new ConfirmHold.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a balance
     * 
     * @return The call builder
     */
    public CreateBalanceRequestBuilder createBalance() {
        return new CreateBalanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a balance
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBalanceResponse createBalance(CreateBalanceRequest request) throws Exception {
        RequestOperation<CreateBalanceRequest, CreateBalanceResponse> operation
              = new CreateBalance.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a new wallet
     * 
     * @return The call builder
     */
    public CreateWalletRequestBuilder createWallet() {
        return new CreateWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a new wallet
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWalletResponse createWallet(CreateWalletRequest request) throws Exception {
        RequestOperation<CreateWalletRequest, CreateWalletResponse> operation
              = new CreateWallet.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Credit a wallet
     * 
     * @return The call builder
     */
    public CreditWalletRequestBuilder creditWallet() {
        return new CreditWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Credit a wallet
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreditWalletResponse creditWallet(CreditWalletRequest request) throws Exception {
        RequestOperation<CreditWalletRequest, CreditWalletResponse> operation
              = new CreditWallet.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Debit a wallet
     * 
     * @return The call builder
     */
    public DebitWalletRequestBuilder debitWallet() {
        return new DebitWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Debit a wallet
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DebitWalletResponse debitWallet(DebitWalletRequest request) throws Exception {
        RequestOperation<DebitWalletRequest, DebitWalletResponse> operation
              = new DebitWallet.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get detailed balance
     * 
     * @return The call builder
     */
    public GetBalanceRequestBuilder getBalance() {
        return new GetBalanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Get detailed balance
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBalanceResponse getBalance(GetBalanceRequest request) throws Exception {
        RequestOperation<GetBalanceRequest, GetBalanceResponse> operation
              = new GetBalance.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a hold
     * 
     * @return The call builder
     */
    public GetHoldRequestBuilder getHold() {
        return new GetHoldRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a hold
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetHoldResponse getHold(GetHoldRequest request) throws Exception {
        RequestOperation<GetHoldRequest, GetHoldResponse> operation
              = new GetHold.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get all holds for a wallet
     * 
     * @return The call builder
     */
    public GetHoldsRequestBuilder getHolds() {
        return new GetHoldsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get all holds for a wallet
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetHoldsResponse getHolds(GetHoldsRequest request) throws Exception {
        RequestOperation<GetHoldsRequest, GetHoldsResponse> operation
              = new GetHolds.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns a builder to make a request.
     * 
     * @return The call builder
     */
    public GetTransactionsRequestBuilder getTransactions() {
        return new GetTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Makes a request.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransactionsResponse getTransactions(GetTransactionsRequest request) throws Exception {
        RequestOperation<GetTransactionsRequest, GetTransactionsResponse> operation
              = new GetTransactions.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a wallet
     * 
     * @return The call builder
     */
    public GetWalletRequestBuilder getWallet() {
        return new GetWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a wallet
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWalletResponse getWallet(GetWalletRequest request) throws Exception {
        RequestOperation<GetWalletRequest, GetWalletResponse> operation
              = new GetWallet.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get wallet summary
     * 
     * @return The call builder
     */
    public GetWalletSummaryRequestBuilder getWalletSummary() {
        return new GetWalletSummaryRequestBuilder(sdkConfiguration);
    }

    /**
     * Get wallet summary
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWalletSummaryResponse getWalletSummary(GetWalletSummaryRequest request) throws Exception {
        RequestOperation<GetWalletSummaryRequest, GetWalletSummaryResponse> operation
              = new GetWalletSummary.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List balances of a wallet
     * 
     * @return The call builder
     */
    public ListBalancesRequestBuilder listBalances() {
        return new ListBalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * List balances of a wallet
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListBalancesResponse listBalances(ListBalancesRequest request) throws Exception {
        RequestOperation<ListBalancesRequest, ListBalancesResponse> operation
              = new ListBalances.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all wallets
     * 
     * @return The call builder
     */
    public ListWalletsRequestBuilder listWallets() {
        return new ListWalletsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all wallets
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListWalletsResponse listWallets(ListWalletsRequest request) throws Exception {
        RequestOperation<ListWalletsRequest, ListWalletsResponse> operation
              = new ListWallets.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a wallet
     * 
     * @return The call builder
     */
    public UpdateWalletRequestBuilder updateWallet() {
        return new UpdateWalletRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a wallet
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateWalletResponse updateWallet(UpdateWalletRequest request) throws Exception {
        RequestOperation<UpdateWalletRequest, UpdateWalletResponse> operation
              = new UpdateWallet.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Cancel a hold
     * 
     * @return The call builder
     */
    public VoidHoldRequestBuilder voidHold() {
        return new VoidHoldRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel a hold
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VoidHoldResponse voidHold(VoidHoldRequest request) throws Exception {
        RequestOperation<VoidHoldRequest, VoidHoldResponse> operation
              = new VoidHold.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get server info
     * 
     * @return The call builder
     */
    public WalletsgetServerInfoRequestBuilder walletsgetServerInfo() {
        return new WalletsgetServerInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get server info
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public WalletsgetServerInfoResponse walletsgetServerInfoDirect() throws Exception {
        RequestlessOperation<WalletsgetServerInfoResponse> operation
            = new WalletsgetServerInfo.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

}
