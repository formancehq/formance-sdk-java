/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.formance.formance_sdk.models.operations.CreatePolicyResponse;
import com.formance.formance_sdk.models.operations.DeletePolicyRequest;
import com.formance.formance_sdk.models.operations.DeletePolicyResponse;
import com.formance.formance_sdk.models.operations.GetPolicyRequest;
import com.formance.formance_sdk.models.operations.GetPolicyResponse;
import com.formance.formance_sdk.models.operations.GetReconciliationRequest;
import com.formance.formance_sdk.models.operations.GetReconciliationResponse;
import com.formance.formance_sdk.models.operations.ListPoliciesRequest;
import com.formance.formance_sdk.models.operations.ListPoliciesResponse;
import com.formance.formance_sdk.models.operations.ListReconciliationsRequest;
import com.formance.formance_sdk.models.operations.ListReconciliationsResponse;
import com.formance.formance_sdk.models.operations.ReconcileRequest;
import com.formance.formance_sdk.models.operations.ReconcileResponse;
import com.formance.formance_sdk.models.operations.ReconciliationgetServerInfoResponse;
import com.formance.formance_sdk.models.shared.PoliciesCursorResponse;
import com.formance.formance_sdk.models.shared.PoliciesCursorResponseCursor;
import com.formance.formance_sdk.models.shared.Policy;
import com.formance.formance_sdk.models.shared.PolicyRequest;
import com.formance.formance_sdk.models.shared.PolicyResponse;
import com.formance.formance_sdk.models.shared.Reconciliation;
import com.formance.formance_sdk.models.shared.ReconciliationRequest;
import com.formance.formance_sdk.models.shared.ReconciliationResponse;
import com.formance.formance_sdk.models.shared.ReconciliationsCursorResponse;
import com.formance.formance_sdk.models.shared.ReconciliationsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.ServerInfo;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;

public class SDKReconciliationV1Tests {

    @Test
    public void testSDKReconciliationV1_CreatePolicy() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createPolicy");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        PolicyRequest req = PolicyRequest.builder()
                .ledgerName("default")
                .ledgerQuery(Map.ofEntries(
                    Map.entry("key", "<value>")))
                .name("XXX")
                .paymentsPoolID("XXX")
                .build();

        CreatePolicyResponse res = sdk.reconciliation().v1().createPolicy()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            PolicyResponse.builder()
            .data(Policy.builder()
                .createdAt(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                .id("XXX")
                .ledgerName("default")
                .ledgerQuery(Map.ofEntries(
                    Map.entry("key", "<value>")))
                .name("XXX")
                .paymentsPoolID("XXX")
                .build())
            .build(),
            res.policyResponse().get());
    }

    @Test
    public void testSDKReconciliationV1_DeletePolicy() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("deletePolicy");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        DeletePolicyRequest req = DeletePolicyRequest.builder()
                .policyID("XXX")
                .build();

        DeletePolicyResponse res = sdk.reconciliation().v1().deletePolicy()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKReconciliationV1_GetPolicy() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getPolicy");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetPolicyRequest req = GetPolicyRequest.builder()
                .policyID("XXX")
                .build();

        GetPolicyResponse res = sdk.reconciliation().v1().getPolicy()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PolicyResponse.builder()
            .data(Policy.builder()
                .createdAt(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                .id("XXX")
                .ledgerName("default")
                .ledgerQuery(Map.ofEntries(
                ))
                .name("XXX")
                .paymentsPoolID("XXX")
                .build())
            .build(),
            res.policyResponse().get());
    }

    @Test
    public void testSDKReconciliationV1_GetReconciliation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getReconciliation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetReconciliationRequest req = GetReconciliationRequest.builder()
                .reconciliationID("XXX")
                .build();

        GetReconciliationResponse res = sdk.reconciliation().v1().getReconciliation()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ReconciliationResponse.builder()
            .data(Reconciliation.builder()
                .createdAt(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                .driftBalances(Map.ofEntries(
                    Map.entry("key", new BigInteger("20102"))))
                .id("XXX")
                .ledgerBalances(Map.ofEntries(
                    Map.entry("key", new BigInteger("644430"))))
                .paymentsBalances(Map.ofEntries(
                    Map.entry("key", new BigInteger("515705")),
                    Map.entry("key1", new BigInteger("559208")),
                    Map.entry("key2", new BigInteger("533533"))))
                .policyID("XXX")
                .reconciledAtLedger(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                .reconciledAtPayments(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                .status("COMPLETED")
                .build())
            .build(),
            res.reconciliationResponse().get());
    }

    @Test
    public void testSDKReconciliationV1_ListPolicies() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listPolicies");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListPoliciesRequest req = ListPoliciesRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        ListPoliciesResponse res = sdk.reconciliation().v1().listPolicies()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PoliciesCursorResponse.builder()
            .cursor(PoliciesCursorResponseCursor.builder()
                .data(List.of(
                    Policy.builder()
                        .createdAt(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .id("XXX")
                        .ledgerName("default")
                        .ledgerQuery(Map.ofEntries(
                            Map.entry("key", "<value>"),
                            Map.entry("key1", "<value>"),
                            Map.entry("key2", "<value>")))
                        .name("XXX")
                        .paymentsPoolID("XXX")
                        .build(),
                    Policy.builder()
                        .createdAt(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .id("XXX")
                        .ledgerName("default")
                        .ledgerQuery(Map.ofEntries(
                            Map.entry("key", "<value>"),
                            Map.entry("key1", "<value>")))
                        .name("XXX")
                        .paymentsPoolID("XXX")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.policiesCursorResponse().get());
    }

    @Test
    public void testSDKReconciliationV1_ListReconciliations() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listReconciliations");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListReconciliationsRequest req = ListReconciliationsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        ListReconciliationsResponse res = sdk.reconciliation().v1().listReconciliations()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ReconciliationsCursorResponse.builder()
            .cursor(ReconciliationsCursorResponseCursor.builder()
                .data(List.of(
                    Reconciliation.builder()
                        .createdAt(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .driftBalances(Map.ofEntries(
                            Map.entry("key", new BigInteger("241236"))))
                        .id("XXX")
                        .ledgerBalances(Map.ofEntries(
                            Map.entry("key", new BigInteger("129090"))))
                        .paymentsBalances(Map.ofEntries(
                        ))
                        .policyID("XXX")
                        .reconciledAtLedger(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .reconciledAtPayments(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .status("COMPLETED")
                        .build(),
                    Reconciliation.builder()
                        .createdAt(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .driftBalances(Map.ofEntries(
                            Map.entry("key", new BigInteger("348338")),
                            Map.entry("key1", new BigInteger("435529"))))
                        .id("XXX")
                        .ledgerBalances(Map.ofEntries(
                            Map.entry("key", new BigInteger("522670")),
                            Map.entry("key1", new BigInteger("92384"))))
                        .paymentsBalances(Map.ofEntries(
                            Map.entry("key", new BigInteger("973678"))))
                        .policyID("XXX")
                        .reconciledAtLedger(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .reconciledAtPayments(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .status("COMPLETED")
                        .build(),
                    Reconciliation.builder()
                        .createdAt(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .driftBalances(Map.ofEntries(
                            Map.entry("key", new BigInteger("428459")),
                            Map.entry("key1", new BigInteger("727")),
                            Map.entry("key2", new BigInteger("640782"))))
                        .id("XXX")
                        .ledgerBalances(Map.ofEntries(
                        ))
                        .paymentsBalances(Map.ofEntries(
                            Map.entry("key", new BigInteger("119837"))))
                        .policyID("XXX")
                        .reconciledAtLedger(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .reconciledAtPayments(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                        .status("COMPLETED")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.reconciliationsCursorResponse().get());
    }

    @Test
    public void testSDKReconciliationV1_Reconcile() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("reconcile");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ReconcileRequest req = ReconcileRequest.builder()
                .reconciliationRequest(ReconciliationRequest.builder()
                    .reconciledAtLedger(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                    .reconciledAtPayments(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                    .build())
                .policyID("XXX")
                .build();

        ReconcileResponse res = sdk.reconciliation().v1().reconcile()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ReconciliationResponse.builder()
            .data(Reconciliation.builder()
                .createdAt(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                .driftBalances(Map.ofEntries(
                    Map.entry("key", new BigInteger("971386"))))
                .id("XXX")
                .ledgerBalances(Map.ofEntries(
                    Map.entry("key", new BigInteger("1060")),
                    Map.entry("key1", new BigInteger("30487")),
                    Map.entry("key2", new BigInteger("427345"))))
                .paymentsBalances(Map.ofEntries(
                    Map.entry("key", new BigInteger("17991")),
                    Map.entry("key1", new BigInteger("837229"))))
                .policyID("XXX")
                .reconciledAtLedger(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                .reconciledAtPayments(OffsetDateTime.parse("2021-01-01T00:00:00.000Z"))
                .status("COMPLETED")
                .build())
            .build(),
            res.reconciliationResponse().get());
    }

    @Test
    public void testSDKReconciliationV1_ReconciliationgetServerInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("reconciliationgetServerInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ReconciliationgetServerInfoResponse res = sdk.reconciliation().v1().reconciliationgetServerInfo()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ServerInfo.builder()
            .version("<value>")
            .build(),
            res.serverInfo().get());
    }
}