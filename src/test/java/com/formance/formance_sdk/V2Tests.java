/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.formance.formance_sdk.models.operations.GetMetricsResponse;
import com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionRequest;
import com.formance.formance_sdk.models.operations.V2AddMetadataOnTransactionResponse;
import com.formance.formance_sdk.models.operations.V2AddMetadataToAccountRequest;
import com.formance.formance_sdk.models.operations.V2AddMetadataToAccountResponse;
import com.formance.formance_sdk.models.operations.V2CountAccountsRequest;
import com.formance.formance_sdk.models.operations.V2CountAccountsResponse;
import com.formance.formance_sdk.models.operations.V2CountTransactionsRequest;
import com.formance.formance_sdk.models.operations.V2CountTransactionsResponse;
import com.formance.formance_sdk.models.operations.V2CreateBulkRequest;
import com.formance.formance_sdk.models.operations.V2CreateBulkResponse;
import com.formance.formance_sdk.models.operations.V2CreateLedgerRequest;
import com.formance.formance_sdk.models.operations.V2CreateLedgerResponse;
import com.formance.formance_sdk.models.operations.V2CreateTransactionRequest;
import com.formance.formance_sdk.models.operations.V2CreateTransactionResponse;
import com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataRequest;
import com.formance.formance_sdk.models.operations.V2DeleteAccountMetadataResponse;
import com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataRequest;
import com.formance.formance_sdk.models.operations.V2DeleteLedgerMetadataResponse;
import com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataRequest;
import com.formance.formance_sdk.models.operations.V2DeleteTransactionMetadataResponse;
import com.formance.formance_sdk.models.operations.V2ExportLogsRequest;
import com.formance.formance_sdk.models.operations.V2ExportLogsResponse;
import com.formance.formance_sdk.models.operations.V2GetAccountRequest;
import com.formance.formance_sdk.models.operations.V2GetAccountResponse;
import com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedRequest;
import com.formance.formance_sdk.models.operations.V2GetBalancesAggregatedResponse;
import com.formance.formance_sdk.models.operations.V2GetInfoResponse;
import com.formance.formance_sdk.models.operations.V2GetLedgerInfoRequest;
import com.formance.formance_sdk.models.operations.V2GetLedgerInfoResponse;
import com.formance.formance_sdk.models.operations.V2GetLedgerRequest;
import com.formance.formance_sdk.models.operations.V2GetLedgerResponse;
import com.formance.formance_sdk.models.operations.V2GetTransactionRequest;
import com.formance.formance_sdk.models.operations.V2GetTransactionResponse;
import com.formance.formance_sdk.models.operations.V2GetVolumesWithBalancesRequest;
import com.formance.formance_sdk.models.operations.V2GetVolumesWithBalancesResponse;
import com.formance.formance_sdk.models.operations.V2ImportLogsRequest;
import com.formance.formance_sdk.models.operations.V2ImportLogsResponse;
import com.formance.formance_sdk.models.operations.V2ListAccountsRequest;
import com.formance.formance_sdk.models.operations.V2ListAccountsResponse;
import com.formance.formance_sdk.models.operations.V2ListLedgersRequest;
import com.formance.formance_sdk.models.operations.V2ListLedgersResponse;
import com.formance.formance_sdk.models.operations.V2ListLogsRequest;
import com.formance.formance_sdk.models.operations.V2ListLogsResponse;
import com.formance.formance_sdk.models.operations.V2ListTransactionsRequest;
import com.formance.formance_sdk.models.operations.V2ListTransactionsResponse;
import com.formance.formance_sdk.models.operations.V2ReadStatsRequest;
import com.formance.formance_sdk.models.operations.V2ReadStatsResponse;
import com.formance.formance_sdk.models.operations.V2RevertTransactionRequest;
import com.formance.formance_sdk.models.operations.V2RevertTransactionResponse;
import com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataRequest;
import com.formance.formance_sdk.models.operations.V2UpdateLedgerMetadataResponse;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.V2Account;
import com.formance.formance_sdk.models.shared.V2AccountResponse;
import com.formance.formance_sdk.models.shared.V2AccountsCursorResponse;
import com.formance.formance_sdk.models.shared.V2AccountsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V2AggregateBalancesResponse;
import com.formance.formance_sdk.models.shared.V2BulkElementResultDeleteMetadataSchemas;
import com.formance.formance_sdk.models.shared.V2BulkElementResultErrorSchemas;
import com.formance.formance_sdk.models.shared.V2BulkResponse;
import com.formance.formance_sdk.models.shared.V2ConfigInfoResponse;
import com.formance.formance_sdk.models.shared.V2ErrorResponse;
import com.formance.formance_sdk.models.shared.V2ErrorsEnum;
import com.formance.formance_sdk.models.shared.V2Ledger;
import com.formance.formance_sdk.models.shared.V2LedgerInfo;
import com.formance.formance_sdk.models.shared.V2LedgerInfoResponse;
import com.formance.formance_sdk.models.shared.V2LedgerInfoStorage;
import com.formance.formance_sdk.models.shared.V2LedgerListResponse;
import com.formance.formance_sdk.models.shared.V2LedgerListResponseCursor;
import com.formance.formance_sdk.models.shared.V2LogsCursorResponse;
import com.formance.formance_sdk.models.shared.V2LogsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V2MigrationInfo;
import com.formance.formance_sdk.models.shared.V2PostTransaction;
import com.formance.formance_sdk.models.shared.V2PostTransactionScript;
import com.formance.formance_sdk.models.shared.V2Posting;
import com.formance.formance_sdk.models.shared.V2Stats;
import com.formance.formance_sdk.models.shared.V2StatsResponse;
import com.formance.formance_sdk.models.shared.V2Transaction;
import com.formance.formance_sdk.models.shared.V2TransactionsCursorResponse;
import com.formance.formance_sdk.models.shared.V2TransactionsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V2Volume;
import com.formance.formance_sdk.models.shared.V2VolumesWithBalance;
import com.formance.formance_sdk.models.shared.V2VolumesWithBalanceCursorResponse;
import com.formance.formance_sdk.models.shared.V2VolumesWithBalanceCursorResponseCursor;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;

public class V2Tests {

    @Test
    public void testV2_V2AddMetadataOnTransaction() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2AddMetadataOnTransaction");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2AddMetadataOnTransactionRequest req = V2AddMetadataOnTransactionRequest.builder()
                .requestBody(Map.ofEntries(
                    Map.entry("admin", "true")))
                .id(new BigInteger("1234"))
                .ledger("ledger001")
                .dryRun(true)
                .build();

        V2AddMetadataOnTransactionResponse res = sdk.ledger().v2().addMetadataOnTransaction()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV2_V2AddMetadataToAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2AddMetadataToAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2AddMetadataToAccountRequest req = V2AddMetadataToAccountRequest.builder()
                .requestBody(Map.ofEntries(
                    Map.entry("admin", "true")))
                .address("users:001")
                .ledger("ledger001")
                .dryRun(true)
                .build();

        V2AddMetadataToAccountResponse res = sdk.ledger().v2().addMetadataToAccount()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV2_V2CountAccounts() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2CountAccounts");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2CountAccountsRequest req = V2CountAccountsRequest.builder()
                .requestBody(Map.ofEntries(
                    Map.entry("key", "<value>")))
                .ledger("ledger001")
                .build();

        V2CountAccountsResponse res = sdk.ledger().v2().countAccounts()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV2_V2CountTransactions() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2CountTransactions");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2CountTransactionsRequest req = V2CountTransactionsRequest.builder()
                .requestBody(Map.ofEntries(
                    Map.entry("key", "<value>"),
                    Map.entry("key1", "<value>")))
                .ledger("ledger001")
                .build();

        V2CountTransactionsResponse res = sdk.ledger().v2().countTransactions()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV2_V2CreateBulk() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2CreateBulk");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2CreateBulkRequest req = V2CreateBulkRequest.builder()
                .requestBody(List.of(
                ))
                .ledger("ledger001")
                .atomic(true)
                .continueOnFailure(true)
                .parallel(true)
                .build();

        V2CreateBulkResponse res = sdk.ledger().v2().createBulk()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2BulkResponse.builder()
            .data(List.of(
                V2BulkElementResultDeleteMetadataSchemas.builder()
                    .logID(715190L)
                    .responseType("<value>")
                    .build(),
                V2BulkElementResultErrorSchemas.builder()
                    .errorCode("<value>")
                    .errorDescription("<value>")
                    .logID(544883L)
                    .responseType("<value>")
                    .build()))
            .errorCode(V2ErrorsEnum.VALIDATION)
            .errorMessage("[VALIDATION] invalid 'cursor' query param")
            .details("https://play.numscript.org/?payload=eyJlcnJvciI6ImFjY291bnQgaGFkIGluc3VmZmljaWVudCBmdW5kcyJ9")
            .build(),
            res.v2BulkResponse().get());
    }

    @Test
    public void testV2_V2CreateLedger() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2CreateLedger");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2CreateLedgerRequest req = V2CreateLedgerRequest.builder()
                .v2CreateLedgerRequest(com.formance.formance_sdk.models.shared.V2CreateLedgerRequest.builder()
                    .metadata(Map.ofEntries(
                        Map.entry("admin", "true")))
                    .build())
                .ledger("ledger001")
                .build();

        V2CreateLedgerResponse res = sdk.ledger().v2().createLedger()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV2_V2CreateTransaction() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2CreateTransaction");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2CreateTransactionRequest req = V2CreateTransactionRequest.builder()
                .v2PostTransaction(V2PostTransaction.builder()
                    .metadata(Map.ofEntries(
                        Map.entry("admin", "true")))
                    .postings(List.of(
                        V2Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build(),
                        V2Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build()))
                    .reference("ref:001")
                    .script(V2PostTransactionScript.builder()
                        .plain("vars {\naccount $user\n}\nsend [COIN 10] (\n	source = @world\n	destination = $user\n)\n")
                        .vars(Map.ofEntries(
                            Map.entry("user", "users:042")))
                        .build())
                    .build())
                .ledger("ledger001")
                .dryRun(true)
                .force(true)
                .build();

        V2CreateTransactionResponse res = sdk.ledger().v2().createTransaction()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2CreateTransactionResponse.builder()
            .data(V2Transaction.builder()
                .id(new BigInteger("31495"))
                .metadata(Map.ofEntries(
                    Map.entry("admin", "true")))
                .postings(List.of(
                ))
                .reverted(false)
                .timestamp(OffsetDateTime.parse("2025-09-22T01:21:07.537Z"))
                .postCommitEffectiveVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .postCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .preCommitEffectiveVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .preCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .reference("ref:001")
                .build())
            .build(),
            res.v2CreateTransactionResponse().get());
    }

    @Test
    public void testV2_V2DeleteAccountMetadata() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2DeleteAccountMetadata");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2DeleteAccountMetadataRequest req = V2DeleteAccountMetadataRequest.builder()
                .address("96609 Cummings Canyon")
                .key("foo")
                .ledger("ledger001")
                .build();

        V2DeleteAccountMetadataResponse res = sdk.ledger().v2().deleteAccountMetadata()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testV2_V2DeleteLedgerMetadata() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2DeleteLedgerMetadata");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2DeleteLedgerMetadataRequest req = V2DeleteLedgerMetadataRequest.builder()
                .key("foo")
                .ledger("ledger001")
                .build();

        V2DeleteLedgerMetadataResponse res = sdk.ledger().v2().deleteLedgerMetadata()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV2_V2DeleteTransactionMetadata() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2DeleteTransactionMetadata");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2DeleteTransactionMetadataRequest req = V2DeleteTransactionMetadataRequest.builder()
                .id(new BigInteger("1234"))
                .key("foo")
                .ledger("ledger001")
                .build();

        V2DeleteTransactionMetadataResponse res = sdk.ledger().v2().deleteTransactionMetadata()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testV2_V2ExportLogs() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ExportLogs");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ExportLogsRequest req = V2ExportLogsRequest.builder()
                .ledger("ledger001")
                .build();

        V2ExportLogsResponse res = sdk.ledger().v2().exportLogs()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testV2_V2GetAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetAccountRequest req = V2GetAccountRequest.builder()
                .address("users:001")
                .ledger("ledger001")
                .build();

        V2GetAccountResponse res = sdk.ledger().v2().getAccount()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2AccountResponse.builder()
            .data(V2Account.builder()
                .address("users:001")
                .metadata(Map.ofEntries(
                    Map.entry("admin", "true")))
                .effectiveVolumes(Map.ofEntries(
                    Map.entry("USD", V2Volume.builder()
                        .input(new BigInteger("100"))
                        .output(new BigInteger("20"))
                        .balance(new BigInteger("80"))
                        .build()),
                    Map.entry("EUR", V2Volume.builder()
                        .input(new BigInteger("100"))
                        .output(new BigInteger("20"))
                        .balance(new BigInteger("80"))
                        .build())))
                .volumes(Map.ofEntries(
                    Map.entry("USD", V2Volume.builder()
                        .input(new BigInteger("100"))
                        .output(new BigInteger("20"))
                        .balance(new BigInteger("80"))
                        .build()),
                    Map.entry("EUR", V2Volume.builder()
                        .input(new BigInteger("100"))
                        .output(new BigInteger("20"))
                        .balance(new BigInteger("80"))
                        .build())))
                .build())
            .build(),
            res.v2AccountResponse().get());
    }

    @Test
    public void testV2_V2GetBalancesAggregated() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetBalancesAggregated");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetBalancesAggregatedRequest req = V2GetBalancesAggregatedRequest.builder()
                .requestBody(Map.ofEntries(
                    Map.entry("key", "<value>")))
                .ledger("ledger001")
                .build();

        V2GetBalancesAggregatedResponse res = sdk.ledger().v2().getBalancesAggregated()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2AggregateBalancesResponse.builder()
            .data(Map.ofEntries(
                Map.entry("USD", new BigInteger("100")),
                Map.entry("EUR", new BigInteger("12"))))
            .build(),
            res.v2AggregateBalancesResponse().get());
    }

    @Test
    public void testV2_V2GetInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetInfoResponse res = sdk.ledger().v2().getInfo()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2ConfigInfoResponse.builder()
            .server("<value>")
            .version("<value>")
            .build(),
            res.v2ConfigInfoResponse().get());
    }

    @Test
    public void testV2_V2GetLedger() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetLedger");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetLedgerRequest req = V2GetLedgerRequest.builder()
                .ledger("ledger001")
                .build();

        V2GetLedgerResponse res = sdk.ledger().v2().getLedger()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2GetLedgerResponse.builder()
            .data(V2Ledger.builder()
                .addedAt(OffsetDateTime.parse("2024-04-15T03:59:26.558Z"))
                .bucket("<value>")
                .name("<value>")
                .metadata(Map.ofEntries(
                    Map.entry("admin", "true")))
                .build())
            .build(),
            res.v2GetLedgerResponse().get());
    }

    @Test
    public void testV2_V2GetLedgerInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetLedgerInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetLedgerInfoRequest req = V2GetLedgerInfoRequest.builder()
                .ledger("ledger001")
                .build();

        V2GetLedgerInfoResponse res = sdk.ledger().v2().getLedgerInfo()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2LedgerInfoResponse.builder()
            .data(V2LedgerInfo.builder()
                .name("ledger001")
                .storage(V2LedgerInfoStorage.builder()
                    .migrations(List.of(
                        V2MigrationInfo.builder()
                            .name("migrations:001")
                            .version("11")
                            .build(),
                        V2MigrationInfo.builder()
                            .name("migrations:001")
                            .version("11")
                            .build(),
                        V2MigrationInfo.builder()
                            .name("migrations:001")
                            .version("11")
                            .build()))
                    .build())
                .build())
            .build(),
            res.v2LedgerInfoResponse().get());
    }

    @Test
    public void testV2_GetMetrics() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getMetrics");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetMetricsResponse res = sdk.ledger().v2().getMetrics()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            Map.ofEntries(
            Map.entry("key", "<value>"),
            Map.entry("key1", "<value>")),
            res.object().get());
    }

    @Test
    public void testV2_V2GetTransaction() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetTransaction");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetTransactionRequest req = V2GetTransactionRequest.builder()
                .id(new BigInteger("1234"))
                .ledger("ledger001")
                .build();

        V2GetTransactionResponse res = sdk.ledger().v2().getTransaction()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2GetTransactionResponse.builder()
            .data(V2Transaction.builder()
                .id(new BigInteger("546228"))
                .metadata(Map.ofEntries(
                    Map.entry("admin", "true")))
                .postings(List.of(
                ))
                .reverted(true)
                .timestamp(OffsetDateTime.parse("2024-01-04T04:51:12.769Z"))
                .postCommitEffectiveVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .postCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .preCommitEffectiveVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .preCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .reference("ref:001")
                .build())
            .build(),
            res.v2GetTransactionResponse().get());
    }

    @Test
    public void testV2_V2GetVolumesWithBalances() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetVolumesWithBalances");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetVolumesWithBalancesRequest req = V2GetVolumesWithBalancesRequest.builder()
                .requestBody(Map.ofEntries(
                    Map.entry("key", "<value>")))
                .ledger("ledger001")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .groupBy(3L)
                .pageSize(100L)
                .build();

        V2GetVolumesWithBalancesResponse res = sdk.ledger().v2().getVolumesWithBalances()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2VolumesWithBalanceCursorResponse.builder()
            .cursor(V2VolumesWithBalanceCursorResponseCursor.builder()
                .data(List.of(
                    V2VolumesWithBalance.builder()
                        .account("00796099")
                        .asset("<value>")
                        .balance(new BigInteger("894289"))
                        .input(new BigInteger("625394"))
                        .output(new BigInteger("720582"))
                        .build(),
                    V2VolumesWithBalance.builder()
                        .account("70854174")
                        .asset("<value>")
                        .balance(new BigInteger("460071"))
                        .input(new BigInteger("819550"))
                        .output(new BigInteger("231537"))
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v2VolumesWithBalanceCursorResponse().get());
    }

    @Test
    public void testV2_V2ImportLogs() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ImportLogs");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ImportLogsRequest req = V2ImportLogsRequest.builder()
                .v2ImportLogsRequest("0xeC7ae8CBbd".getBytes(StandardCharsets.UTF_8))
                .ledger("ledger001")
                .build();

        V2ImportLogsResponse res = sdk.ledger().v2().importLogs()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV2_V2ListAccounts() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ListAccounts");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ListAccountsRequest req = V2ListAccountsRequest.builder()
                .requestBody(Map.ofEntries(
                ))
                .ledger("ledger001")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V2ListAccountsResponse res = sdk.ledger().v2().listAccounts()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2AccountsCursorResponse.builder()
            .cursor(V2AccountsCursorResponseCursor.builder()
                .data(List.of(
                    V2Account.builder()
                        .address("users:001")
                        .metadata(Map.ofEntries(
                            Map.entry("admin", "true")))
                        .effectiveVolumes(Map.ofEntries(
                            Map.entry("USD", V2Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("10"))
                                .balance(new BigInteger("90"))
                                .build()),
                            Map.entry("EUR", V2Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("10"))
                                .balance(new BigInteger("90"))
                                .build())))
                        .volumes(Map.ofEntries(
                            Map.entry("USD", V2Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("10"))
                                .balance(new BigInteger("90"))
                                .build()),
                            Map.entry("EUR", V2Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("10"))
                                .balance(new BigInteger("90"))
                                .build())))
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v2AccountsCursorResponse().get());
    }

    @Test
    public void testV2_V2ListLedgers() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ListLedgers");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ListLedgersRequest req = V2ListLedgersRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V2ListLedgersResponse res = sdk.ledger().v2().listLedgers()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2LedgerListResponse.builder()
            .cursor(V2LedgerListResponseCursor.builder()
                .data(List.of(
                    V2Ledger.builder()
                        .addedAt(OffsetDateTime.parse("2025-08-18T14:16:25.795Z"))
                        .bucket("<value>")
                        .name("<value>")
                        .metadata(Map.ofEntries(
                            Map.entry("admin", "true")))
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v2LedgerListResponse().get());
    }

    @Test
    public void testV2_V2ListLogs() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ListLogs");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ListLogsRequest req = V2ListLogsRequest.builder()
                .requestBody(Map.ofEntries(
                    Map.entry("key", "<value>")))
                .ledger("ledger001")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V2ListLogsResponse res = sdk.ledger().v2().listLogs()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2LogsCursorResponse.builder()
            .cursor(V2LogsCursorResponseCursor.builder()
                .data(List.of(
                ))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v2LogsCursorResponse().get());
    }

    @Test
    public void testV2_V2ListTransactions() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ListTransactions");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ListTransactionsRequest req = V2ListTransactionsRequest.builder()
                .requestBody(Map.ofEntries(
                ))
                .ledger("ledger001")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V2ListTransactionsResponse res = sdk.ledger().v2().listTransactions()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2TransactionsCursorResponse.builder()
            .cursor(V2TransactionsCursorResponseCursor.builder()
                .data(List.of(
                    V2Transaction.builder()
                        .id(new BigInteger("800962"))
                        .metadata(Map.ofEntries(
                            Map.entry("admin", "true")))
                        .postings(List.of(
                        ))
                        .reverted(false)
                        .timestamp(OffsetDateTime.parse("2024-04-21T20:57:43.458Z"))
                        .postCommitEffectiveVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .postCommitVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .preCommitEffectiveVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .preCommitVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .reference("ref:001")
                        .build(),
                    V2Transaction.builder()
                        .id(new BigInteger("502954"))
                        .metadata(Map.ofEntries(
                            Map.entry("admin", "true")))
                        .postings(List.of(
                            V2Posting.builder()
                                .amount(new BigInteger("100"))
                                .asset("COIN")
                                .destination("users:002")
                                .source("users:001")
                                .build(),
                            V2Posting.builder()
                                .amount(new BigInteger("100"))
                                .asset("COIN")
                                .destination("users:002")
                                .source("users:001")
                                .build()))
                        .reverted(true)
                        .timestamp(OffsetDateTime.parse("2025-11-29T00:15:45.213Z"))
                        .postCommitEffectiveVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .postCommitVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .preCommitEffectiveVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .preCommitVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .reference("ref:001")
                        .build(),
                    V2Transaction.builder()
                        .id(new BigInteger("540440"))
                        .metadata(Map.ofEntries(
                            Map.entry("admin", "true")))
                        .postings(List.of(
                        ))
                        .reverted(true)
                        .timestamp(OffsetDateTime.parse("2025-12-31T22:50:40.006Z"))
                        .postCommitEffectiveVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .postCommitVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .preCommitEffectiveVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .preCommitVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", V2Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .reference("ref:001")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v2TransactionsCursorResponse().get());
    }

    @Test
    public void testV2_V2ReadStats() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ReadStats");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ReadStatsRequest req = V2ReadStatsRequest.builder()
                .ledger("ledger001")
                .build();

        V2ReadStatsResponse res = sdk.ledger().v2().readStats()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2StatsResponse.builder()
            .data(V2Stats.builder()
                .accounts(144691L)
                .transactions(new BigInteger("882277"))
                .build())
            .build(),
            res.v2StatsResponse().get());
    }

    @Test
    public void testV2_V2RevertTransaction() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2RevertTransaction");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2RevertTransactionRequest req = V2RevertTransactionRequest.builder()
                .id(new BigInteger("1234"))
                .ledger("ledger001")
                .dryRun(true)
                .build();

        V2RevertTransactionResponse res = sdk.ledger().v2().revertTransaction()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2CreateTransactionResponse.builder()
            .data(V2Transaction.builder()
                .id(new BigInteger("614792"))
                .metadata(Map.ofEntries(
                    Map.entry("admin", "true")))
                .postings(List.of(
                ))
                .reverted(true)
                .timestamp(OffsetDateTime.parse("2024-12-23T06:12:13.815Z"))
                .postCommitEffectiveVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .postCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .preCommitEffectiveVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .preCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", V2Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .reference("ref:001")
                .build())
            .build(),
            res.v2CreateTransactionResponse().get());
    }

    @Test
    public void testV2_V2UpdateLedgerMetadata() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2UpdateLedgerMetadata");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2UpdateLedgerMetadataRequest req = V2UpdateLedgerMetadataRequest.builder()
                .requestBody(Map.ofEntries(
                    Map.entry("admin", "true")))
                .ledger("ledger001")
                .build();

        V2UpdateLedgerMetadataResponse res = sdk.ledger().v2().updateLedgerMetadata()
                .request(req)
                .call();
        assertTrue(List.of(500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511).contains(res.statusCode()));
        assertEquals(
            V2ErrorResponse.builder()
            .errorCode(V2ErrorsEnum.VALIDATION)
            .errorMessage("[VALIDATION] invalid 'cursor' query param")
            .details("https://play.numscript.org/?payload=eyJlcnJvciI6ImFjY291bnQgaGFkIGluc3VmZmljaWVudCBmdW5kcyJ9")
            .build(),
            res.v2ErrorResponse().get());
    }
}