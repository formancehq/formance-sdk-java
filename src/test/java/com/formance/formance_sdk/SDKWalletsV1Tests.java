/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.formance.formance_sdk.models.operations.ConfirmHoldRequest;
import com.formance.formance_sdk.models.operations.ConfirmHoldResponse;
import com.formance.formance_sdk.models.operations.CreateBalanceRequest;
import com.formance.formance_sdk.models.operations.CreateBalanceResponse;
import com.formance.formance_sdk.models.operations.CreateWalletRequest;
import com.formance.formance_sdk.models.operations.CreateWalletResponse;
import com.formance.formance_sdk.models.operations.CreditWalletRequest;
import com.formance.formance_sdk.models.operations.CreditWalletResponse;
import com.formance.formance_sdk.models.operations.DebitWalletRequest;
import com.formance.formance_sdk.models.operations.DebitWalletResponse;
import com.formance.formance_sdk.models.operations.GetBalanceRequest;
import com.formance.formance_sdk.models.operations.GetBalanceResponse;
import com.formance.formance_sdk.models.operations.GetHoldRequest;
import com.formance.formance_sdk.models.operations.GetHoldResponse;
import com.formance.formance_sdk.models.operations.GetHoldsRequest;
import com.formance.formance_sdk.models.operations.GetHoldsResponse;
import com.formance.formance_sdk.models.operations.GetTransactionsRequest;
import com.formance.formance_sdk.models.operations.GetTransactionsResponse;
import com.formance.formance_sdk.models.operations.GetWalletRequest;
import com.formance.formance_sdk.models.operations.GetWalletResponse;
import com.formance.formance_sdk.models.operations.GetWalletSummaryRequest;
import com.formance.formance_sdk.models.operations.GetWalletSummaryResponse;
import com.formance.formance_sdk.models.operations.ListBalancesRequest;
import com.formance.formance_sdk.models.operations.ListBalancesResponse;
import com.formance.formance_sdk.models.operations.ListWalletsRequest;
import com.formance.formance_sdk.models.operations.ListWalletsResponse;
import com.formance.formance_sdk.models.operations.UpdateWalletRequest;
import com.formance.formance_sdk.models.operations.UpdateWalletResponse;
import com.formance.formance_sdk.models.operations.VoidHoldRequest;
import com.formance.formance_sdk.models.operations.VoidHoldResponse;
import com.formance.formance_sdk.models.operations.WalletsgetServerInfoResponse;
import com.formance.formance_sdk.models.shared.ActivityDebitWalletOutput;
import com.formance.formance_sdk.models.shared.ActivityGetWalletOutput;
import com.formance.formance_sdk.models.shared.AssetHolder;
import com.formance.formance_sdk.models.shared.Balance;
import com.formance.formance_sdk.models.shared.BalanceWithAssets;
import com.formance.formance_sdk.models.shared.ExpandedDebitHold;
import com.formance.formance_sdk.models.shared.GetHoldsResponseCursor;
import com.formance.formance_sdk.models.shared.GetTransactionsResponseCursor;
import com.formance.formance_sdk.models.shared.Hold;
import com.formance.formance_sdk.models.shared.ListBalancesResponseCursor;
import com.formance.formance_sdk.models.shared.ListWalletsResponseCursor;
import com.formance.formance_sdk.models.shared.Monetary;
import com.formance.formance_sdk.models.shared.Posting;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.ServerInfo;
import com.formance.formance_sdk.models.shared.Wallet;
import com.formance.formance_sdk.models.shared.WalletSummary;
import com.formance.formance_sdk.models.shared.WalletWithBalances;
import com.formance.formance_sdk.models.shared.WalletWithBalancesBalances;
import com.formance.formance_sdk.models.shared.WalletsTransaction;
import com.formance.formance_sdk.models.shared.WalletsVolume;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;

public class SDKWalletsV1Tests {

    @Test
    public void testSDKWalletsV1_ConfirmHold() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("confirmHold");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ConfirmHoldRequest req = ConfirmHoldRequest.builder()
                .holdId("<id>")
                .confirmHoldRequest(com.formance.formance_sdk.models.shared.ConfirmHoldRequest.builder()
                    .amount(new BigInteger("100"))
                    .final_(true)
                    .build())
                .build();

        ConfirmHoldResponse res = sdk.wallets().v1().confirmHold()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKWalletsV1_CreateBalance() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createBalance");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        CreateBalanceRequest req = CreateBalanceRequest.builder()
                .id("<id>")
                .build();

        CreateBalanceResponse res = sdk.wallets().v1().createBalance()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.CreateBalanceResponse.builder()
            .data(com.formance.formance_sdk.models.shared.CreateBalanceRequest.builder()
                .name("<value>")
                .build())
            .build(),
            res.createBalanceResponse().get());
    }

    @Test
    public void testSDKWalletsV1_CreateWallet() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createWallet");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        CreateWalletRequest req = CreateWalletRequest.builder()
                .build();

        CreateWalletResponse res = sdk.wallets().v1().createWallet()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.CreateWalletResponse.builder()
            .data(Wallet.builder()
                .createdAt(OffsetDateTime.parse("2024-08-07T07:13:48.961Z"))
                .id("28d5e2b6-b532-4ea9-ac35-db845f4bcf19")
                .ledger("<value>")
                .metadata(Map.ofEntries(
                    Map.entry("key", "<value>")))
                .name("<value>")
                .build())
            .build(),
            res.createWalletResponse().get());
    }

    @Test
    public void testSDKWalletsV1_CreditWallet() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("creditWallet");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        CreditWalletRequest req = CreditWalletRequest.builder()
                .id("<id>")
                .creditWalletRequest(com.formance.formance_sdk.models.shared.CreditWalletRequest.builder()
                    .amount(Monetary.builder()
                        .amount(new BigInteger("100"))
                        .asset("USD/2")
                        .build())
                    .metadata(Map.ofEntries(
                        Map.entry("key", "")))
                    .sources(List.of(
                    ))
                    .build())
                .build();

        CreditWalletResponse res = sdk.wallets().v1().creditWallet()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKWalletsV1_DebitWallet() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("debitWallet");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        DebitWalletRequest req = DebitWalletRequest.builder()
                .id("<id>")
                .debitWalletRequest(com.formance.formance_sdk.models.shared.DebitWalletRequest.builder()
                    .amount(Monetary.builder()
                        .amount(new BigInteger("100"))
                        .asset("USD/2")
                        .build())
                    .metadata(Map.ofEntries(
                        Map.entry("key", "")))
                    .pending(true)
                    .build())
                .build();

        DebitWalletResponse res = sdk.wallets().v1().debitWallet()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            ActivityDebitWalletOutput.builder()
            .data(Hold.builder()
                .description("supposing any instead underachieve")
                .id("cb202f54-4467-4509-9820-d52190eb2ad6")
                .metadata(Map.ofEntries(
                ))
                .walletID("<id>")
                .build())
            .build(),
            res.activityDebitWalletOutput().get());
    }

    @Test
    public void testSDKWalletsV1_GetBalance() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getBalance");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetBalanceRequest req = GetBalanceRequest.builder()
                .balanceName("<value>")
                .id("<id>")
                .build();

        GetBalanceResponse res = sdk.wallets().v1().getBalance()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.GetBalanceResponse.builder()
            .data(BalanceWithAssets.builder()
                .assets(Map.ofEntries(
                    Map.entry("key", new BigInteger("623534")),
                    Map.entry("key1", new BigInteger("686479")),
                    Map.entry("key2", new BigInteger("925894"))))
                .name("<value>")
                .build())
            .build(),
            res.getBalanceResponse().get());
    }

    @Test
    public void testSDKWalletsV1_GetHold() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getHold");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetHoldRequest req = GetHoldRequest.builder()
                .holdID("<id>")
                .build();

        GetHoldResponse res = sdk.wallets().v1().getHold()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.GetHoldResponse.builder()
            .data(ExpandedDebitHold.builder()
                .description("fooey lest vivaciously")
                .id("cd413999-17b3-47c4-95d9-940e9d32963a")
                .metadata(Map.ofEntries(
                    Map.entry("key", "<value>"),
                    Map.entry("key1", "<value>")))
                .originalAmount(new BigInteger("100"))
                .remaining(new BigInteger("10"))
                .walletID("<id>")
                .build())
            .build(),
            res.getHoldResponse().get());
    }

    @Test
    public void testSDKWalletsV1_GetHolds() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getHolds");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetHoldsRequest req = GetHoldsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .metadata(Map.ofEntries(
                    Map.entry("admin", "true")))
                .walletID("wallet1")
                .build();

        GetHoldsResponse res = sdk.wallets().v1().getHolds()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.GetHoldsResponse.builder()
            .cursor(GetHoldsResponseCursor.builder()
                .data(List.of(
                    Hold.builder()
                        .description("anti all mmm thorough badly what once self-assured bitterly")
                        .id("71f718aa-973f-455f-8164-685872daf907")
                        .metadata(Map.ofEntries(
                        ))
                        .walletID("<id>")
                        .build(),
                    Hold.builder()
                        .description("veg before reservation an")
                        .id("53a74377-2ea1-48a5-98b0-670a65f47f18")
                        .metadata(Map.ofEntries(
                            Map.entry("key", "<value>"),
                            Map.entry("key1", "<value>"),
                            Map.entry("key2", "<value>")))
                        .walletID("<id>")
                        .build()))
                .pageSize(15L)
                .hasMore(false)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.getHoldsResponse().get());
    }

    @Test
    public void testSDKWalletsV1_GetTransactions() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getTransactions");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetTransactionsRequest req = GetTransactionsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .walletID("wallet1")
                .build();

        GetTransactionsResponse res = sdk.wallets().v1().getTransactions()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.GetTransactionsResponse.builder()
            .cursor(GetTransactionsResponseCursor.builder()
                .data(List.of(
                    WalletsTransaction.builder()
                        .id(417503L)
                        .metadata(Map.ofEntries(
                            Map.entry("key", "<value>"),
                            Map.entry("key1", "<value>"),
                            Map.entry("key2", "<value>")))
                        .postings(List.of(
                        ))
                        .timestamp(OffsetDateTime.parse("2025-04-16T13:08:57.024Z"))
                        .postCommitVolumes(Map.ofEntries(
                            Map.entry("key", Map.ofEntries(
                                Map.entry("USD", WalletsVolume.builder()
                                    .balance(new BigInteger("90"))
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .build()),
                                Map.entry("EUR", WalletsVolume.builder()
                                    .balance(new BigInteger("90"))
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .build())))))
                        .preCommitVolumes(Map.ofEntries(
                            Map.entry("key", Map.ofEntries(
                                Map.entry("USD", WalletsVolume.builder()
                                    .balance(new BigInteger("90"))
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .build()),
                                Map.entry("EUR", WalletsVolume.builder()
                                    .balance(new BigInteger("90"))
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .build()))),
                            Map.entry("key1", Map.ofEntries(
                                Map.entry("USD", WalletsVolume.builder()
                                    .balance(new BigInteger("90"))
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .build()),
                                Map.entry("EUR", WalletsVolume.builder()
                                    .balance(new BigInteger("90"))
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .build())))))
                        .reference("ref:001")
                        .build(),
                    WalletsTransaction.builder()
                        .id(751740L)
                        .metadata(Map.ofEntries(
                            Map.entry("key", "<value>"),
                            Map.entry("key1", "<value>")))
                        .postings(List.of(
                            Posting.builder()
                                .amount(new BigInteger("100"))
                                .asset("COIN")
                                .destination("users:002")
                                .source("users:001")
                                .build(),
                            Posting.builder()
                                .amount(new BigInteger("100"))
                                .asset("COIN")
                                .destination("users:002")
                                .source("users:001")
                                .build(),
                            Posting.builder()
                                .amount(new BigInteger("100"))
                                .asset("COIN")
                                .destination("users:002")
                                .source("users:001")
                                .build()))
                        .timestamp(OffsetDateTime.parse("2023-04-29T22:11:40.809Z"))
                        .postCommitVolumes(Map.ofEntries(
                            Map.entry("key", Map.ofEntries(
                                Map.entry("USD", WalletsVolume.builder()
                                    .balance(new BigInteger("90"))
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .build()),
                                Map.entry("EUR", WalletsVolume.builder()
                                    .balance(new BigInteger("90"))
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .build())))))
                        .preCommitVolumes(Map.ofEntries(
                            Map.entry("key", Map.ofEntries(
                                Map.entry("USD", WalletsVolume.builder()
                                    .balance(new BigInteger("90"))
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .build()),
                                Map.entry("EUR", WalletsVolume.builder()
                                    .balance(new BigInteger("90"))
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .build())))))
                        .reference("ref:001")
                        .build()))
                .pageSize(15L)
                .hasMore(false)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.getTransactionsResponse().get());
    }

    @Test
    public void testSDKWalletsV1_GetWallet() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getWallet");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetWalletRequest req = GetWalletRequest.builder()
                .id("<id>")
                .build();

        GetWalletResponse res = sdk.wallets().v1().getWallet()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ActivityGetWalletOutput.builder()
            .data(WalletWithBalances.builder()
                .balances(WalletWithBalancesBalances.builder()
                    .main(AssetHolder.builder()
                        .assets(Map.ofEntries(
                            Map.entry("key", new BigInteger("571864"))))
                        .build())
                    .build())
                .createdAt(OffsetDateTime.parse("2024-11-13T05:25:13.185Z"))
                .id("bec36009-93cb-484f-9620-8873422591bc")
                .ledger("<value>")
                .metadata(Map.ofEntries(
                    Map.entry("key", "<value>")))
                .name("<value>")
                .build())
            .build(),
            res.activityGetWalletOutput().get());
    }

    @Test
    public void testSDKWalletsV1_GetWalletSummary() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getWalletSummary");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetWalletSummaryRequest req = GetWalletSummaryRequest.builder()
                .id("<id>")
                .build();

        GetWalletSummaryResponse res = sdk.wallets().v1().getWalletSummary()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.GetWalletSummaryResponse.builder()
            .data(WalletSummary.builder()
                .availableFunds(Map.ofEntries(
                    Map.entry("key", new BigInteger("265270")),
                    Map.entry("key1", new BigInteger("425645"))))
                .balances(List.of(
                    BalanceWithAssets.builder()
                        .assets(Map.ofEntries(
                        ))
                        .name("<value>")
                        .build()))
                .expirableFunds(Map.ofEntries(
                ))
                .expiredFunds(Map.ofEntries(
                    Map.entry("key", new BigInteger("937378")),
                    Map.entry("key1", new BigInteger("696335")),
                    Map.entry("key2", new BigInteger("846984"))))
                .holdFunds(Map.ofEntries(
                    Map.entry("key", new BigInteger("930990")),
                    Map.entry("key1", new BigInteger("132783")),
                    Map.entry("key2", new BigInteger("515347"))))
                .build())
            .build(),
            res.getWalletSummaryResponse().get());
    }

    @Test
    public void testSDKWalletsV1_ListBalances() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listBalances");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListBalancesRequest req = ListBalancesRequest.builder()
                .id("<id>")
                .build();

        ListBalancesResponse res = sdk.wallets().v1().listBalances()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.ListBalancesResponse.builder()
            .cursor(ListBalancesResponseCursor.builder()
                .data(List.of(
                    Balance.builder()
                        .name("<value>")
                        .build(),
                    Balance.builder()
                        .name("<value>")
                        .build(),
                    Balance.builder()
                        .name("<value>")
                        .build()))
                .pageSize(15L)
                .hasMore(false)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.listBalancesResponse().get());
    }

    @Test
    public void testSDKWalletsV1_ListWallets() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listWallets");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListWalletsRequest req = ListWalletsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .expand("balances")
                .metadata(Map.ofEntries(
                    Map.entry("admin", "true")))
                .name("wallet1")
                .build();

        ListWalletsResponse res = sdk.wallets().v1().listWallets()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.ListWalletsResponse.builder()
            .cursor(ListWalletsResponseCursor.builder()
                .data(List.of(
                    Wallet.builder()
                        .createdAt(OffsetDateTime.parse("2023-02-28T12:24:12.671Z"))
                        .id("acf390dc-7f51-40b9-8bec-968d375f0c57")
                        .ledger("<value>")
                        .metadata(Map.ofEntries(
                            Map.entry("key", "<value>"),
                            Map.entry("key1", "<value>")))
                        .name("<value>")
                        .build()))
                .pageSize(15L)
                .hasMore(false)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.listWalletsResponse().get());
    }

    @Test
    public void testSDKWalletsV1_UpdateWallet() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("updateWallet");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        UpdateWalletRequest req = UpdateWalletRequest.builder()
                .id("<id>")
                .build();

        UpdateWalletResponse res = sdk.wallets().v1().updateWallet()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKWalletsV1_VoidHold() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("voidHold");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        VoidHoldRequest req = VoidHoldRequest.builder()
                .holdId("<id>")
                .build();

        VoidHoldResponse res = sdk.wallets().v1().voidHold()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKWalletsV1_WalletsgetServerInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("walletsgetServerInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        WalletsgetServerInfoResponse res = sdk.wallets().v1().walletsgetServerInfo()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ServerInfo.builder()
            .version("<value>")
            .build(),
            res.serverInfo().get());
    }
}