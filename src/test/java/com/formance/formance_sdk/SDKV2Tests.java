/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.formance.formance_sdk.models.operations.TestTriggerRequest;
import com.formance.formance_sdk.models.operations.TestTriggerResponse;
import com.formance.formance_sdk.models.operations.V2CancelEventRequest;
import com.formance.formance_sdk.models.operations.V2CancelEventResponse;
import com.formance.formance_sdk.models.operations.V2CreateTriggerResponse;
import com.formance.formance_sdk.models.operations.V2CreateWorkflowResponse;
import com.formance.formance_sdk.models.operations.V2DeleteTriggerRequest;
import com.formance.formance_sdk.models.operations.V2DeleteTriggerResponse;
import com.formance.formance_sdk.models.operations.V2DeleteWorkflowRequest;
import com.formance.formance_sdk.models.operations.V2DeleteWorkflowResponse;
import com.formance.formance_sdk.models.operations.V2GetInstanceHistoryRequest;
import com.formance.formance_sdk.models.operations.V2GetInstanceHistoryResponse;
import com.formance.formance_sdk.models.operations.V2GetInstanceRequest;
import com.formance.formance_sdk.models.operations.V2GetInstanceResponse;
import com.formance.formance_sdk.models.operations.V2GetInstanceStageHistoryRequest;
import com.formance.formance_sdk.models.operations.V2GetInstanceStageHistoryResponse;
import com.formance.formance_sdk.models.operations.V2GetServerInfoResponse;
import com.formance.formance_sdk.models.operations.V2GetWorkflowRequest;
import com.formance.formance_sdk.models.operations.V2GetWorkflowResponse;
import com.formance.formance_sdk.models.operations.V2ListInstancesRequest;
import com.formance.formance_sdk.models.operations.V2ListInstancesResponse;
import com.formance.formance_sdk.models.operations.V2ListTriggersOccurrencesRequest;
import com.formance.formance_sdk.models.operations.V2ListTriggersOccurrencesResponse;
import com.formance.formance_sdk.models.operations.V2ListTriggersRequest;
import com.formance.formance_sdk.models.operations.V2ListTriggersResponse;
import com.formance.formance_sdk.models.operations.V2ListWorkflowsRequest;
import com.formance.formance_sdk.models.operations.V2ListWorkflowsResponse;
import com.formance.formance_sdk.models.operations.V2ReadTriggerRequest;
import com.formance.formance_sdk.models.operations.V2ReadTriggerResponse;
import com.formance.formance_sdk.models.operations.V2RunWorkflowRequest;
import com.formance.formance_sdk.models.operations.V2RunWorkflowResponse;
import com.formance.formance_sdk.models.operations.V2SendEventRequest;
import com.formance.formance_sdk.models.operations.V2SendEventResponse;
import com.formance.formance_sdk.models.shared.OrchestrationV2PostTransaction;
import com.formance.formance_sdk.models.shared.OrchestrationV2PostTransactionScript;
import com.formance.formance_sdk.models.shared.OrchestrationV2Transaction;
import com.formance.formance_sdk.models.shared.Scheme;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.V2Account;
import com.formance.formance_sdk.models.shared.V2AccountResponse;
import com.formance.formance_sdk.models.shared.V2ActivityCreateTransaction;
import com.formance.formance_sdk.models.shared.V2ActivityCreateTransactionOutput;
import com.formance.formance_sdk.models.shared.V2ActivityCreditWallet;
import com.formance.formance_sdk.models.shared.V2ActivityDebitWallet;
import com.formance.formance_sdk.models.shared.V2ActivityGetPaymentOutput;
import com.formance.formance_sdk.models.shared.V2ActivityStripeTransfer;
import com.formance.formance_sdk.models.shared.V2CreditWalletRequest;
import com.formance.formance_sdk.models.shared.V2DebitWalletRequest;
import com.formance.formance_sdk.models.shared.V2GetWorkflowInstanceHistoryResponse;
import com.formance.formance_sdk.models.shared.V2GetWorkflowInstanceHistoryStageResponse;
import com.formance.formance_sdk.models.shared.V2GetWorkflowInstanceResponse;
import com.formance.formance_sdk.models.shared.V2ListRunsResponse;
import com.formance.formance_sdk.models.shared.V2ListRunsResponseCursor;
import com.formance.formance_sdk.models.shared.V2ListTriggersOccurrencesResponseCursor;
import com.formance.formance_sdk.models.shared.V2ListTriggersResponseCursor;
import com.formance.formance_sdk.models.shared.V2ListWalletsResponse;
import com.formance.formance_sdk.models.shared.V2ListWalletsResponseCursor;
import com.formance.formance_sdk.models.shared.V2ListWorkflowsResponseCursor;
import com.formance.formance_sdk.models.shared.V2Monetary;
import com.formance.formance_sdk.models.shared.V2Payment;
import com.formance.formance_sdk.models.shared.V2PaymentAdjustment;
import com.formance.formance_sdk.models.shared.V2PaymentAdjustmentRaw;
import com.formance.formance_sdk.models.shared.V2PaymentMetadata;
import com.formance.formance_sdk.models.shared.V2PaymentRaw;
import com.formance.formance_sdk.models.shared.V2PaymentStatus;
import com.formance.formance_sdk.models.shared.V2PaymentType;
import com.formance.formance_sdk.models.shared.V2Posting;
import com.formance.formance_sdk.models.shared.V2ServerInfo;
import com.formance.formance_sdk.models.shared.V2Stage;
import com.formance.formance_sdk.models.shared.V2StageSend;
import com.formance.formance_sdk.models.shared.V2TestTriggerResponse;
import com.formance.formance_sdk.models.shared.V2Trigger;
import com.formance.formance_sdk.models.shared.V2TriggerData;
import com.formance.formance_sdk.models.shared.V2TriggerOccurrence;
import com.formance.formance_sdk.models.shared.V2TriggerTest;
import com.formance.formance_sdk.models.shared.V2Volume;
import com.formance.formance_sdk.models.shared.V2Wallet;
import com.formance.formance_sdk.models.shared.V2Workflow;
import com.formance.formance_sdk.models.shared.V2WorkflowConfig;
import com.formance.formance_sdk.models.shared.V2WorkflowInstance;
import com.formance.formance_sdk.models.shared.V2WorkflowInstanceHistory;
import com.formance.formance_sdk.models.shared.V2WorkflowInstanceHistoryStage;
import com.formance.formance_sdk.models.shared.V2WorkflowInstanceHistoryStageInput;
import com.formance.formance_sdk.models.shared.V2WorkflowInstanceHistoryStageOutput;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;

public class SDKV2Tests {

    @Test
    public void testSDKV2_V2CancelEvent() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2CancelEvent");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2CancelEventRequest req = V2CancelEventRequest.builder()
                .instanceID("xxx")
                .build();

        V2CancelEventResponse res = sdk.orchestration().v2().cancelEvent()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKV2_V2CreateTrigger() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2CreateTrigger");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2TriggerData req = V2TriggerData.builder()
                .event("<value>")
                .workflowID("<id>")
                .build();

        V2CreateTriggerResponse res = sdk.orchestration().v2().createTrigger()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2CreateTriggerResponse.builder()
            .data(V2Trigger.builder()
                .createdAt(OffsetDateTime.parse("2023-02-06T04:27:27.896Z"))
                .event("<value>")
                .id("<id>")
                .workflowID("<id>")
                .build())
            .build(),
            res.v2CreateTriggerResponse().get());
    }

    @Test
    public void testSDKV2_V2CreateWorkflow() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2CreateWorkflow");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2WorkflowConfig req = V2WorkflowConfig.builder()
                .stages(List.of(
                    Map.ofEntries(
                        Map.entry("key", "<value>"))))
                .build();

        V2CreateWorkflowResponse res = sdk.orchestration().v2().createWorkflow()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2CreateWorkflowResponse.builder()
            .data(V2Workflow.builder()
                .config(V2WorkflowConfig.builder()
                    .stages(List.of(
                    ))
                    .build())
                .createdAt(OffsetDateTime.parse("2025-09-25T10:50:45.884Z"))
                .id("<id>")
                .updatedAt(OffsetDateTime.parse("2024-03-06T13:06:20.711Z"))
                .build())
            .build(),
            res.v2CreateWorkflowResponse().get());
    }

    @Test
    public void testSDKV2_V2DeleteTrigger() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2DeleteTrigger");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2DeleteTriggerRequest req = V2DeleteTriggerRequest.builder()
                .triggerID("<id>")
                .build();

        V2DeleteTriggerResponse res = sdk.orchestration().v2().deleteTrigger()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKV2_V2DeleteWorkflow() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2DeleteWorkflow");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2DeleteWorkflowRequest req = V2DeleteWorkflowRequest.builder()
                .flowId("xxx")
                .build();

        V2DeleteWorkflowResponse res = sdk.orchestration().v2().deleteWorkflow()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKV2_V2GetInstance() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetInstance");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetInstanceRequest req = V2GetInstanceRequest.builder()
                .instanceID("xxx")
                .build();

        V2GetInstanceResponse res = sdk.orchestration().v2().getInstance()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2GetWorkflowInstanceResponse.builder()
            .data(V2WorkflowInstance.builder()
                .createdAt(OffsetDateTime.parse("2025-05-27T18:06:07.805Z"))
                .id("<id>")
                .terminated(true)
                .updatedAt(OffsetDateTime.parse("2024-12-10T23:41:39.935Z"))
                .workflowID("<id>")
                .build())
            .build(),
            res.v2GetWorkflowInstanceResponse().get());
    }

    @Test
    public void testSDKV2_V2GetInstanceHistory() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetInstanceHistory");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetInstanceHistoryRequest req = V2GetInstanceHistoryRequest.builder()
                .instanceID("xxx")
                .build();

        V2GetInstanceHistoryResponse res = sdk.orchestration().v2().getInstanceHistory()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2GetWorkflowInstanceHistoryResponse.builder()
            .data(List.of(
                V2WorkflowInstanceHistory.builder()
                    .input(V2Stage.of(V2StageSend.builder()
                        .build()))
                    .name("<value>")
                    .startedAt(OffsetDateTime.parse("2024-12-21T06:06:34.439Z"))
                    .terminated(true)
                    .build(),
                V2WorkflowInstanceHistory.builder()
                    .input(V2Stage.of(V2StageSend.builder()
                        .build()))
                    .name("<value>")
                    .startedAt(OffsetDateTime.parse("2023-03-31T15:11:10.794Z"))
                    .terminated(true)
                    .build()))
            .build(),
            res.v2GetWorkflowInstanceHistoryResponse().get());
    }

    @Test
    public void testSDKV2_V2GetInstanceStageHistory() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetInstanceStageHistory");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetInstanceStageHistoryRequest req = V2GetInstanceStageHistoryRequest.builder()
                .instanceID("xxx")
                .number(0L)
                .build();

        V2GetInstanceStageHistoryResponse res = sdk.orchestration().v2().getInstanceStageHistory()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2GetWorkflowInstanceHistoryStageResponse.builder()
            .data(List.of(
                V2WorkflowInstanceHistoryStage.builder()
                    .attempt(814164L)
                    .input(V2WorkflowInstanceHistoryStageInput.builder()
                        .createTransaction(V2ActivityCreateTransaction.builder()
                            .data(OrchestrationV2PostTransaction.builder()
                                .metadata(Map.ofEntries(
                                    Map.entry("admin", "true")))
                                .postings(List.of(
                                    V2Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build(),
                                    V2Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build(),
                                    V2Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build()))
                                .reference("ref:001")
                                .script(OrchestrationV2PostTransactionScript.builder()
                                    .plain("vars {\naccount $user\n}\nsend [COIN 10] (\n	source = @world\n	destination = $user\n)\n")
                                    .vars(Map.ofEntries(
                                        Map.entry("user", "users:042")))
                                    .build())
                                .build())
                            .build())
                        .creditWallet(V2ActivityCreditWallet.builder()
                            .data(V2CreditWalletRequest.builder()
                                .amount(V2Monetary.builder()
                                    .amount(new BigInteger("100"))
                                    .asset("USD/2")
                                    .build())
                                .metadata(Map.ofEntries(
                                    Map.entry("key", "")))
                                .sources(List.of(
                                ))
                                .build())
                            .build())
                        .debitWallet(V2ActivityDebitWallet.builder()
                            .data(V2DebitWalletRequest.builder()
                                .amount(V2Monetary.builder()
                                    .amount(new BigInteger("100"))
                                    .asset("USD/2")
                                    .build())
                                .metadata(Map.ofEntries(
                                    Map.entry("key", "")))
                                .pending(true)
                                .build())
                            .build())
                        .stripeTransfer(V2ActivityStripeTransfer.builder()
                            .amount(new BigInteger("100"))
                            .asset("USD")
                            .destination("acct_1Gqj58KZcSIg2N2q")
                            .waitingValidation(false)
                            .build())
                        .build())
                    .name("<value>")
                    .startedAt(OffsetDateTime.parse("2023-11-06T21:00:32.040Z"))
                    .terminated(false)
                    .output(V2WorkflowInstanceHistoryStageOutput.builder()
                        .createTransaction(V2ActivityCreateTransactionOutput.builder()
                            .data(List.of(
                                OrchestrationV2Transaction.builder()
                                    .metadata(Map.ofEntries(
                                        Map.entry("admin", "true")))
                                    .postings(List.of(
                                        V2Posting.builder()
                                            .amount(new BigInteger("100"))
                                            .asset("COIN")
                                            .destination("users:002")
                                            .source("users:001")
                                            .build(),
                                        V2Posting.builder()
                                            .amount(new BigInteger("100"))
                                            .asset("COIN")
                                            .destination("users:002")
                                            .source("users:001")
                                            .build(),
                                        V2Posting.builder()
                                            .amount(new BigInteger("100"))
                                            .asset("COIN")
                                            .destination("users:002")
                                            .source("users:001")
                                            .build()))
                                    .timestamp(OffsetDateTime.parse("2024-02-25T08:16:25.611Z"))
                                    .txid(new BigInteger("193963"))
                                    .reference("ref:001")
                                    .build(),
                                OrchestrationV2Transaction.builder()
                                    .metadata(Map.ofEntries(
                                        Map.entry("admin", "true")))
                                    .postings(List.of(
                                        V2Posting.builder()
                                            .amount(new BigInteger("100"))
                                            .asset("COIN")
                                            .destination("users:002")
                                            .source("users:001")
                                            .build(),
                                        V2Posting.builder()
                                            .amount(new BigInteger("100"))
                                            .asset("COIN")
                                            .destination("users:002")
                                            .source("users:001")
                                            .build(),
                                        V2Posting.builder()
                                            .amount(new BigInteger("100"))
                                            .asset("COIN")
                                            .destination("users:002")
                                            .source("users:001")
                                            .build()))
                                    .timestamp(OffsetDateTime.parse("2024-09-11T04:49:03.408Z"))
                                    .txid(new BigInteger("512399"))
                                    .reference("ref:001")
                                    .build(),
                                OrchestrationV2Transaction.builder()
                                    .metadata(Map.ofEntries(
                                        Map.entry("admin", "true")))
                                    .postings(List.of(
                                        V2Posting.builder()
                                            .amount(new BigInteger("100"))
                                            .asset("COIN")
                                            .destination("users:002")
                                            .source("users:001")
                                            .build(),
                                        V2Posting.builder()
                                            .amount(new BigInteger("100"))
                                            .asset("COIN")
                                            .destination("users:002")
                                            .source("users:001")
                                            .build(),
                                        V2Posting.builder()
                                            .amount(new BigInteger("100"))
                                            .asset("COIN")
                                            .destination("users:002")
                                            .source("users:001")
                                            .build()))
                                    .timestamp(OffsetDateTime.parse("2025-12-08T02:58:44.541Z"))
                                    .txid(new BigInteger("505948"))
                                    .reference("ref:001")
                                    .build()))
                            .build())
                        .getAccount(V2AccountResponse.builder()
                            .data(V2Account.builder()
                                .address("users:001")
                                .metadata(Map.ofEntries(
                                    Map.entry("admin", "true")))
                                .effectiveVolumes(Map.ofEntries(
                                    Map.entry("USD", V2Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build()),
                                    Map.entry("EUR", V2Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build())))
                                .volumes(Map.ofEntries(
                                    Map.entry("USD", V2Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build()),
                                    Map.entry("EUR", V2Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build())))
                                .build())
                            .build())
                        .getPayment(V2ActivityGetPaymentOutput.builder()
                            .data(V2Payment.builder()
                                .adjustments(List.of(
                                    V2PaymentAdjustment.builder()
                                        .absolute(false)
                                        .amount(new BigInteger("100"))
                                        .date(OffsetDateTime.parse("2024-07-15T14:04:10.735Z"))
                                        .raw(V2PaymentAdjustmentRaw.builder()
                                            .build())
                                        .status(V2PaymentStatus.FAILED)
                                        .build(),
                                    V2PaymentAdjustment.builder()
                                        .absolute(false)
                                        .amount(new BigInteger("100"))
                                        .date(OffsetDateTime.parse("2024-04-09T23:19:06.573Z"))
                                        .raw(V2PaymentAdjustmentRaw.builder()
                                            .build())
                                        .status(V2PaymentStatus.FAILED)
                                        .build()))
                                .asset("USD")
                                .connectorID("<id>")
                                .createdAt(OffsetDateTime.parse("2023-05-09T19:53:15.550Z"))
                                .destinationAccountID("<id>")
                                .id("XXX")
                                .initialAmount(new BigInteger("100"))
                                .metadata(V2PaymentMetadata.builder()
                                    .build())
                                .raw(V2PaymentRaw.builder()
                                    .build())
                                .reference("<value>")
                                .scheme(Scheme.AMEX)
                                .sourceAccountID("<id>")
                                .status(V2PaymentStatus.CANCELLED)
                                .type(V2PaymentType.PAY_IN)
                                .build())
                            .build())
                        .listWallets(V2ListWalletsResponse.builder()
                            .cursor(V2ListWalletsResponseCursor.builder()
                                .data(List.of(
                                    V2Wallet.builder()
                                        .createdAt(OffsetDateTime.parse("2025-11-27T02:08:52.827Z"))
                                        .id("5d3894ae-ce7c-44b7-9c48-3e4cba69dcb9")
                                        .ledger("<value>")
                                        .metadata(Map.ofEntries(
                                        ))
                                        .name("<value>")
                                        .build(),
                                    V2Wallet.builder()
                                        .createdAt(OffsetDateTime.parse("2025-05-20T17:13:48.350Z"))
                                        .id("f5d6610e-e457-43cc-b9c2-41fd8f61b492")
                                        .ledger("<value>")
                                        .metadata(Map.ofEntries(
                                        ))
                                        .name("<value>")
                                        .build(),
                                    V2Wallet.builder()
                                        .createdAt(OffsetDateTime.parse("2023-01-18T03:26:48.477Z"))
                                        .id("26a0c2ea-29e8-484a-bef5-0fac9fda12cb")
                                        .ledger("<value>")
                                        .metadata(Map.ofEntries(
                                            Map.entry("key", "<value>"),
                                            Map.entry("key1", "<value>"),
                                            Map.entry("key2", "<value>")))
                                        .name("<value>")
                                        .build()))
                                .pageSize(15L)
                                .hasMore(false)
                                .next("")
                                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                                .build())
                            .build())
                        .build())
                    .build()))
            .build(),
            res.v2GetWorkflowInstanceHistoryStageResponse().get());
    }

    @Test
    public void testSDKV2_V2GetServerInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetServerInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetServerInfoResponse res = sdk.orchestration().v2().getServerInfo()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2ServerInfo.builder()
            .version("<value>")
            .build(),
            res.v2ServerInfo().get());
    }

    @Test
    public void testSDKV2_V2GetWorkflow() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2GetWorkflow");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2GetWorkflowRequest req = V2GetWorkflowRequest.builder()
                .flowId("xxx")
                .build();

        V2GetWorkflowResponse res = sdk.orchestration().v2().getWorkflow()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2GetWorkflowResponse.builder()
            .data(V2Workflow.builder()
                .config(V2WorkflowConfig.builder()
                    .stages(List.of(
                        Map.ofEntries(
                            Map.entry("key", "<value>")),
                        Map.ofEntries(
                            Map.entry("key", "<value>"),
                            Map.entry("key1", "<value>")),
                        Map.ofEntries(
                        )))
                    .build())
                .createdAt(OffsetDateTime.parse("2025-05-07T16:56:33.373Z"))
                .id("<id>")
                .updatedAt(OffsetDateTime.parse("2023-01-19T02:43:34.985Z"))
                .build())
            .build(),
            res.v2GetWorkflowResponse().get());
    }

    @Test
    public void testSDKV2_V2ListInstances() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ListInstances");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ListInstancesRequest req = V2ListInstancesRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .running(true)
                .workflowID("xxx")
                .build();

        V2ListInstancesResponse res = sdk.orchestration().v2().listInstances()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2ListRunsResponse.builder()
            .cursor(V2ListRunsResponseCursor.builder()
                .data(List.of(
                ))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v2ListRunsResponse().get());
    }

    @Test
    public void testSDKV2_V2ListTriggers() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ListTriggers");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ListTriggersRequest req = V2ListTriggersRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V2ListTriggersResponse res = sdk.orchestration().v2().listTriggers()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2ListTriggersResponse.builder()
            .cursor(V2ListTriggersResponseCursor.builder()
                .data(List.of(
                    V2Trigger.builder()
                        .createdAt(OffsetDateTime.parse("2024-09-09T22:34:30.799Z"))
                        .event("<value>")
                        .id("<id>")
                        .workflowID("<id>")
                        .build(),
                    V2Trigger.builder()
                        .createdAt(OffsetDateTime.parse("2025-10-25T17:04:34.359Z"))
                        .event("<value>")
                        .id("<id>")
                        .workflowID("<id>")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v2ListTriggersResponse().get());
    }

    @Test
    public void testSDKV2_V2ListTriggersOccurrences() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ListTriggersOccurrences");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ListTriggersOccurrencesRequest req = V2ListTriggersOccurrencesRequest.builder()
                .triggerID("<id>")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V2ListTriggersOccurrencesResponse res = sdk.orchestration().v2().listTriggersOccurrences()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2ListTriggersOccurrencesResponse.builder()
            .cursor(V2ListTriggersOccurrencesResponseCursor.builder()
                .data(List.of(
                    V2TriggerOccurrence.builder()
                        .date(OffsetDateTime.parse("2025-10-13T07:55:03.028Z"))
                        .event(Map.ofEntries(
                            Map.entry("key", "<value>"),
                            Map.entry("key1", "<value>")))
                        .triggerID("<id>")
                        .build(),
                    V2TriggerOccurrence.builder()
                        .date(OffsetDateTime.parse("2024-10-03T19:33:42.523Z"))
                        .event(Map.ofEntries(
                        ))
                        .triggerID("<id>")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v2ListTriggersOccurrencesResponse().get());
    }

    @Test
    public void testSDKV2_V2ListWorkflows() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ListWorkflows");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ListWorkflowsRequest req = V2ListWorkflowsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V2ListWorkflowsResponse res = sdk.orchestration().v2().listWorkflows()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2ListWorkflowsResponse.builder()
            .cursor(V2ListWorkflowsResponseCursor.builder()
                .data(List.of(
                ))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v2ListWorkflowsResponse().get());
    }

    @Test
    public void testSDKV2_V2ReadTrigger() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2ReadTrigger");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2ReadTriggerRequest req = V2ReadTriggerRequest.builder()
                .triggerID("<id>")
                .build();

        V2ReadTriggerResponse res = sdk.orchestration().v2().readTrigger()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2ReadTriggerResponse.builder()
            .data(V2Trigger.builder()
                .createdAt(OffsetDateTime.parse("2023-03-26T21:52:22.792Z"))
                .event("<value>")
                .id("<id>")
                .workflowID("<id>")
                .build())
            .build(),
            res.v2ReadTriggerResponse().get());
    }

    @Test
    public void testSDKV2_V2RunWorkflow() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2RunWorkflow");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2RunWorkflowRequest req = V2RunWorkflowRequest.builder()
                .workflowID("xxx")
                .build();

        V2RunWorkflowResponse res = sdk.orchestration().v2().runWorkflow()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V2RunWorkflowResponse.builder()
            .data(V2WorkflowInstance.builder()
                .createdAt(OffsetDateTime.parse("2023-02-10T15:22:37.507Z"))
                .id("<id>")
                .terminated(false)
                .updatedAt(OffsetDateTime.parse("2024-10-27T10:56:23.429Z"))
                .workflowID("<id>")
                .build())
            .build(),
            res.v2RunWorkflowResponse().get());
    }

    @Test
    public void testSDKV2_V2SendEvent() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v2SendEvent");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V2SendEventRequest req = V2SendEventRequest.builder()
                .instanceID("xxx")
                .build();

        V2SendEventResponse res = sdk.orchestration().v2().sendEvent()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKV2_TestTrigger() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("testTrigger");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        TestTriggerRequest req = TestTriggerRequest.builder()
                .triggerID("<id>")
                .build();

        TestTriggerResponse res = sdk.orchestration().v2().testTrigger()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V2TestTriggerResponse.builder()
            .data(V2TriggerTest.builder()
                .build())
            .build(),
            res.v2TestTriggerResponse().get());
    }
}