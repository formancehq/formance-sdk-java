/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.formance.formance_sdk.models.operations.CancelEventRequest;
import com.formance.formance_sdk.models.operations.CancelEventResponse;
import com.formance.formance_sdk.models.operations.CreateTriggerResponse;
import com.formance.formance_sdk.models.operations.CreateWorkflowResponse;
import com.formance.formance_sdk.models.operations.DeleteTriggerRequest;
import com.formance.formance_sdk.models.operations.DeleteTriggerResponse;
import com.formance.formance_sdk.models.operations.DeleteWorkflowRequest;
import com.formance.formance_sdk.models.operations.DeleteWorkflowResponse;
import com.formance.formance_sdk.models.operations.GetInstanceHistoryRequest;
import com.formance.formance_sdk.models.operations.GetInstanceHistoryResponse;
import com.formance.formance_sdk.models.operations.GetInstanceRequest;
import com.formance.formance_sdk.models.operations.GetInstanceResponse;
import com.formance.formance_sdk.models.operations.GetInstanceStageHistoryRequest;
import com.formance.formance_sdk.models.operations.GetInstanceStageHistoryResponse;
import com.formance.formance_sdk.models.operations.GetWorkflowRequest;
import com.formance.formance_sdk.models.operations.GetWorkflowResponse;
import com.formance.formance_sdk.models.operations.ListInstancesRequest;
import com.formance.formance_sdk.models.operations.ListInstancesResponse;
import com.formance.formance_sdk.models.operations.ListTriggersOccurrencesRequest;
import com.formance.formance_sdk.models.operations.ListTriggersOccurrencesResponse;
import com.formance.formance_sdk.models.operations.ListTriggersRequest;
import com.formance.formance_sdk.models.operations.ListTriggersResponse;
import com.formance.formance_sdk.models.operations.ListWorkflowsResponse;
import com.formance.formance_sdk.models.operations.OrchestrationgetServerInfoResponse;
import com.formance.formance_sdk.models.operations.ReadTriggerRequest;
import com.formance.formance_sdk.models.operations.ReadTriggerResponse;
import com.formance.formance_sdk.models.operations.RunWorkflowRequest;
import com.formance.formance_sdk.models.operations.RunWorkflowResponse;
import com.formance.formance_sdk.models.operations.SendEventRequest;
import com.formance.formance_sdk.models.operations.SendEventResponse;
import com.formance.formance_sdk.models.shared.ActivityCreateTransaction;
import com.formance.formance_sdk.models.shared.ActivityCreateTransactionOutput;
import com.formance.formance_sdk.models.shared.ActivityCreditWallet;
import com.formance.formance_sdk.models.shared.ActivityDebitWallet;
import com.formance.formance_sdk.models.shared.ActivityGetAccountOutput;
import com.formance.formance_sdk.models.shared.ActivityGetPaymentOutput;
import com.formance.formance_sdk.models.shared.ActivityStripeTransfer;
import com.formance.formance_sdk.models.shared.DebitWalletRequest;
import com.formance.formance_sdk.models.shared.GetWorkflowInstanceHistoryResponse;
import com.formance.formance_sdk.models.shared.GetWorkflowInstanceHistoryStageResponse;
import com.formance.formance_sdk.models.shared.GetWorkflowInstanceResponse;
import com.formance.formance_sdk.models.shared.ListRunsResponse;
import com.formance.formance_sdk.models.shared.Monetary;
import com.formance.formance_sdk.models.shared.OrchestrationAccount;
import com.formance.formance_sdk.models.shared.OrchestrationCreditWalletRequest;
import com.formance.formance_sdk.models.shared.OrchestrationListWalletsResponse;
import com.formance.formance_sdk.models.shared.OrchestrationListWalletsResponseCursor;
import com.formance.formance_sdk.models.shared.OrchestrationPayment;
import com.formance.formance_sdk.models.shared.OrchestrationPaymentAdjustment;
import com.formance.formance_sdk.models.shared.OrchestrationPaymentAdjustmentRaw;
import com.formance.formance_sdk.models.shared.OrchestrationPaymentMetadata;
import com.formance.formance_sdk.models.shared.OrchestrationPaymentRaw;
import com.formance.formance_sdk.models.shared.OrchestrationPaymentScheme;
import com.formance.formance_sdk.models.shared.OrchestrationPaymentStatus;
import com.formance.formance_sdk.models.shared.OrchestrationPaymentType;
import com.formance.formance_sdk.models.shared.OrchestrationPostTransaction;
import com.formance.formance_sdk.models.shared.OrchestrationPostTransactionScript;
import com.formance.formance_sdk.models.shared.OrchestrationTransaction;
import com.formance.formance_sdk.models.shared.OrchestrationWallet;
import com.formance.formance_sdk.models.shared.Posting;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.ServerInfo;
import com.formance.formance_sdk.models.shared.Trigger;
import com.formance.formance_sdk.models.shared.TriggerData;
import com.formance.formance_sdk.models.shared.TriggerOccurrence;
import com.formance.formance_sdk.models.shared.Volume;
import com.formance.formance_sdk.models.shared.Workflow;
import com.formance.formance_sdk.models.shared.WorkflowConfig;
import com.formance.formance_sdk.models.shared.WorkflowInstance;
import com.formance.formance_sdk.models.shared.WorkflowInstanceHistoryStage;
import com.formance.formance_sdk.models.shared.WorkflowInstanceHistoryStageInput;
import com.formance.formance_sdk.models.shared.WorkflowInstanceHistoryStageOutput;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;

public class SDKOrchestrationV1Tests {

    @Test
    public void testSDKOrchestrationV1_CancelEvent() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("cancelEvent");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        CancelEventRequest req = CancelEventRequest.builder()
                .instanceID("xxx")
                .build();

        CancelEventResponse res = sdk.orchestration().v1().cancelEvent()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKOrchestrationV1_CreateTrigger() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createTrigger");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        TriggerData req = TriggerData.builder()
                .event("<value>")
                .workflowID("<id>")
                .build();

        CreateTriggerResponse res = sdk.orchestration().v1().createTrigger()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.CreateTriggerResponse.builder()
            .data(Trigger.builder()
                .createdAt(OffsetDateTime.parse("2024-01-13T03:40:57.557Z"))
                .event("<value>")
                .id("<id>")
                .workflowID("<id>")
                .build())
            .build(),
            res.createTriggerResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_CreateWorkflow() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createWorkflow");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        WorkflowConfig req = WorkflowConfig.builder()
                .stages(List.of(
                    Map.ofEntries(
                        Map.entry("key", "<value>"))))
                .build();

        CreateWorkflowResponse res = sdk.orchestration().v1().createWorkflow()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.CreateWorkflowResponse.builder()
            .data(Workflow.builder()
                .config(WorkflowConfig.builder()
                    .stages(List.of(
                        Map.ofEntries(
                        ),
                        Map.ofEntries(
                            Map.entry("key", "<value>"),
                            Map.entry("key1", "<value>")),
                        Map.ofEntries(
                        )))
                    .build())
                .createdAt(OffsetDateTime.parse("2025-08-28T15:20:54.999Z"))
                .id("<id>")
                .updatedAt(OffsetDateTime.parse("2024-01-22T19:31:50.523Z"))
                .build())
            .build(),
            res.createWorkflowResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_DeleteTrigger() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("deleteTrigger");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        DeleteTriggerRequest req = DeleteTriggerRequest.builder()
                .triggerID("<id>")
                .build();

        DeleteTriggerResponse res = sdk.orchestration().v1().deleteTrigger()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKOrchestrationV1_DeleteWorkflow() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("deleteWorkflow");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        DeleteWorkflowRequest req = DeleteWorkflowRequest.builder()
                .flowId("xxx")
                .build();

        DeleteWorkflowResponse res = sdk.orchestration().v1().deleteWorkflow()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKOrchestrationV1_GetInstance() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getInstance");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetInstanceRequest req = GetInstanceRequest.builder()
                .instanceID("xxx")
                .build();

        GetInstanceResponse res = sdk.orchestration().v1().getInstance()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            GetWorkflowInstanceResponse.builder()
            .data(WorkflowInstance.builder()
                .createdAt(OffsetDateTime.parse("2025-12-22T05:06:37.217Z"))
                .id("<id>")
                .terminated(true)
                .updatedAt(OffsetDateTime.parse("2023-04-26T16:05:05.917Z"))
                .workflowID("<id>")
                .build())
            .build(),
            res.getWorkflowInstanceResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_GetInstanceHistory() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getInstanceHistory");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetInstanceHistoryRequest req = GetInstanceHistoryRequest.builder()
                .instanceID("xxx")
                .build();

        GetInstanceHistoryResponse res = sdk.orchestration().v1().getInstanceHistory()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            GetWorkflowInstanceHistoryResponse.builder()
            .data(List.of(
            ))
            .build(),
            res.getWorkflowInstanceHistoryResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_GetInstanceStageHistory() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getInstanceStageHistory");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetInstanceStageHistoryRequest req = GetInstanceStageHistoryRequest.builder()
                .instanceID("xxx")
                .number(0L)
                .build();

        GetInstanceStageHistoryResponse res = sdk.orchestration().v1().getInstanceStageHistory()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            GetWorkflowInstanceHistoryStageResponse.builder()
            .data(List.of(
                WorkflowInstanceHistoryStage.builder()
                    .attempt(1195L)
                    .input(WorkflowInstanceHistoryStageInput.builder()
                        .createTransaction(ActivityCreateTransaction.builder()
                            .data(OrchestrationPostTransaction.builder()
                                .metadata(Map.ofEntries(
                                    Map.entry("admin", "true")))
                                .postings(List.of(
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build()))
                                .reference("ref:001")
                                .script(OrchestrationPostTransactionScript.builder()
                                    .plain("vars {\naccount $user\n}\nsend [COIN 10] (\n	source = @world\n	destination = $user\n)\n")
                                    .vars(Map.ofEntries(
                                        Map.entry("user", "users:042")))
                                    .build())
                                .build())
                            .build())
                        .creditWallet(ActivityCreditWallet.builder()
                            .data(OrchestrationCreditWalletRequest.builder()
                                .amount(Monetary.builder()
                                    .amount(new BigInteger("100"))
                                    .asset("USD/2")
                                    .build())
                                .metadata(Map.ofEntries(
                                    Map.entry("key", "")))
                                .sources(List.of(
                                ))
                                .build())
                            .build())
                        .debitWallet(ActivityDebitWallet.builder()
                            .data(DebitWalletRequest.builder()
                                .amount(Monetary.builder()
                                    .amount(new BigInteger("100"))
                                    .asset("USD/2")
                                    .build())
                                .metadata(Map.ofEntries(
                                    Map.entry("key", "")))
                                .pending(true)
                                .build())
                            .build())
                        .stripeTransfer(ActivityStripeTransfer.builder()
                            .amount(new BigInteger("100"))
                            .asset("USD")
                            .destination("acct_1Gqj58KZcSIg2N2q")
                            .waitingValidation(false)
                            .build())
                        .build())
                    .name("<value>")
                    .startedAt(OffsetDateTime.parse("2023-07-02T11:58:56.305Z"))
                    .terminated(false)
                    .output(WorkflowInstanceHistoryStageOutput.builder()
                        .createTransaction(ActivityCreateTransactionOutput.builder()
                            .data(OrchestrationTransaction.builder()
                                .id(new BigInteger("789895"))
                                .metadata(Map.ofEntries(
                                    Map.entry("admin", "true")))
                                .postings(List.of(
                                ))
                                .reverted(true)
                                .timestamp(OffsetDateTime.parse("2023-08-06T02:20:05.010Z"))
                                .reference("ref:001")
                                .build())
                            .build())
                        .getAccount(ActivityGetAccountOutput.builder()
                            .data(OrchestrationAccount.builder()
                                .address("users:001")
                                .metadata(Map.ofEntries(
                                    Map.entry("admin", "true")))
                                .effectiveVolumes(Map.ofEntries(
                                    Map.entry("USD", Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build()),
                                    Map.entry("EUR", Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build())))
                                .volumes(Map.ofEntries(
                                    Map.entry("USD", Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build()),
                                    Map.entry("EUR", Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build())))
                                .build())
                            .build())
                        .getPayment(ActivityGetPaymentOutput.builder()
                            .data(OrchestrationPayment.builder()
                                .adjustments(List.of(
                                    OrchestrationPaymentAdjustment.builder()
                                        .absolute(false)
                                        .amount(new BigInteger("100"))
                                        .date(OffsetDateTime.parse("2025-04-08T02:48:47.425Z"))
                                        .raw(OrchestrationPaymentAdjustmentRaw.builder()
                                            .build())
                                        .status(OrchestrationPaymentStatus.CANCELLED)
                                        .build(),
                                    OrchestrationPaymentAdjustment.builder()
                                        .absolute(true)
                                        .amount(new BigInteger("100"))
                                        .date(OffsetDateTime.parse("2025-11-11T02:51:20.511Z"))
                                        .raw(OrchestrationPaymentAdjustmentRaw.builder()
                                            .build())
                                        .status(OrchestrationPaymentStatus.PENDING)
                                        .build()))
                                .asset("USD")
                                .connectorID("<id>")
                                .createdAt(OffsetDateTime.parse("2025-02-01T17:45:57.768Z"))
                                .destinationAccountID("<id>")
                                .id("XXX")
                                .initialAmount(new BigInteger("100"))
                                .metadata(OrchestrationPaymentMetadata.builder()
                                    .build())
                                .raw(OrchestrationPaymentRaw.builder()
                                    .build())
                                .reference("<value>")
                                .scheme(OrchestrationPaymentScheme.GOOGLE_PAY)
                                .sourceAccountID("<id>")
                                .status(OrchestrationPaymentStatus.TERMINATED)
                                .type(OrchestrationPaymentType.PAY_IN)
                                .build())
                            .build())
                        .listWallets(OrchestrationListWalletsResponse.builder()
                            .cursor(OrchestrationListWalletsResponseCursor.builder()
                                .data(List.of(
                                    OrchestrationWallet.builder()
                                        .createdAt(OffsetDateTime.parse("2025-12-06T17:39:27.860Z"))
                                        .id("ffbd66e8-3ce0-4c96-a10c-8f8e0fc37bf1")
                                        .ledger("<value>")
                                        .metadata(Map.ofEntries(
                                        ))
                                        .name("<value>")
                                        .build(),
                                    OrchestrationWallet.builder()
                                        .createdAt(OffsetDateTime.parse("2023-10-08T10:30:27.460Z"))
                                        .id("cc38d81a-72b4-44c3-9e12-1021e7d24c49")
                                        .ledger("<value>")
                                        .metadata(Map.ofEntries(
                                            Map.entry("key", "<value>"),
                                            Map.entry("key1", "<value>"),
                                            Map.entry("key2", "<value>")))
                                        .name("<value>")
                                        .build(),
                                    OrchestrationWallet.builder()
                                        .createdAt(OffsetDateTime.parse("2023-08-19T00:05:57.472Z"))
                                        .id("52b35c03-d99a-4510-8a1f-81f33c690889")
                                        .ledger("<value>")
                                        .metadata(Map.ofEntries(
                                        ))
                                        .name("<value>")
                                        .build()))
                                .pageSize(15L)
                                .hasMore(false)
                                .next("")
                                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                                .build())
                            .build())
                        .revertTransaction(ActivityCreateTransactionOutput.builder()
                            .data(OrchestrationTransaction.builder()
                                .id(new BigInteger("619586"))
                                .metadata(Map.ofEntries(
                                    Map.entry("admin", "true")))
                                .postings(List.of(
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build(),
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build()))
                                .reverted(false)
                                .timestamp(OffsetDateTime.parse("2023-05-29T15:10:35.259Z"))
                                .reference("ref:001")
                                .build())
                            .build())
                        .build())
                    .build(),
                WorkflowInstanceHistoryStage.builder()
                    .attempt(626222L)
                    .input(WorkflowInstanceHistoryStageInput.builder()
                        .createTransaction(ActivityCreateTransaction.builder()
                            .data(OrchestrationPostTransaction.builder()
                                .metadata(Map.ofEntries(
                                    Map.entry("admin", "true")))
                                .postings(List.of(
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build(),
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build(),
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build()))
                                .reference("ref:001")
                                .script(OrchestrationPostTransactionScript.builder()
                                    .plain("vars {\naccount $user\n}\nsend [COIN 10] (\n	source = @world\n	destination = $user\n)\n")
                                    .vars(Map.ofEntries(
                                        Map.entry("user", "users:042")))
                                    .build())
                                .build())
                            .build())
                        .creditWallet(ActivityCreditWallet.builder()
                            .data(OrchestrationCreditWalletRequest.builder()
                                .amount(Monetary.builder()
                                    .amount(new BigInteger("100"))
                                    .asset("USD/2")
                                    .build())
                                .metadata(Map.ofEntries(
                                    Map.entry("key", "")))
                                .sources(List.of(
                                ))
                                .build())
                            .build())
                        .debitWallet(ActivityDebitWallet.builder()
                            .data(DebitWalletRequest.builder()
                                .amount(Monetary.builder()
                                    .amount(new BigInteger("100"))
                                    .asset("USD/2")
                                    .build())
                                .metadata(Map.ofEntries(
                                    Map.entry("key", "")))
                                .pending(true)
                                .build())
                            .build())
                        .stripeTransfer(ActivityStripeTransfer.builder()
                            .amount(new BigInteger("100"))
                            .asset("USD")
                            .destination("acct_1Gqj58KZcSIg2N2q")
                            .waitingValidation(false)
                            .build())
                        .build())
                    .name("<value>")
                    .startedAt(OffsetDateTime.parse("2023-12-17T14:52:10.553Z"))
                    .terminated(true)
                    .output(WorkflowInstanceHistoryStageOutput.builder()
                        .createTransaction(ActivityCreateTransactionOutput.builder()
                            .data(OrchestrationTransaction.builder()
                                .id(new BigInteger("378579"))
                                .metadata(Map.ofEntries(
                                    Map.entry("admin", "true")))
                                .postings(List.of(
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build(),
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build(),
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build()))
                                .reverted(false)
                                .timestamp(OffsetDateTime.parse("2024-04-15T17:34:05.615Z"))
                                .reference("ref:001")
                                .build())
                            .build())
                        .getAccount(ActivityGetAccountOutput.builder()
                            .data(OrchestrationAccount.builder()
                                .address("users:001")
                                .metadata(Map.ofEntries(
                                    Map.entry("admin", "true")))
                                .effectiveVolumes(Map.ofEntries(
                                    Map.entry("USD", Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build()),
                                    Map.entry("EUR", Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build())))
                                .volumes(Map.ofEntries(
                                    Map.entry("USD", Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build()),
                                    Map.entry("EUR", Volume.builder()
                                        .input(new BigInteger("100"))
                                        .output(new BigInteger("10"))
                                        .balance(new BigInteger("90"))
                                        .build())))
                                .build())
                            .build())
                        .getPayment(ActivityGetPaymentOutput.builder()
                            .data(OrchestrationPayment.builder()
                                .adjustments(List.of(
                                    OrchestrationPaymentAdjustment.builder()
                                        .absolute(true)
                                        .amount(new BigInteger("100"))
                                        .date(OffsetDateTime.parse("2023-09-29T18:17:48.825Z"))
                                        .raw(OrchestrationPaymentAdjustmentRaw.builder()
                                            .build())
                                        .status(OrchestrationPaymentStatus.FAILED)
                                        .build(),
                                    OrchestrationPaymentAdjustment.builder()
                                        .absolute(false)
                                        .amount(new BigInteger("100"))
                                        .date(OffsetDateTime.parse("2025-10-19T21:59:00.100Z"))
                                        .raw(OrchestrationPaymentAdjustmentRaw.builder()
                                            .build())
                                        .status(OrchestrationPaymentStatus.TERMINATED)
                                        .build(),
                                    OrchestrationPaymentAdjustment.builder()
                                        .absolute(true)
                                        .amount(new BigInteger("100"))
                                        .date(OffsetDateTime.parse("2024-08-27T16:14:46.808Z"))
                                        .raw(OrchestrationPaymentAdjustmentRaw.builder()
                                            .build())
                                        .status(OrchestrationPaymentStatus.TERMINATED)
                                        .build()))
                                .asset("USD")
                                .connectorID("<id>")
                                .createdAt(OffsetDateTime.parse("2025-01-07T21:12:58.328Z"))
                                .destinationAccountID("<id>")
                                .id("XXX")
                                .initialAmount(new BigInteger("100"))
                                .metadata(OrchestrationPaymentMetadata.builder()
                                    .build())
                                .raw(OrchestrationPaymentRaw.builder()
                                    .build())
                                .reference("<value>")
                                .scheme(OrchestrationPaymentScheme.ACH)
                                .sourceAccountID("<id>")
                                .status(OrchestrationPaymentStatus.PENDING)
                                .type(OrchestrationPaymentType.TRANSFER)
                                .build())
                            .build())
                        .listWallets(OrchestrationListWalletsResponse.builder()
                            .cursor(OrchestrationListWalletsResponseCursor.builder()
                                .data(List.of(
                                    OrchestrationWallet.builder()
                                        .createdAt(OffsetDateTime.parse("2025-04-30T04:49:25.662Z"))
                                        .id("3b1509a5-fe8d-4e70-9916-180485cfaa61")
                                        .ledger("<value>")
                                        .metadata(Map.ofEntries(
                                            Map.entry("key", "<value>")))
                                        .name("<value>")
                                        .build(),
                                    OrchestrationWallet.builder()
                                        .createdAt(OffsetDateTime.parse("2025-06-23T23:43:36.792Z"))
                                        .id("a6d8edb3-a103-4920-bfca-b898a403e10c")
                                        .ledger("<value>")
                                        .metadata(Map.ofEntries(
                                        ))
                                        .name("<value>")
                                        .build()))
                                .pageSize(15L)
                                .hasMore(false)
                                .next("")
                                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                                .build())
                            .build())
                        .revertTransaction(ActivityCreateTransactionOutput.builder()
                            .data(OrchestrationTransaction.builder()
                                .id(new BigInteger("155282"))
                                .metadata(Map.ofEntries(
                                    Map.entry("admin", "true")))
                                .postings(List.of(
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build(),
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build(),
                                    Posting.builder()
                                        .amount(new BigInteger("100"))
                                        .asset("COIN")
                                        .destination("users:002")
                                        .source("users:001")
                                        .build()))
                                .reverted(false)
                                .timestamp(OffsetDateTime.parse("2023-12-07T07:38:05.268Z"))
                                .reference("ref:001")
                                .build())
                            .build())
                        .build())
                    .build()))
            .build(),
            res.getWorkflowInstanceHistoryStageResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_GetWorkflow() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getWorkflow");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetWorkflowRequest req = GetWorkflowRequest.builder()
                .flowId("xxx")
                .build();

        GetWorkflowResponse res = sdk.orchestration().v1().getWorkflow()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.GetWorkflowResponse.builder()
            .data(Workflow.builder()
                .config(WorkflowConfig.builder()
                    .stages(List.of(
                        Map.ofEntries(
                        )))
                    .build())
                .createdAt(OffsetDateTime.parse("2025-03-16T03:14:12.617Z"))
                .id("<id>")
                .updatedAt(OffsetDateTime.parse("2024-11-13T22:03:51.333Z"))
                .build())
            .build(),
            res.getWorkflowResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_ListInstances() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listInstances");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListInstancesRequest req = ListInstancesRequest.builder()
                .running(true)
                .workflowID("xxx")
                .build();

        ListInstancesResponse res = sdk.orchestration().v1().listInstances()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ListRunsResponse.builder()
            .data(List.of(
                WorkflowInstance.builder()
                    .createdAt(OffsetDateTime.parse("2024-07-17T08:20:08.742Z"))
                    .id("<id>")
                    .terminated(true)
                    .updatedAt(OffsetDateTime.parse("2023-05-04T22:49:25.313Z"))
                    .workflowID("<id>")
                    .build()))
            .build(),
            res.listRunsResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_ListTriggers() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listTriggers");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListTriggersRequest req = ListTriggersRequest.builder()
                .build();

        ListTriggersResponse res = sdk.orchestration().v1().listTriggers()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.ListTriggersResponse.builder()
            .data(List.of(
            ))
            .build(),
            res.listTriggersResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_ListTriggersOccurrences() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listTriggersOccurrences");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListTriggersOccurrencesRequest req = ListTriggersOccurrencesRequest.builder()
                .triggerID("<id>")
                .build();

        ListTriggersOccurrencesResponse res = sdk.orchestration().v1().listTriggersOccurrences()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.ListTriggersOccurrencesResponse.builder()
            .data(List.of(
                TriggerOccurrence.builder()
                    .date(OffsetDateTime.parse("2024-04-11T13:42:33.759Z"))
                    .event(Map.ofEntries(
                        Map.entry("key", "<value>"),
                        Map.entry("key1", "<value>")))
                    .triggerID("<id>")
                    .build(),
                TriggerOccurrence.builder()
                    .date(OffsetDateTime.parse("2023-04-01T04:29:12.442Z"))
                    .event(Map.ofEntries(
                        Map.entry("key", "<value>"),
                        Map.entry("key1", "<value>"),
                        Map.entry("key2", "<value>")))
                    .triggerID("<id>")
                    .build(),
                TriggerOccurrence.builder()
                    .date(OffsetDateTime.parse("2024-11-09T03:51:27.854Z"))
                    .event(Map.ofEntries(
                    ))
                    .triggerID("<id>")
                    .build()))
            .build(),
            res.listTriggersOccurrencesResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_ListWorkflows() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listWorkflows");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListWorkflowsResponse res = sdk.orchestration().v1().listWorkflows()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.ListWorkflowsResponse.builder()
            .data(List.of(
            ))
            .build(),
            res.listWorkflowsResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_OrchestrationgetServerInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("orchestrationgetServerInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        OrchestrationgetServerInfoResponse res = sdk.orchestration().v1().orchestrationgetServerInfo()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ServerInfo.builder()
            .version("<value>")
            .build(),
            res.serverInfo().get());
    }

    @Test
    public void testSDKOrchestrationV1_ReadTrigger() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("readTrigger");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ReadTriggerRequest req = ReadTriggerRequest.builder()
                .triggerID("<id>")
                .build();

        ReadTriggerResponse res = sdk.orchestration().v1().readTrigger()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.ReadTriggerResponse.builder()
            .data(Trigger.builder()
                .createdAt(OffsetDateTime.parse("2024-08-27T14:30:14.944Z"))
                .event("<value>")
                .id("<id>")
                .workflowID("<id>")
                .build())
            .build(),
            res.readTriggerResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_RunWorkflow() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("runWorkflow");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        RunWorkflowRequest req = RunWorkflowRequest.builder()
                .workflowID("xxx")
                .build();

        RunWorkflowResponse res = sdk.orchestration().v1().runWorkflow()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.RunWorkflowResponse.builder()
            .data(WorkflowInstance.builder()
                .createdAt(OffsetDateTime.parse("2025-11-19T22:37:10.059Z"))
                .id("<id>")
                .terminated(false)
                .updatedAt(OffsetDateTime.parse("2025-04-08T02:25:10.274Z"))
                .workflowID("<id>")
                .build())
            .build(),
            res.runWorkflowResponse().get());
    }

    @Test
    public void testSDKOrchestrationV1_SendEvent() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("sendEvent");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        SendEventRequest req = SendEventRequest.builder()
                .instanceID("xxx")
                .build();

        SendEventResponse res = sdk.orchestration().v1().sendEvent()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }
}