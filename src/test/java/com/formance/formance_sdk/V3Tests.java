/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.formance.formance_sdk.models.operations.V3AddAccountToPoolRequest;
import com.formance.formance_sdk.models.operations.V3AddAccountToPoolResponse;
import com.formance.formance_sdk.models.operations.V3ApprovePaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3ApprovePaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3CreateAccountResponse;
import com.formance.formance_sdk.models.operations.V3CreateBankAccountResponse;
import com.formance.formance_sdk.models.operations.V3CreatePaymentResponse;
import com.formance.formance_sdk.models.operations.V3CreatePoolResponse;
import com.formance.formance_sdk.models.operations.V3DeletePaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3DeletePaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3DeletePoolRequest;
import com.formance.formance_sdk.models.operations.V3DeletePoolResponse;
import com.formance.formance_sdk.models.operations.V3ForwardBankAccountRequest;
import com.formance.formance_sdk.models.operations.V3ForwardBankAccountResponse;
import com.formance.formance_sdk.models.operations.V3GetAccountBalancesRequest;
import com.formance.formance_sdk.models.operations.V3GetAccountBalancesResponse;
import com.formance.formance_sdk.models.operations.V3GetAccountRequest;
import com.formance.formance_sdk.models.operations.V3GetAccountResponse;
import com.formance.formance_sdk.models.operations.V3GetBankAccountRequest;
import com.formance.formance_sdk.models.operations.V3GetBankAccountResponse;
import com.formance.formance_sdk.models.operations.V3GetConnectorConfigRequest;
import com.formance.formance_sdk.models.operations.V3GetConnectorConfigResponse;
import com.formance.formance_sdk.models.operations.V3GetConnectorScheduleRequest;
import com.formance.formance_sdk.models.operations.V3GetConnectorScheduleResponse;
import com.formance.formance_sdk.models.operations.V3GetPaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3GetPaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3GetPaymentRequest;
import com.formance.formance_sdk.models.operations.V3GetPaymentResponse;
import com.formance.formance_sdk.models.operations.V3GetPoolBalancesRequest;
import com.formance.formance_sdk.models.operations.V3GetPoolBalancesResponse;
import com.formance.formance_sdk.models.operations.V3GetPoolRequest;
import com.formance.formance_sdk.models.operations.V3GetPoolResponse;
import com.formance.formance_sdk.models.operations.V3GetTaskRequest;
import com.formance.formance_sdk.models.operations.V3GetTaskResponse;
import com.formance.formance_sdk.models.operations.V3InitiatePaymentRequest;
import com.formance.formance_sdk.models.operations.V3InitiatePaymentResponse;
import com.formance.formance_sdk.models.operations.V3InstallConnectorResponse;
import com.formance.formance_sdk.models.operations.V3ListAccountsRequest;
import com.formance.formance_sdk.models.operations.V3ListAccountsResponse;
import com.formance.formance_sdk.models.operations.V3ListBankAccountsRequest;
import com.formance.formance_sdk.models.operations.V3ListBankAccountsResponse;
import com.formance.formance_sdk.models.operations.V3ListConnectorConfigsResponse;
import com.formance.formance_sdk.models.operations.V3ListConnectorScheduleInstancesRequest;
import com.formance.formance_sdk.models.operations.V3ListConnectorScheduleInstancesResponse;
import com.formance.formance_sdk.models.operations.V3ListConnectorSchedulesRequest;
import com.formance.formance_sdk.models.operations.V3ListConnectorSchedulesResponse;
import com.formance.formance_sdk.models.operations.V3ListConnectorsRequest;
import com.formance.formance_sdk.models.operations.V3ListConnectorsResponse;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationAdjustmentsRequest;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationAdjustmentsResponse;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationRelatedPaymentsRequest;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationRelatedPaymentsResponse;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationsRequest;
import com.formance.formance_sdk.models.operations.V3ListPaymentInitiationsResponse;
import com.formance.formance_sdk.models.operations.V3ListPaymentsRequest;
import com.formance.formance_sdk.models.operations.V3ListPaymentsResponse;
import com.formance.formance_sdk.models.operations.V3ListPoolsRequest;
import com.formance.formance_sdk.models.operations.V3ListPoolsResponse;
import com.formance.formance_sdk.models.operations.V3RejectPaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3RejectPaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3RemoveAccountFromPoolRequest;
import com.formance.formance_sdk.models.operations.V3RemoveAccountFromPoolResponse;
import com.formance.formance_sdk.models.operations.V3ResetConnectorRequest;
import com.formance.formance_sdk.models.operations.V3ResetConnectorResponse;
import com.formance.formance_sdk.models.operations.V3RetryPaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3RetryPaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3ReversePaymentInitiationRequest;
import com.formance.formance_sdk.models.operations.V3ReversePaymentInitiationResponse;
import com.formance.formance_sdk.models.operations.V3UninstallConnectorRequest;
import com.formance.formance_sdk.models.operations.V3UninstallConnectorResponse;
import com.formance.formance_sdk.models.operations.V3UpdateBankAccountMetadataRequest;
import com.formance.formance_sdk.models.operations.V3UpdateBankAccountMetadataResponse;
import com.formance.formance_sdk.models.operations.V3UpdatePaymentMetadataRequest;
import com.formance.formance_sdk.models.operations.V3UpdatePaymentMetadataResponse;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.V3Account;
import com.formance.formance_sdk.models.shared.V3AccountRaw;
import com.formance.formance_sdk.models.shared.V3AccountTypeEnum;
import com.formance.formance_sdk.models.shared.V3AccountsCursorResponse;
import com.formance.formance_sdk.models.shared.V3AccountsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3ApprovePaymentInitiationResponseData;
import com.formance.formance_sdk.models.shared.V3Balance;
import com.formance.formance_sdk.models.shared.V3BalancesCursorResponse;
import com.formance.formance_sdk.models.shared.V3BalancesCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3BankAccount;
import com.formance.formance_sdk.models.shared.V3BankAccountsCursorResponse;
import com.formance.formance_sdk.models.shared.V3BankAccountsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3Connector;
import com.formance.formance_sdk.models.shared.V3ConnectorConfig;
import com.formance.formance_sdk.models.shared.V3ConnectorConfigsResponse;
import com.formance.formance_sdk.models.shared.V3ConnectorConfigsResponseConnector;
import com.formance.formance_sdk.models.shared.V3ConnectorConfigsResponseData;
import com.formance.formance_sdk.models.shared.V3ConnectorConfigsResponseKey;
import com.formance.formance_sdk.models.shared.V3ConnectorScheduleInstancesCursorResponse;
import com.formance.formance_sdk.models.shared.V3ConnectorScheduleInstancesCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3ConnectorScheduleResponse;
import com.formance.formance_sdk.models.shared.V3ConnectorSchedulesCursorResponse;
import com.formance.formance_sdk.models.shared.V3ConnectorSchedulesCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3ConnectorsCursorResponse;
import com.formance.formance_sdk.models.shared.V3ConnectorsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3CreateAccountRequest;
import com.formance.formance_sdk.models.shared.V3CreateBankAccountRequest;
import com.formance.formance_sdk.models.shared.V3CreatePaymentRequest;
import com.formance.formance_sdk.models.shared.V3CreatePoolRequest;
import com.formance.formance_sdk.models.shared.V3DummypayConfig;
import com.formance.formance_sdk.models.shared.V3ForwardBankAccountResponseData;
import com.formance.formance_sdk.models.shared.V3InitiatePaymentResponseData;
import com.formance.formance_sdk.models.shared.V3InstallConnectorRequest;
import com.formance.formance_sdk.models.shared.V3Instance;
import com.formance.formance_sdk.models.shared.V3Payment;
import com.formance.formance_sdk.models.shared.V3PaymentInitiation;
import com.formance.formance_sdk.models.shared.V3PaymentInitiationAdjustment;
import com.formance.formance_sdk.models.shared.V3PaymentInitiationAdjustmentsCursorResponse;
import com.formance.formance_sdk.models.shared.V3PaymentInitiationAdjustmentsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3PaymentInitiationRelatedPaymentsCursorResponse;
import com.formance.formance_sdk.models.shared.V3PaymentInitiationRelatedPaymentsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3PaymentInitiationStatusEnum;
import com.formance.formance_sdk.models.shared.V3PaymentInitiationTypeEnum;
import com.formance.formance_sdk.models.shared.V3PaymentInitiationsCursorResponse;
import com.formance.formance_sdk.models.shared.V3PaymentInitiationsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3PaymentStatusEnum;
import com.formance.formance_sdk.models.shared.V3PaymentTypeEnum;
import com.formance.formance_sdk.models.shared.V3PaymentsCursorResponse;
import com.formance.formance_sdk.models.shared.V3PaymentsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3Pool;
import com.formance.formance_sdk.models.shared.V3PoolBalance;
import com.formance.formance_sdk.models.shared.V3PoolBalancesResponse;
import com.formance.formance_sdk.models.shared.V3PoolsCursorResponse;
import com.formance.formance_sdk.models.shared.V3PoolsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.V3RetryPaymentInitiationResponseData;
import com.formance.formance_sdk.models.shared.V3ReversePaymentInitiationResponseData;
import com.formance.formance_sdk.models.shared.V3Schedule;
import com.formance.formance_sdk.models.shared.V3Task;
import com.formance.formance_sdk.models.shared.V3TaskStatusEnum;
import com.formance.formance_sdk.models.shared.V3UninstallConnectorResponseData;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.List;
import org.junit.jupiter.api.Test;

public class V3Tests {

    @Test
    public void testV3_V3AddAccountToPool() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3AddAccountToPool");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3AddAccountToPoolRequest req = V3AddAccountToPoolRequest.builder()
                .accountID("<id>")
                .poolID("<id>")
                .build();

        V3AddAccountToPoolResponse res = sdk.payments().v3().addAccountToPool()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV3_V3ApprovePaymentInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ApprovePaymentInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ApprovePaymentInitiationRequest req = V3ApprovePaymentInitiationRequest.builder()
                .paymentInitiationID("<id>")
                .build();

        V3ApprovePaymentInitiationResponse res = sdk.payments().v3().approvePaymentInitiation()
                .request(req)
                .call();
        assertEquals(202, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3ApprovePaymentInitiationResponse.builder()
            .data(V3ApprovePaymentInitiationResponseData.builder()
                .taskID("<id>")
                .build())
            .build(),
            res.v3ApprovePaymentInitiationResponse().get());
    }

    @Test
    public void testV3_V3CreateAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3CreateAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3CreateAccountRequest req = V3CreateAccountRequest.builder()
                .accountName("<value>")
                .connectorID("<value>")
                .createdAt(OffsetDateTime.parse("2024-08-24T11:59:25.466Z"))
                .reference("<value>")
                .type(V3AccountTypeEnum.EXTERNAL)
                .build();

        V3CreateAccountResponse res = sdk.payments().v3().createAccount()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3CreateAccountResponse.builder()
            .data(V3Account.builder()
                .connectorID("<value>")
                .createdAt(OffsetDateTime.parse("2023-08-09T11:34:36.410Z"))
                .id("<id>")
                .provider("<value>")
                .raw(V3AccountRaw.builder()
                    .build())
                .reference("<value>")
                .type(V3AccountTypeEnum.UNKNOWN)
                .build())
            .build(),
            res.v3CreateAccountResponse().get());
    }

    @Test
    public void testV3_V3CreateBankAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3CreateBankAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3CreateBankAccountRequest req = V3CreateBankAccountRequest.builder()
                .name("<value>")
                .build();

        V3CreateBankAccountResponse res = sdk.payments().v3().createBankAccount()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3CreateBankAccountResponse.builder()
            .data("<value>")
            .build(),
            res.v3CreateBankAccountResponse().get());
    }

    @Test
    public void testV3_V3CreatePayment() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3CreatePayment");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3CreatePaymentRequest req = V3CreatePaymentRequest.builder()
                .amount(new BigInteger("602763"))
                .asset("<value>")
                .connectorID("<value>")
                .createdAt(OffsetDateTime.parse("2024-08-20T04:36:26.084Z"))
                .initialAmount(new BigInteger("423655"))
                .reference("<value>")
                .scheme("<value>")
                .type(V3PaymentTypeEnum.TRANSFER)
                .build();

        V3CreatePaymentResponse res = sdk.payments().v3().createPayment()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3CreatePaymentResponse.builder()
            .data(V3Payment.builder()
                .amount(new BigInteger("252554"))
                .asset("<value>")
                .connectorID("<value>")
                .createdAt(OffsetDateTime.parse("2024-12-31T19:31:25.838Z"))
                .id("<id>")
                .initialAmount(new BigInteger("581056"))
                .provider("<value>")
                .reference("<value>")
                .scheme("<value>")
                .status(V3PaymentStatusEnum.REFUNDED_FAILURE)
                .type(V3PaymentTypeEnum.UNKNOWN)
                .build())
            .build(),
            res.v3CreatePaymentResponse().get());
    }

    @Test
    public void testV3_V3CreatePool() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3CreatePool");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3CreatePoolRequest req = V3CreatePoolRequest.builder()
                .accountIDs(List.of(
                    "<value>"))
                .name("<value>")
                .build();

        V3CreatePoolResponse res = sdk.payments().v3().createPool()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3CreatePoolResponse.builder()
            .data("<value>")
            .build(),
            res.v3CreatePoolResponse().get());
    }

    @Test
    public void testV3_V3DeletePaymentInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3DeletePaymentInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3DeletePaymentInitiationRequest req = V3DeletePaymentInitiationRequest.builder()
                .paymentInitiationID("<id>")
                .build();

        V3DeletePaymentInitiationResponse res = sdk.payments().v3().deletePaymentInitiation()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV3_V3DeletePool() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3DeletePool");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3DeletePoolRequest req = V3DeletePoolRequest.builder()
                .poolID("<id>")
                .build();

        V3DeletePoolResponse res = sdk.payments().v3().deletePool()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV3_V3ForwardBankAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ForwardBankAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ForwardBankAccountRequest req = V3ForwardBankAccountRequest.builder()
                .bankAccountID("<id>")
                .build();

        V3ForwardBankAccountResponse res = sdk.payments().v3().forwardBankAccount()
                .request(req)
                .call();
        assertEquals(202, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3ForwardBankAccountResponse.builder()
            .data(V3ForwardBankAccountResponseData.builder()
                .taskID("<id>")
                .build())
            .build(),
            res.v3ForwardBankAccountResponse().get());
    }

    @Test
    public void testV3_V3GetAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3GetAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3GetAccountRequest req = V3GetAccountRequest.builder()
                .accountID("<id>")
                .build();

        V3GetAccountResponse res = sdk.payments().v3().getAccount()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3GetAccountResponse.builder()
            .data(V3Account.builder()
                .connectorID("<value>")
                .createdAt(OffsetDateTime.parse("2023-06-03T07:35:25.500Z"))
                .id("<id>")
                .provider("<value>")
                .raw(V3AccountRaw.builder()
                    .build())
                .reference("<value>")
                .type(V3AccountTypeEnum.INTERNAL)
                .build())
            .build(),
            res.v3GetAccountResponse().get());
    }

    @Test
    public void testV3_V3GetAccountBalances() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3GetAccountBalances");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3GetAccountBalancesRequest req = V3GetAccountBalancesRequest.builder()
                .accountID("<id>")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3GetAccountBalancesResponse res = sdk.payments().v3().getAccountBalances()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3BalancesCursorResponse.builder()
            .cursor(V3BalancesCursorResponseCursor.builder()
                .data(List.of(
                    V3Balance.builder()
                        .accountID("<id>")
                        .asset("<value>")
                        .balance(new BigInteger("401303"))
                        .createdAt(OffsetDateTime.parse("2023-07-10T00:38:07.826Z"))
                        .lastUpdatedAt(OffsetDateTime.parse("2025-07-01T02:16:38.081Z"))
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3BalancesCursorResponse().get());
    }

    @Test
    public void testV3_V3GetBankAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3GetBankAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3GetBankAccountRequest req = V3GetBankAccountRequest.builder()
                .bankAccountID("<id>")
                .build();

        V3GetBankAccountResponse res = sdk.payments().v3().getBankAccount()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3GetBankAccountResponse.builder()
            .data(V3BankAccount.builder()
                .createdAt(OffsetDateTime.parse("2023-11-05T20:09:51.675Z"))
                .id("<id>")
                .name("<value>")
                .build())
            .build(),
            res.v3GetBankAccountResponse().get());
    }

    @Test
    public void testV3_V3GetConnectorConfig() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3GetConnectorConfig");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3GetConnectorConfigRequest req = V3GetConnectorConfigRequest.builder()
                .connectorID("<id>")
                .build();

        V3GetConnectorConfigResponse res = sdk.payments().v3().getConnectorConfig()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3GetConnectorConfigResponse.builder()
            .data(V3InstallConnectorRequest.of(V3DummypayConfig.builder()
                .directory("/usr/src")
                .name("<value>")
                .pageSize(25L)
                .pollingPeriod("2m")
                .build()))
            .build(),
            res.v3GetConnectorConfigResponse().get());
    }

    @Test
    public void testV3_V3GetConnectorSchedule() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3GetConnectorSchedule");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3GetConnectorScheduleRequest req = V3GetConnectorScheduleRequest.builder()
                .connectorID("<id>")
                .scheduleID("<id>")
                .build();

        V3GetConnectorScheduleResponse res = sdk.payments().v3().getConnectorSchedule()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3ConnectorScheduleResponse.builder()
            .data(V3Schedule.builder()
                .connectorID("<value>")
                .createdAt(OffsetDateTime.parse("2023-12-11T20:45:37.151Z"))
                .id("<id>")
                .build())
            .build(),
            res.v3ConnectorScheduleResponse().get());
    }

    @Test
    public void testV3_V3GetPayment() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3GetPayment");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3GetPaymentRequest req = V3GetPaymentRequest.builder()
                .paymentID("<id>")
                .build();

        V3GetPaymentResponse res = sdk.payments().v3().getPayment()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3GetPaymentResponse.builder()
            .data(V3Payment.builder()
                .amount(new BigInteger("445486"))
                .asset("<value>")
                .connectorID("<value>")
                .createdAt(OffsetDateTime.parse("2025-01-05T13:03:22.264Z"))
                .id("<id>")
                .initialAmount(new BigInteger("485409"))
                .provider("<value>")
                .reference("<value>")
                .scheme("<value>")
                .status(V3PaymentStatusEnum.DISPUTE)
                .type(V3PaymentTypeEnum.PAYOUT)
                .build())
            .build(),
            res.v3GetPaymentResponse().get());
    }

    @Test
    public void testV3_V3GetPaymentInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3GetPaymentInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3GetPaymentInitiationRequest req = V3GetPaymentInitiationRequest.builder()
                .paymentInitiationID("<id>")
                .build();

        V3GetPaymentInitiationResponse res = sdk.payments().v3().getPaymentInitiation()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3GetPaymentInitiationResponse.builder()
            .data(V3PaymentInitiation.builder()
                .amount(new BigInteger("42625"))
                .asset("<value>")
                .connectorID("<value>")
                .createdAt(OffsetDateTime.parse("2025-07-18T19:40:16.233Z"))
                .description("off of between vacantly though instead gazebo")
                .id("<id>")
                .reference("<value>")
                .scheduledAt(OffsetDateTime.parse("2025-04-28T02:58:21.926Z"))
                .status(V3PaymentInitiationStatusEnum.REVERSE_FAILED)
                .type(V3PaymentInitiationTypeEnum.TRANSFER)
                .build())
            .build(),
            res.v3GetPaymentInitiationResponse().get());
    }

    @Test
    public void testV3_V3GetPool() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3GetPool");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3GetPoolRequest req = V3GetPoolRequest.builder()
                .poolID("<id>")
                .build();

        V3GetPoolResponse res = sdk.payments().v3().getPool()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3GetPoolResponse.builder()
            .data(V3Pool.builder()
                .createdAt(OffsetDateTime.parse("2024-04-23T06:52:21.825Z"))
                .id("<id>")
                .name("<value>")
                .poolAccounts(List.of(
                    "<value>"))
                .build())
            .build(),
            res.v3GetPoolResponse().get());
    }

    @Test
    public void testV3_V3GetPoolBalances() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3GetPoolBalances");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3GetPoolBalancesRequest req = V3GetPoolBalancesRequest.builder()
                .poolID("<id>")
                .build();

        V3GetPoolBalancesResponse res = sdk.payments().v3().getPoolBalances()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3PoolBalancesResponse.builder()
            .data(List.of(
                V3PoolBalance.builder()
                    .amount(new BigInteger("857230"))
                    .asset("<value>")
                    .build()))
            .build(),
            res.v3PoolBalancesResponse().get());
    }

    @Test
    public void testV3_V3GetTask() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3GetTask");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3GetTaskRequest req = V3GetTaskRequest.builder()
                .taskID("<id>")
                .build();

        V3GetTaskResponse res = sdk.payments().v3().getTask()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3GetTaskResponse.builder()
            .data(V3Task.builder()
                .createdAt(OffsetDateTime.parse("2025-04-18T04:31:16.226Z"))
                .id("<id>")
                .status(V3TaskStatusEnum.FAILED)
                .updatedAt(OffsetDateTime.parse("2023-03-17T17:53:01.920Z"))
                .build())
            .build(),
            res.v3GetTaskResponse().get());
    }

    @Test
    public void testV3_V3InitiatePayment() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3InitiatePayment");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3InitiatePaymentRequest req = V3InitiatePaymentRequest.builder()
                .build();

        V3InitiatePaymentResponse res = sdk.payments().v3().initiatePayment()
                .request(req)
                .call();
        assertEquals(202, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3InitiatePaymentResponse.builder()
            .data(V3InitiatePaymentResponseData.builder()
                .build())
            .build(),
            res.v3InitiatePaymentResponse().get());
    }

    @Test
    public void testV3_V3InstallConnector() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3InstallConnector");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        com.formance.formance_sdk.models.operations.V3InstallConnectorRequest req = com.formance.formance_sdk.models.operations.V3InstallConnectorRequest.builder()
                .connector("<value>")
                .build();

        V3InstallConnectorResponse res = sdk.payments().v3().installConnector()
                .request(req)
                .call();
        assertEquals(202, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3InstallConnectorResponse.builder()
            .data("<value>")
            .build(),
            res.v3InstallConnectorResponse().get());
    }

    @Test
    public void testV3_V3ListAccounts() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListAccounts");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListAccountsRequest req = V3ListAccountsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3ListAccountsResponse res = sdk.payments().v3().listAccounts()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3AccountsCursorResponse.builder()
            .cursor(V3AccountsCursorResponseCursor.builder()
                .data(List.of(
                ))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3AccountsCursorResponse().get());
    }

    @Test
    public void testV3_V3ListBankAccounts() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListBankAccounts");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListBankAccountsRequest req = V3ListBankAccountsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3ListBankAccountsResponse res = sdk.payments().v3().listBankAccounts()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3BankAccountsCursorResponse.builder()
            .cursor(V3BankAccountsCursorResponseCursor.builder()
                .data(List.of(
                    V3BankAccount.builder()
                        .createdAt(OffsetDateTime.parse("2023-04-07T16:35:38.005Z"))
                        .id("<id>")
                        .name("<value>")
                        .build(),
                    V3BankAccount.builder()
                        .createdAt(OffsetDateTime.parse("2024-07-11T05:58:56.792Z"))
                        .id("<id>")
                        .name("<value>")
                        .build(),
                    V3BankAccount.builder()
                        .createdAt(OffsetDateTime.parse("2025-10-15T15:52:02.711Z"))
                        .id("<id>")
                        .name("<value>")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3BankAccountsCursorResponse().get());
    }

    @Test
    public void testV3_V3ListConnectorConfigs() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListConnectorConfigs");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListConnectorConfigsResponse res = sdk.payments().v3().listConnectorConfigs()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3ConnectorConfigsResponse.builder()
            .data(V3ConnectorConfigsResponseData.builder()
                .connector(V3ConnectorConfigsResponseConnector.builder()
                    .key(V3ConnectorConfigsResponseKey.builder()
                        .dataType("set")
                        .required(false)
                        .build())
                    .build())
                .build())
            .build(),
            res.v3ConnectorConfigsResponse().get());
    }

    @Test
    public void testV3_V3ListConnectorScheduleInstances() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListConnectorScheduleInstances");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListConnectorScheduleInstancesRequest req = V3ListConnectorScheduleInstancesRequest.builder()
                .connectorID("<id>")
                .scheduleID("<id>")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3ListConnectorScheduleInstancesResponse res = sdk.payments().v3().listConnectorScheduleInstances()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3ConnectorScheduleInstancesCursorResponse.builder()
            .cursor(V3ConnectorScheduleInstancesCursorResponseCursor.builder()
                .data(List.of(
                    V3Instance.builder()
                        .connectorID("<value>")
                        .createdAt(OffsetDateTime.parse("2024-02-15T21:59:37.501Z"))
                        .id("<id>")
                        .scheduleID("<id>")
                        .terminated(false)
                        .build(),
                    V3Instance.builder()
                        .connectorID("<value>")
                        .createdAt(OffsetDateTime.parse("2023-09-07T21:29:03.593Z"))
                        .id("<id>")
                        .scheduleID("<id>")
                        .terminated(true)
                        .build(),
                    V3Instance.builder()
                        .connectorID("<value>")
                        .createdAt(OffsetDateTime.parse("2023-02-18T04:47:10.180Z"))
                        .id("<id>")
                        .scheduleID("<id>")
                        .terminated(false)
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3ConnectorScheduleInstancesCursorResponse().get());
    }

    @Test
    public void testV3_V3ListConnectorSchedules() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListConnectorSchedules");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListConnectorSchedulesRequest req = V3ListConnectorSchedulesRequest.builder()
                .connectorID("<id>")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3ListConnectorSchedulesResponse res = sdk.payments().v3().listConnectorSchedules()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3ConnectorSchedulesCursorResponse.builder()
            .cursor(V3ConnectorSchedulesCursorResponseCursor.builder()
                .data(List.of(
                    V3Schedule.builder()
                        .connectorID("<value>")
                        .createdAt(OffsetDateTime.parse("2023-12-07T01:38:17.309Z"))
                        .id("<id>")
                        .build(),
                    V3Schedule.builder()
                        .connectorID("<value>")
                        .createdAt(OffsetDateTime.parse("2023-11-04T20:51:22.049Z"))
                        .id("<id>")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3ConnectorSchedulesCursorResponse().get());
    }

    @Test
    public void testV3_V3ListConnectors() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListConnectors");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListConnectorsRequest req = V3ListConnectorsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3ListConnectorsResponse res = sdk.payments().v3().listConnectors()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3ConnectorsCursorResponse.builder()
            .cursor(V3ConnectorsCursorResponseCursor.builder()
                .data(List.of(
                    V3Connector.builder()
                        .config(V3ConnectorConfig.builder()
                            .build())
                        .createdAt(OffsetDateTime.parse("2025-09-02T22:23:44.264Z"))
                        .id("<id>")
                        .name("<value>")
                        .provider("<value>")
                        .reference("<value>")
                        .scheduledForDeletion(false)
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3ConnectorsCursorResponse().get());
    }

    @Test
    public void testV3_V3ListPaymentInitiationAdjustments() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListPaymentInitiationAdjustments");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListPaymentInitiationAdjustmentsRequest req = V3ListPaymentInitiationAdjustmentsRequest.builder()
                .paymentInitiationID("<id>")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3ListPaymentInitiationAdjustmentsResponse res = sdk.payments().v3().listPaymentInitiationAdjustments()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3PaymentInitiationAdjustmentsCursorResponse.builder()
            .cursor(V3PaymentInitiationAdjustmentsCursorResponseCursor.builder()
                .data(List.of(
                    V3PaymentInitiationAdjustment.builder()
                        .createdAt(OffsetDateTime.parse("2023-08-26T07:31:32.403Z"))
                        .id("<id>")
                        .status(V3PaymentInitiationStatusEnum.PROCESSING)
                        .build(),
                    V3PaymentInitiationAdjustment.builder()
                        .createdAt(OffsetDateTime.parse("2025-06-06T23:22:17.845Z"))
                        .id("<id>")
                        .status(V3PaymentInitiationStatusEnum.FAILED)
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3PaymentInitiationAdjustmentsCursorResponse().get());
    }

    @Test
    public void testV3_V3ListPaymentInitiationRelatedPayments() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListPaymentInitiationRelatedPayments");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListPaymentInitiationRelatedPaymentsRequest req = V3ListPaymentInitiationRelatedPaymentsRequest.builder()
                .paymentInitiationID("<id>")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3ListPaymentInitiationRelatedPaymentsResponse res = sdk.payments().v3().listPaymentInitiationRelatedPayments()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3PaymentInitiationRelatedPaymentsCursorResponse.builder()
            .cursor(V3PaymentInitiationRelatedPaymentsCursorResponseCursor.builder()
                .data(List.of(
                    V3Payment.builder()
                        .amount(new BigInteger("576099"))
                        .asset("<value>")
                        .connectorID("<value>")
                        .createdAt(OffsetDateTime.parse("2024-11-01T18:01:53.016Z"))
                        .id("<id>")
                        .initialAmount(new BigInteger("927729"))
                        .provider("<value>")
                        .reference("<value>")
                        .scheme("<value>")
                        .status(V3PaymentStatusEnum.CAPTURE_FAILED)
                        .type(V3PaymentTypeEnum.PAYOUT)
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3PaymentInitiationRelatedPaymentsCursorResponse().get());
    }

    @Test
    public void testV3_V3ListPaymentInitiations() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListPaymentInitiations");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListPaymentInitiationsRequest req = V3ListPaymentInitiationsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3ListPaymentInitiationsResponse res = sdk.payments().v3().listPaymentInitiations()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3PaymentInitiationsCursorResponse.builder()
            .cursor(V3PaymentInitiationsCursorResponseCursor.builder()
                .data(List.of(
                    V3PaymentInitiation.builder()
                        .amount(new BigInteger("203475"))
                        .asset("<value>")
                        .connectorID("<value>")
                        .createdAt(OffsetDateTime.parse("2024-03-08T03:55:10.091Z"))
                        .description("inside pessimistic small adrenalin reach measly boohoo eek soap amid")
                        .id("<id>")
                        .reference("<value>")
                        .scheduledAt(OffsetDateTime.parse("2025-11-27T20:49:45.578Z"))
                        .status(V3PaymentInitiationStatusEnum.UNKNOWN)
                        .type(V3PaymentInitiationTypeEnum.TRANSFER)
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3PaymentInitiationsCursorResponse().get());
    }

    @Test
    public void testV3_V3ListPayments() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListPayments");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListPaymentsRequest req = V3ListPaymentsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3ListPaymentsResponse res = sdk.payments().v3().listPayments()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3PaymentsCursorResponse.builder()
            .cursor(V3PaymentsCursorResponseCursor.builder()
                .data(List.of(
                    V3Payment.builder()
                        .amount(new BigInteger("229776"))
                        .asset("<value>")
                        .connectorID("<value>")
                        .createdAt(OffsetDateTime.parse("2025-01-18T18:30:54.062Z"))
                        .id("<id>")
                        .initialAmount(new BigInteger("182258"))
                        .provider("<value>")
                        .reference("<value>")
                        .scheme("<value>")
                        .status(V3PaymentStatusEnum.SUCCEEDED)
                        .type(V3PaymentTypeEnum.PAY_IN)
                        .build(),
                    V3Payment.builder()
                        .amount(new BigInteger("284985"))
                        .asset("<value>")
                        .connectorID("<value>")
                        .createdAt(OffsetDateTime.parse("2024-11-11T08:40:21.314Z"))
                        .id("<id>")
                        .initialAmount(new BigInteger("529755"))
                        .provider("<value>")
                        .reference("<value>")
                        .scheme("<value>")
                        .status(V3PaymentStatusEnum.REFUNDED)
                        .type(V3PaymentTypeEnum.OTHER)
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3PaymentsCursorResponse().get());
    }

    @Test
    public void testV3_V3ListPools() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ListPools");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ListPoolsRequest req = V3ListPoolsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        V3ListPoolsResponse res = sdk.payments().v3().listPools()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            V3PoolsCursorResponse.builder()
            .cursor(V3PoolsCursorResponseCursor.builder()
                .data(List.of(
                    V3Pool.builder()
                        .createdAt(OffsetDateTime.parse("2025-02-08T15:23:10.325Z"))
                        .id("<id>")
                        .name("<value>")
                        .poolAccounts(List.of(
                        ))
                        .build(),
                    V3Pool.builder()
                        .createdAt(OffsetDateTime.parse("2024-04-12T20:16:24.210Z"))
                        .id("<id>")
                        .name("<value>")
                        .poolAccounts(List.of(
                            "<value>"))
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.v3PoolsCursorResponse().get());
    }

    @Test
    public void testV3_V3RejectPaymentInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3RejectPaymentInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3RejectPaymentInitiationRequest req = V3RejectPaymentInitiationRequest.builder()
                .paymentInitiationID("<id>")
                .build();

        V3RejectPaymentInitiationResponse res = sdk.payments().v3().rejectPaymentInitiation()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV3_V3RemoveAccountFromPool() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3RemoveAccountFromPool");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3RemoveAccountFromPoolRequest req = V3RemoveAccountFromPoolRequest.builder()
                .accountID("<id>")
                .poolID("<id>")
                .build();

        V3RemoveAccountFromPoolResponse res = sdk.payments().v3().removeAccountFromPool()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV3_V3ResetConnector() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ResetConnector");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ResetConnectorRequest req = V3ResetConnectorRequest.builder()
                .connectorID("<id>")
                .build();

        V3ResetConnectorResponse res = sdk.payments().v3().resetConnector()
                .request(req)
                .call();
        assertEquals(202, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3ResetConnectorResponse.builder()
            .data("<value>")
            .build(),
            res.v3ResetConnectorResponse().get());
    }

    @Test
    public void testV3_V3RetryPaymentInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3RetryPaymentInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3RetryPaymentInitiationRequest req = V3RetryPaymentInitiationRequest.builder()
                .paymentInitiationID("<id>")
                .build();

        V3RetryPaymentInitiationResponse res = sdk.payments().v3().retryPaymentInitiation()
                .request(req)
                .call();
        assertEquals(202, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3RetryPaymentInitiationResponse.builder()
            .data(V3RetryPaymentInitiationResponseData.builder()
                .taskID("<id>")
                .build())
            .build(),
            res.v3RetryPaymentInitiationResponse().get());
    }

    @Test
    public void testV3_V3ReversePaymentInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3ReversePaymentInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3ReversePaymentInitiationRequest req = V3ReversePaymentInitiationRequest.builder()
                .paymentInitiationID("<id>")
                .build();

        V3ReversePaymentInitiationResponse res = sdk.payments().v3().reversePaymentInitiation()
                .request(req)
                .call();
        assertEquals(202, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3ReversePaymentInitiationResponse.builder()
            .data(V3ReversePaymentInitiationResponseData.builder()
                .build())
            .build(),
            res.v3ReversePaymentInitiationResponse().get());
    }

    @Test
    public void testV3_V3UninstallConnector() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3UninstallConnector");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3UninstallConnectorRequest req = V3UninstallConnectorRequest.builder()
                .connectorID("<id>")
                .build();

        V3UninstallConnectorResponse res = sdk.payments().v3().uninstallConnector()
                .request(req)
                .call();
        assertEquals(202, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.V3UninstallConnectorResponse.builder()
            .data(V3UninstallConnectorResponseData.builder()
                .taskID("<id>")
                .build())
            .build(),
            res.v3UninstallConnectorResponse().get());
    }

    @Test
    public void testV3_V3UpdateBankAccountMetadata() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3UpdateBankAccountMetadata");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3UpdateBankAccountMetadataRequest req = V3UpdateBankAccountMetadataRequest.builder()
                .bankAccountID("<id>")
                .build();

        V3UpdateBankAccountMetadataResponse res = sdk.payments().v3().updateBankAccountMetadata()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV3_V3UpdatePaymentMetadata() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("v3UpdatePaymentMetadata");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        V3UpdatePaymentMetadataRequest req = V3UpdatePaymentMetadataRequest.builder()
                .paymentID("<id>")
                .build();

        V3UpdatePaymentMetadataResponse res = sdk.payments().v3().updatePaymentMetadata()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }
}