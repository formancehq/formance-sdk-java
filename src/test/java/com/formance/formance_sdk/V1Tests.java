/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.formance.formance_sdk.models.operations.CreateClientResponse;
import com.formance.formance_sdk.models.operations.CreateSecretRequest;
import com.formance.formance_sdk.models.operations.CreateSecretResponse;
import com.formance.formance_sdk.models.operations.DeleteClientRequest;
import com.formance.formance_sdk.models.operations.DeleteClientResponse;
import com.formance.formance_sdk.models.operations.DeleteSecretRequest;
import com.formance.formance_sdk.models.operations.DeleteSecretResponse;
import com.formance.formance_sdk.models.operations.GetOIDCWellKnownsResponse;
import com.formance.formance_sdk.models.operations.GetServerInfoResponse;
import com.formance.formance_sdk.models.operations.ListClientsResponse;
import com.formance.formance_sdk.models.operations.ListUsersResponse;
import com.formance.formance_sdk.models.operations.ReadClientRequest;
import com.formance.formance_sdk.models.operations.ReadClientResponse;
import com.formance.formance_sdk.models.operations.ReadUserRequest;
import com.formance.formance_sdk.models.operations.ReadUserResponse;
import com.formance.formance_sdk.models.operations.UpdateClientRequest;
import com.formance.formance_sdk.models.operations.UpdateClientResponse;
import com.formance.formance_sdk.models.shared.ClientOptions;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.ServerInfo;
import com.formance.formance_sdk.models.shared.User;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.util.List;
import org.junit.jupiter.api.Test;

public class V1Tests {

    @Test
    public void testV1_CreateClient() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createClient");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ClientOptions req = ClientOptions.builder()
                .name("<value>")
                .build();

        CreateClientResponse res = sdk.auth().v1().createClient()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.CreateClientResponse.builder()
            .build(),
            res.createClientResponse().get());
    }

    @Test
    public void testV1_CreateSecret() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createSecret");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        CreateSecretRequest req = CreateSecretRequest.builder()
                .clientId("<id>")
                .build();

        CreateSecretResponse res = sdk.auth().v1().createSecret()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.CreateSecretResponse.builder()
            .build(),
            res.createSecretResponse().get());
    }

    @Test
    public void testV1_DeleteClient() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("deleteClient");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        DeleteClientRequest req = DeleteClientRequest.builder()
                .clientId("<id>")
                .build();

        DeleteClientResponse res = sdk.auth().v1().deleteClient()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV1_DeleteSecret() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("deleteSecret");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        DeleteSecretRequest req = DeleteSecretRequest.builder()
                .clientId("<id>")
                .secretId("<id>")
                .build();

        DeleteSecretResponse res = sdk.auth().v1().deleteSecret()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testV1_GetOIDCWellKnowns() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getOIDCWellKnowns");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetOIDCWellKnownsResponse res = sdk.auth().v1().getOIDCWellKnowns()
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testV1_GetServerInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getServerInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetServerInfoResponse res = sdk.auth().v1().getServerInfo()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ServerInfo.builder()
            .version("<value>")
            .build(),
            res.serverInfo().get());
    }

    @Test
    public void testV1_ListClients() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listClients");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListClientsResponse res = sdk.auth().v1().listClients()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.ListClientsResponse.builder()
            .build(),
            res.listClientsResponse().get());
    }

    @Test
    public void testV1_ListUsers() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listUsers");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListUsersResponse res = sdk.auth().v1().listUsers()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.ListUsersResponse.builder()
            .data(List.of(
                User.builder()
                    .email("user1@orga1.com")
                    .id("3bb03708-312f-48a0-821a-e765837dc2c4")
                    .subject("Jane Doe")
                    .build(),
                User.builder()
                    .email("user1@orga1.com")
                    .id("3bb03708-312f-48a0-821a-e765837dc2c4")
                    .subject("Jane Doe")
                    .build()))
            .build(),
            res.listUsersResponse().get());
    }

    @Test
    public void testV1_ReadClient() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("readClient");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ReadClientRequest req = ReadClientRequest.builder()
                .clientId("<id>")
                .build();

        ReadClientResponse res = sdk.auth().v1().readClient()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.ReadClientResponse.builder()
            .build(),
            res.readClientResponse().get());
    }

    @Test
    public void testV1_ReadUser() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("readUser");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ReadUserRequest req = ReadUserRequest.builder()
                .userId("<id>")
                .build();

        ReadUserResponse res = sdk.auth().v1().readUser()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.ReadUserResponse.builder()
            .data(User.builder()
                .email("user1@orga1.com")
                .id("3bb03708-312f-48a0-821a-e765837dc2c4")
                .subject("Jane Doe")
                .build())
            .build(),
            res.readUserResponse().get());
    }

    @Test
    public void testV1_UpdateClient() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("updateClient");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        UpdateClientRequest req = UpdateClientRequest.builder()
                .clientId("<id>")
                .build();

        UpdateClientResponse res = sdk.auth().v1().updateClient()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            com.formance.formance_sdk.models.shared.CreateClientResponse.builder()
            .build(),
            res.createClientResponse().get());
    }
}