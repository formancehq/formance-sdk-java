/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.formance.formance_sdk.models.operations.AddAccountToPoolRequest;
import com.formance.formance_sdk.models.operations.AddAccountToPoolResponse;
import com.formance.formance_sdk.models.operations.ConnectorsTransferRequest;
import com.formance.formance_sdk.models.operations.ConnectorsTransferResponse;
import com.formance.formance_sdk.models.operations.CreateAccountResponse;
import com.formance.formance_sdk.models.operations.CreateBankAccountResponse;
import com.formance.formance_sdk.models.operations.CreatePaymentResponse;
import com.formance.formance_sdk.models.operations.CreatePoolResponse;
import com.formance.formance_sdk.models.operations.CreateTransferInitiationResponse;
import com.formance.formance_sdk.models.operations.DeletePoolRequest;
import com.formance.formance_sdk.models.operations.DeletePoolResponse;
import com.formance.formance_sdk.models.operations.DeleteTransferInitiationRequest;
import com.formance.formance_sdk.models.operations.DeleteTransferInitiationResponse;
import com.formance.formance_sdk.models.operations.ForwardBankAccountRequest;
import com.formance.formance_sdk.models.operations.ForwardBankAccountResponse;
import com.formance.formance_sdk.models.operations.GetAccountBalancesRequest;
import com.formance.formance_sdk.models.operations.GetAccountBalancesResponse;
import com.formance.formance_sdk.models.operations.GetBankAccountRequest;
import com.formance.formance_sdk.models.operations.GetBankAccountResponse;
import com.formance.formance_sdk.models.operations.GetConnectorTaskRequest;
import com.formance.formance_sdk.models.operations.GetConnectorTaskResponse;
import com.formance.formance_sdk.models.operations.GetConnectorTaskV1Request;
import com.formance.formance_sdk.models.operations.GetConnectorTaskV1Response;
import com.formance.formance_sdk.models.operations.GetPaymentRequest;
import com.formance.formance_sdk.models.operations.GetPaymentResponse;
import com.formance.formance_sdk.models.operations.GetPoolBalancesRequest;
import com.formance.formance_sdk.models.operations.GetPoolBalancesResponse;
import com.formance.formance_sdk.models.operations.GetPoolRequest;
import com.formance.formance_sdk.models.operations.GetPoolResponse;
import com.formance.formance_sdk.models.operations.GetTransferInitiationRequest;
import com.formance.formance_sdk.models.operations.GetTransferInitiationResponse;
import com.formance.formance_sdk.models.operations.InstallConnectorRequest;
import com.formance.formance_sdk.models.operations.InstallConnectorResponse;
import com.formance.formance_sdk.models.operations.ListAllConnectorsResponse;
import com.formance.formance_sdk.models.operations.ListBankAccountsRequest;
import com.formance.formance_sdk.models.operations.ListBankAccountsResponse;
import com.formance.formance_sdk.models.operations.ListConfigsAvailableConnectorsResponse;
import com.formance.formance_sdk.models.operations.ListConnectorTasksRequest;
import com.formance.formance_sdk.models.operations.ListConnectorTasksResponse;
import com.formance.formance_sdk.models.operations.ListConnectorTasksV1Request;
import com.formance.formance_sdk.models.operations.ListConnectorTasksV1Response;
import com.formance.formance_sdk.models.operations.ListPaymentsRequest;
import com.formance.formance_sdk.models.operations.ListPaymentsResponse;
import com.formance.formance_sdk.models.operations.ListPoolsRequest;
import com.formance.formance_sdk.models.operations.ListPoolsResponse;
import com.formance.formance_sdk.models.operations.ListTransferInitiationsRequest;
import com.formance.formance_sdk.models.operations.ListTransferInitiationsResponse;
import com.formance.formance_sdk.models.operations.PaymentsgetAccountRequest;
import com.formance.formance_sdk.models.operations.PaymentsgetAccountResponse;
import com.formance.formance_sdk.models.operations.PaymentsgetServerInfoResponse;
import com.formance.formance_sdk.models.operations.PaymentslistAccountsRequest;
import com.formance.formance_sdk.models.operations.PaymentslistAccountsResponse;
import com.formance.formance_sdk.models.operations.ReadConnectorConfigRequest;
import com.formance.formance_sdk.models.operations.ReadConnectorConfigResponse;
import com.formance.formance_sdk.models.operations.ReadConnectorConfigV1Request;
import com.formance.formance_sdk.models.operations.ReadConnectorConfigV1Response;
import com.formance.formance_sdk.models.operations.RemoveAccountFromPoolRequest;
import com.formance.formance_sdk.models.operations.RemoveAccountFromPoolResponse;
import com.formance.formance_sdk.models.operations.ResetConnectorRequest;
import com.formance.formance_sdk.models.operations.ResetConnectorResponse;
import com.formance.formance_sdk.models.operations.ResetConnectorV1Request;
import com.formance.formance_sdk.models.operations.ResetConnectorV1Response;
import com.formance.formance_sdk.models.operations.RetryTransferInitiationRequest;
import com.formance.formance_sdk.models.operations.RetryTransferInitiationResponse;
import com.formance.formance_sdk.models.operations.ReverseTransferInitiationRequest;
import com.formance.formance_sdk.models.operations.ReverseTransferInitiationResponse;
import com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusRequest;
import com.formance.formance_sdk.models.operations.UdpateTransferInitiationStatusResponse;
import com.formance.formance_sdk.models.operations.UninstallConnectorRequest;
import com.formance.formance_sdk.models.operations.UninstallConnectorResponse;
import com.formance.formance_sdk.models.operations.UninstallConnectorV1Request;
import com.formance.formance_sdk.models.operations.UninstallConnectorV1Response;
import com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataRequest;
import com.formance.formance_sdk.models.operations.UpdateBankAccountMetadataResponse;
import com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Request;
import com.formance.formance_sdk.models.operations.UpdateConnectorConfigV1Response;
import com.formance.formance_sdk.models.operations.UpdateMetadataRequest;
import com.formance.formance_sdk.models.operations.UpdateMetadataResponse;
import com.formance.formance_sdk.models.shared.AccountBalance;
import com.formance.formance_sdk.models.shared.AccountRequest;
import com.formance.formance_sdk.models.shared.AccountType;
import com.formance.formance_sdk.models.shared.AccountsCursor;
import com.formance.formance_sdk.models.shared.AtlarConfig;
import com.formance.formance_sdk.models.shared.BalancesCursor;
import com.formance.formance_sdk.models.shared.BalancesCursorCursor;
import com.formance.formance_sdk.models.shared.BankAccount;
import com.formance.formance_sdk.models.shared.BankAccountRequest;
import com.formance.formance_sdk.models.shared.BankAccountResponse;
import com.formance.formance_sdk.models.shared.BankAccountsCursor;
import com.formance.formance_sdk.models.shared.BankAccountsCursorCursor;
import com.formance.formance_sdk.models.shared.Connector;
import com.formance.formance_sdk.models.shared.ConnectorConfig;
import com.formance.formance_sdk.models.shared.ConnectorConfigResponse;
import com.formance.formance_sdk.models.shared.ConnectorResponse;
import com.formance.formance_sdk.models.shared.ConnectorsConfigsResponse;
import com.formance.formance_sdk.models.shared.ConnectorsConfigsResponseConnector;
import com.formance.formance_sdk.models.shared.ConnectorsConfigsResponseData;
import com.formance.formance_sdk.models.shared.ConnectorsResponse;
import com.formance.formance_sdk.models.shared.ConnectorsResponseData;
import com.formance.formance_sdk.models.shared.Cursor;
import com.formance.formance_sdk.models.shared.Data;
import com.formance.formance_sdk.models.shared.Key;
import com.formance.formance_sdk.models.shared.ModulrConfig;
import com.formance.formance_sdk.models.shared.Payment;
import com.formance.formance_sdk.models.shared.PaymentAdjustment;
import com.formance.formance_sdk.models.shared.PaymentAdjustmentRaw;
import com.formance.formance_sdk.models.shared.PaymentRequest;
import com.formance.formance_sdk.models.shared.PaymentResponse;
import com.formance.formance_sdk.models.shared.PaymentScheme;
import com.formance.formance_sdk.models.shared.PaymentStatus;
import com.formance.formance_sdk.models.shared.PaymentType;
import com.formance.formance_sdk.models.shared.PaymentsAccount;
import com.formance.formance_sdk.models.shared.PaymentsAccountRaw;
import com.formance.formance_sdk.models.shared.PaymentsAccountResponse;
import com.formance.formance_sdk.models.shared.PaymentsCursor;
import com.formance.formance_sdk.models.shared.PaymentsCursorCursor;
import com.formance.formance_sdk.models.shared.Pool;
import com.formance.formance_sdk.models.shared.PoolBalances;
import com.formance.formance_sdk.models.shared.PoolBalancesResponse;
import com.formance.formance_sdk.models.shared.PoolRequest;
import com.formance.formance_sdk.models.shared.PoolResponse;
import com.formance.formance_sdk.models.shared.PoolsCursor;
import com.formance.formance_sdk.models.shared.PoolsCursorCursor;
import com.formance.formance_sdk.models.shared.Raw;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.ServerInfo;
import com.formance.formance_sdk.models.shared.Status;
import com.formance.formance_sdk.models.shared.StripeConfig;
import com.formance.formance_sdk.models.shared.TaskResponse;
import com.formance.formance_sdk.models.shared.TaskResponseData;
import com.formance.formance_sdk.models.shared.TaskStatus;
import com.formance.formance_sdk.models.shared.TaskWise;
import com.formance.formance_sdk.models.shared.TaskWiseDescriptor;
import com.formance.formance_sdk.models.shared.TasksCursor;
import com.formance.formance_sdk.models.shared.TasksCursorCursor;
import com.formance.formance_sdk.models.shared.TasksCursorData;
import com.formance.formance_sdk.models.shared.TransferInitiation;
import com.formance.formance_sdk.models.shared.TransferInitiationRequest;
import com.formance.formance_sdk.models.shared.TransferInitiationRequestType;
import com.formance.formance_sdk.models.shared.TransferInitiationResponse;
import com.formance.formance_sdk.models.shared.TransferInitiationStatus;
import com.formance.formance_sdk.models.shared.TransferInitiationType;
import com.formance.formance_sdk.models.shared.TransferInitiationsCursor;
import com.formance.formance_sdk.models.shared.TransferInitiationsCursorCursor;
import com.formance.formance_sdk.models.shared.TransferRequest;
import com.formance.formance_sdk.models.shared.TransferResponse;
import com.formance.formance_sdk.models.shared.UpdateTransferInitiationStatusRequest;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;

public class SDKPaymentsV1Tests {

    @Test
    public void testSDKPaymentsV1_AddAccountToPool() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("addAccountToPool");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        AddAccountToPoolRequest req = AddAccountToPoolRequest.builder()
                .addAccountToPoolRequest(com.formance.formance_sdk.models.shared.AddAccountToPoolRequest.builder()
                    .accountID("<id>")
                    .build())
                .poolId("XXX")
                .build();

        AddAccountToPoolResponse res = sdk.payments().v1().addAccountToPool()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_ConnectorsTransfer() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("connectorsTransfer");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ConnectorsTransferRequest req = ConnectorsTransferRequest.builder()
                .transferRequest(TransferRequest.builder()
                    .amount(new BigInteger("100"))
                    .asset("USD")
                    .destination("acct_1Gqj58KZcSIg2N2q")
                    .source("acct_1Gqj58KZcSIg2N2q")
                    .build())
                .connector(Connector.BANKING_CIRCLE)
                .build();

        ConnectorsTransferResponse res = sdk.payments().v1().connectorsTransfer()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TransferResponse.builder()
            .build(),
            res.transferResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_CreateAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        AccountRequest req = AccountRequest.builder()
                .connectorID("<id>")
                .createdAt(OffsetDateTime.parse("2025-08-19T02:15:08.152Z"))
                .reference("<value>")
                .type(AccountType.INTERNAL)
                .build();

        CreateAccountResponse res = sdk.payments().v1().createAccount()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PaymentsAccountResponse.builder()
            .data(PaymentsAccount.builder()
                .accountName("<value>")
                .connectorID("<id>")
                .createdAt(OffsetDateTime.parse("2023-04-28T00:06:23.447Z"))
                .defaultAsset("<value>")
                .defaultCurrency("<value>")
                .id("<id>")
                .metadata(Map.ofEntries(
                    Map.entry("key", "<value>"),
                    Map.entry("key1", "<value>")))
                .raw(PaymentsAccountRaw.builder()
                    .build())
                .reference("<value>")
                .type(AccountType.INTERNAL)
                .build())
            .build(),
            res.paymentsAccountResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_CreateBankAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createBankAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        BankAccountRequest req = BankAccountRequest.builder()
                .connectorID("<id>")
                .country("GB")
                .name("My account")
                .build();

        CreateBankAccountResponse res = sdk.payments().v1().createBankAccount()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            BankAccountResponse.builder()
            .data(BankAccount.builder()
                .country("Holy See (Vatican City State)")
                .createdAt(OffsetDateTime.parse("2024-08-31T23:24:27.067Z"))
                .id("<id>")
                .name("<value>")
                .build())
            .build(),
            res.bankAccountResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_CreatePayment() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createPayment");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        PaymentRequest req = PaymentRequest.builder()
                .amount(new BigInteger("100"))
                .asset("USD")
                .connectorID("<id>")
                .createdAt(OffsetDateTime.parse("2025-11-09T01:03:21.011Z"))
                .reference("<value>")
                .scheme(PaymentScheme.MOLPAY)
                .status(PaymentStatus.REFUNDED_FAILURE)
                .type(PaymentType.PAYOUT)
                .build();

        CreatePaymentResponse res = sdk.payments().v1().createPayment()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PaymentResponse.builder()
            .data(Payment.builder()
                .adjustments(List.of(
                ))
                .amount(new BigInteger("100"))
                .asset("USD")
                .connectorID("<id>")
                .createdAt(OffsetDateTime.parse("2023-02-21T01:47:02.496Z"))
                .destinationAccountID("<id>")
                .id("XXX")
                .initialAmount(new BigInteger("100"))
                .metadata(Map.ofEntries(
                    Map.entry("key", "<value>"),
                    Map.entry("key1", "<value>"),
                    Map.entry("key2", "<value>")))
                .raw(Raw.builder()
                    .build())
                .reference("<value>")
                .scheme(PaymentScheme.CUP)
                .sourceAccountID("<id>")
                .status(PaymentStatus.OTHER)
                .type(PaymentType.PAY_IN)
                .build())
            .build(),
            res.paymentResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_CreatePool() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createPool");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        PoolRequest req = PoolRequest.builder()
                .accountIDs(List.of(
                    "<value>",
                    "<value>",
                    "<value>"))
                .name("<value>")
                .build();

        CreatePoolResponse res = sdk.payments().v1().createPool()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PoolResponse.builder()
            .data(Pool.builder()
                .accounts(List.of(
                ))
                .id("<id>")
                .name("<value>")
                .build())
            .build(),
            res.poolResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_CreateTransferInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createTransferInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        TransferInitiationRequest req = TransferInitiationRequest.builder()
                .amount(new BigInteger("256698"))
                .asset("USD")
                .description("worthy pace vague ick liberalize between um")
                .destinationAccountID("<id>")
                .reference("XXX")
                .scheduledAt(OffsetDateTime.parse("2025-05-02T09:50:03.622Z"))
                .sourceAccountID("<id>")
                .type(TransferInitiationRequestType.PAYOUT)
                .validated(true)
                .build();

        CreateTransferInitiationResponse res = sdk.payments().v1().createTransferInitiation()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TransferInitiationResponse.builder()
            .data(TransferInitiation.builder()
                .amount(new BigInteger("422655"))
                .asset("USD")
                .connectorID("<id>")
                .createdAt(OffsetDateTime.parse("2023-01-07T23:05:45.713Z"))
                .description("jut profane apud newsstand printer fondly")
                .destinationAccountID("<id>")
                .error("<value>")
                .id("XXX")
                .initialAmount(new BigInteger("923751"))
                .reference("<value>")
                .scheduledAt(OffsetDateTime.parse("2023-01-12T11:17:22.320Z"))
                .sourceAccountID("<id>")
                .status(TransferInitiationStatus.PROCESSED)
                .type(TransferInitiationType.PAYOUT)
                .build())
            .build(),
            res.transferInitiationResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_DeletePool() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("deletePool");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        DeletePoolRequest req = DeletePoolRequest.builder()
                .poolId("XXX")
                .build();

        DeletePoolResponse res = sdk.payments().v1().deletePool()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_DeleteTransferInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("deleteTransferInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        DeleteTransferInitiationRequest req = DeleteTransferInitiationRequest.builder()
                .transferId("XXX")
                .build();

        DeleteTransferInitiationResponse res = sdk.payments().v1().deleteTransferInitiation()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_ForwardBankAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("forwardBankAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ForwardBankAccountRequest req = ForwardBankAccountRequest.builder()
                .forwardBankAccountRequest(com.formance.formance_sdk.models.shared.ForwardBankAccountRequest.builder()
                    .connectorID("<id>")
                    .build())
                .bankAccountId("XXX")
                .build();

        ForwardBankAccountResponse res = sdk.payments().v1().forwardBankAccount()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            BankAccountResponse.builder()
            .data(BankAccount.builder()
                .country("Belize")
                .createdAt(OffsetDateTime.parse("2023-01-21T13:08:56.229Z"))
                .id("<id>")
                .name("<value>")
                .build())
            .build(),
            res.bankAccountResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_GetAccountBalances() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getAccountBalances");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetAccountBalancesRequest req = GetAccountBalancesRequest.builder()
                .accountId("XXX")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .sort(List.of(
                    "date:asc",
                    "status:desc"))
                .build();

        GetAccountBalancesResponse res = sdk.payments().v1().getAccountBalances()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            BalancesCursor.builder()
            .cursor(BalancesCursorCursor.builder()
                .data(List.of(
                    AccountBalance.builder()
                        .accountId("<id>")
                        .asset("<value>")
                        .balance(new BigInteger("125462"))
                        .createdAt(OffsetDateTime.parse("2024-01-30T03:48:20.670Z"))
                        .currency("Argentine Peso")
                        .lastUpdatedAt(OffsetDateTime.parse("2025-07-01T14:03:15.166Z"))
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.balancesCursor().get());
    }

    @Test
    public void testSDKPaymentsV1_GetBankAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getBankAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetBankAccountRequest req = GetBankAccountRequest.builder()
                .bankAccountId("XXX")
                .build();

        GetBankAccountResponse res = sdk.payments().v1().getBankAccount()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            BankAccountResponse.builder()
            .data(BankAccount.builder()
                .country("Colombia")
                .createdAt(OffsetDateTime.parse("2023-03-04T16:16:17.382Z"))
                .id("<id>")
                .name("<value>")
                .build())
            .build(),
            res.bankAccountResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_GetConnectorTask() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getConnectorTask");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetConnectorTaskRequest req = GetConnectorTaskRequest.builder()
                .connector(Connector.ADYEN)
                .taskId("task1")
                .build();

        GetConnectorTaskResponse res = sdk.payments().v1().getConnectorTask()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TaskResponse.builder()
            .data(TaskResponseData.of(TaskWise.builder()
                .connectorID("<id>")
                .createdAt(OffsetDateTime.parse("2025-02-08T17:39:38.418Z"))
                .descriptor(TaskWiseDescriptor.builder()
                    .build())
                .id("8d4a71ba-4575-442a-9fdb-17eed3b13ec7")
                .status(TaskStatus.PENDING)
                .updatedAt(OffsetDateTime.parse("2025-04-25T00:27:47.982Z"))
                .build()))
            .build(),
            res.taskResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_GetConnectorTaskV1() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getConnectorTaskV1");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetConnectorTaskV1Request req = GetConnectorTaskV1Request.builder()
                .connector(Connector.BANKING_CIRCLE)
                .connectorId("XXX")
                .taskId("task1")
                .build();

        GetConnectorTaskV1Response res = sdk.payments().v1().getConnectorTaskV1()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TaskResponse.builder()
            .data(TaskResponseData.of(TaskWise.builder()
                .connectorID("<id>")
                .createdAt(OffsetDateTime.parse("2023-06-20T11:48:17.213Z"))
                .descriptor(TaskWiseDescriptor.builder()
                    .build())
                .id("592c3a8b-a286-4c92-93fe-1c798f795cd7")
                .status(TaskStatus.PENDING)
                .updatedAt(OffsetDateTime.parse("2025-11-10T01:58:07.691Z"))
                .build()))
            .build(),
            res.taskResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_GetPayment() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getPayment");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetPaymentRequest req = GetPaymentRequest.builder()
                .paymentId("XXX")
                .build();

        GetPaymentResponse res = sdk.payments().v1().getPayment()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PaymentResponse.builder()
            .data(Payment.builder()
                .adjustments(List.of(
                    PaymentAdjustment.builder()
                        .amount(new BigInteger("100"))
                        .createdAt(OffsetDateTime.parse("2025-11-19T01:14:15.129Z"))
                        .raw(PaymentAdjustmentRaw.builder()
                            .build())
                        .reference("<value>")
                        .status(PaymentStatus.EXPIRED)
                        .build()))
                .amount(new BigInteger("100"))
                .asset("USD")
                .connectorID("<id>")
                .createdAt(OffsetDateTime.parse("2024-02-18T17:18:36.576Z"))
                .destinationAccountID("<id>")
                .id("XXX")
                .initialAmount(new BigInteger("100"))
                .metadata(Map.ofEntries(
                    Map.entry("key", "<value>"),
                    Map.entry("key1", "<value>")))
                .raw(Raw.builder()
                    .build())
                .reference("<value>")
                .scheme(PaymentScheme.UNIONPAY)
                .sourceAccountID("<id>")
                .status(PaymentStatus.DISPUTE)
                .type(PaymentType.TRANSFER)
                .build())
            .build(),
            res.paymentResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_GetPool() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getPool");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetPoolRequest req = GetPoolRequest.builder()
                .poolId("XXX")
                .build();

        GetPoolResponse res = sdk.payments().v1().getPool()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PoolResponse.builder()
            .data(Pool.builder()
                .accounts(List.of(
                ))
                .id("<id>")
                .name("<value>")
                .build())
            .build(),
            res.poolResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_GetPoolBalances() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getPoolBalances");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetPoolBalancesRequest req = GetPoolBalancesRequest.builder()
                .at(OffsetDateTime.parse("2024-05-04T06:40:23.119Z"))
                .poolId("XXX")
                .build();

        GetPoolBalancesResponse res = sdk.payments().v1().getPoolBalances()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PoolBalancesResponse.builder()
            .data(PoolBalances.builder()
                .balances(List.of(
                ))
                .build())
            .build(),
            res.poolBalancesResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_GetTransferInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getTransferInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetTransferInitiationRequest req = GetTransferInitiationRequest.builder()
                .transferId("XXX")
                .build();

        GetTransferInitiationResponse res = sdk.payments().v1().getTransferInitiation()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TransferInitiationResponse.builder()
            .data(TransferInitiation.builder()
                .amount(new BigInteger("72812"))
                .asset("USD")
                .connectorID("<id>")
                .createdAt(OffsetDateTime.parse("2023-06-13T16:04:12.992Z"))
                .description("lack sick cheerfully minor")
                .destinationAccountID("<id>")
                .error("<value>")
                .id("XXX")
                .initialAmount(new BigInteger("849995"))
                .reference("<value>")
                .scheduledAt(OffsetDateTime.parse("2025-01-24T01:47:16.422Z"))
                .sourceAccountID("<id>")
                .status(TransferInitiationStatus.WAITING_FOR_VALIDATION)
                .type(TransferInitiationType.PAYOUT)
                .build())
            .build(),
            res.transferInitiationResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_InstallConnector() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("installConnector");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        InstallConnectorRequest req = InstallConnectorRequest.builder()
                .connectorConfig(ConnectorConfig.of(StripeConfig.builder()
                    .apiKey("XXX")
                    .name("My Stripe Account")
                    .build()))
                .connector(Connector.ATLAR)
                .build();

        InstallConnectorResponse res = sdk.payments().v1().installConnector()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            ConnectorResponse.builder()
            .data(Data.builder()
                .connectorID("<id>")
                .build())
            .build(),
            res.connectorResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_ListAllConnectors() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listAllConnectors");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListAllConnectorsResponse res = sdk.payments().v1().listAllConnectors()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ConnectorsResponse.builder()
            .data(List.of(
                ConnectorsResponseData.builder()
                    .connectorID("<id>")
                    .name("<value>")
                    .provider(Connector.MONEYCORP)
                    .build(),
                ConnectorsResponseData.builder()
                    .connectorID("<id>")
                    .name("<value>")
                    .provider(Connector.CURRENCY_CLOUD)
                    .build()))
            .build(),
            res.connectorsResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_ListBankAccounts() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listBankAccounts");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListBankAccountsRequest req = ListBankAccountsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .sort(List.of(
                    "date:asc",
                    "status:desc"))
                .build();

        ListBankAccountsResponse res = sdk.payments().v1().listBankAccounts()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            BankAccountsCursor.builder()
            .cursor(BankAccountsCursorCursor.builder()
                .data(List.of(
                    BankAccount.builder()
                        .country("Bahrain")
                        .createdAt(OffsetDateTime.parse("2023-02-23T22:10:49.411Z"))
                        .id("<id>")
                        .name("<value>")
                        .build(),
                    BankAccount.builder()
                        .country("Myanmar")
                        .createdAt(OffsetDateTime.parse("2023-12-30T23:44:22.122Z"))
                        .id("<id>")
                        .name("<value>")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.bankAccountsCursor().get());
    }

    @Test
    public void testSDKPaymentsV1_ListConfigsAvailableConnectors() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listConfigsAvailableConnectors");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListConfigsAvailableConnectorsResponse res = sdk.payments().v1().listConfigsAvailableConnectors()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ConnectorsConfigsResponse.builder()
            .data(ConnectorsConfigsResponseData.builder()
                .connector(ConnectorsConfigsResponseConnector.builder()
                    .key(Key.builder()
                        .dataType("real")
                        .required(false)
                        .build())
                    .build())
                .build())
            .build(),
            res.connectorsConfigsResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_ListConnectorTasks() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listConnectorTasks");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListConnectorTasksRequest req = ListConnectorTasksRequest.builder()
                .connector(Connector.MODULR)
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .build();

        ListConnectorTasksResponse res = sdk.payments().v1().listConnectorTasks()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TasksCursor.builder()
            .cursor(TasksCursorCursor.builder()
                .data(List.of(
                    TasksCursorData.of(TaskWise.builder()
                        .connectorID("<id>")
                        .createdAt(OffsetDateTime.parse("2024-03-30T15:06:52.730Z"))
                        .descriptor(TaskWiseDescriptor.builder()
                            .build())
                        .id("943abad6-1f7a-4a0d-b991-cf9266dd4814")
                        .status(TaskStatus.STOPPED)
                        .updatedAt(OffsetDateTime.parse("2024-10-15T18:08:06.313Z"))
                        .build()),
                    TasksCursorData.of(TaskWise.builder()
                        .connectorID("<id>")
                        .createdAt(OffsetDateTime.parse("2023-09-08T19:27:52.424Z"))
                        .descriptor(TaskWiseDescriptor.builder()
                            .build())
                        .id("f678351b-c600-4cf3-beff-e2c5cad006d4")
                        .status(TaskStatus.FAILED)
                        .updatedAt(OffsetDateTime.parse("2024-02-03T08:52:20.456Z"))
                        .build())))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.tasksCursor().get());
    }

    @Test
    public void testSDKPaymentsV1_ListConnectorTasksV1() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listConnectorTasksV1");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListConnectorTasksV1Request req = ListConnectorTasksV1Request.builder()
                .connector(Connector.BANKING_CIRCLE)
                .connectorId("XXX")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .build();

        ListConnectorTasksV1Response res = sdk.payments().v1().listConnectorTasksV1()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TasksCursor.builder()
            .cursor(TasksCursorCursor.builder()
                .data(List.of(
                    TasksCursorData.of(TaskWise.builder()
                        .connectorID("<id>")
                        .createdAt(OffsetDateTime.parse("2024-08-30T08:25:15.703Z"))
                        .descriptor(TaskWiseDescriptor.builder()
                            .build())
                        .id("119bf1d7-7f0d-47a9-85f6-d1de55906fa5")
                        .status(TaskStatus.STOPPED)
                        .updatedAt(OffsetDateTime.parse("2023-03-08T11:32:23.574Z"))
                        .build()),
                    TasksCursorData.of(TaskWise.builder()
                        .connectorID("<id>")
                        .createdAt(OffsetDateTime.parse("2024-12-26T08:45:38.166Z"))
                        .descriptor(TaskWiseDescriptor.builder()
                            .build())
                        .id("636e772b-1d53-4e6e-b1a0-f8d94fbd4d08")
                        .status(TaskStatus.PENDING)
                        .updatedAt(OffsetDateTime.parse("2025-04-25T04:53:52.895Z"))
                        .build()),
                    TasksCursorData.of(TaskWise.builder()
                        .connectorID("<id>")
                        .createdAt(OffsetDateTime.parse("2025-04-15T21:11:42.740Z"))
                        .descriptor(TaskWiseDescriptor.builder()
                            .build())
                        .id("3d5edc7f-3fcd-42b1-a430-91094b0590aa")
                        .status(TaskStatus.STOPPED)
                        .updatedAt(OffsetDateTime.parse("2023-02-23T06:58:36.788Z"))
                        .build())))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.tasksCursor().get());
    }

    @Test
    public void testSDKPaymentsV1_ListPayments() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listPayments");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListPaymentsRequest req = ListPaymentsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .sort(List.of(
                    "date:asc",
                    "status:desc"))
                .build();

        ListPaymentsResponse res = sdk.payments().v1().listPayments()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PaymentsCursor.builder()
            .cursor(PaymentsCursorCursor.builder()
                .data(List.of(
                ))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.paymentsCursor().get());
    }

    @Test
    public void testSDKPaymentsV1_ListPools() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listPools");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListPoolsRequest req = ListPoolsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .sort(List.of(
                    "date:asc",
                    "status:desc"))
                .build();

        ListPoolsResponse res = sdk.payments().v1().listPools()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PoolsCursor.builder()
            .cursor(PoolsCursorCursor.builder()
                .data(List.of(
                    Pool.builder()
                        .accounts(List.of(
                            "<value>",
                            "<value>"))
                        .id("<id>")
                        .name("<value>")
                        .build(),
                    Pool.builder()
                        .accounts(List.of(
                            "<value>"))
                        .id("<id>")
                        .name("<value>")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.poolsCursor().get());
    }

    @Test
    public void testSDKPaymentsV1_ListTransferInitiations() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listTransferInitiations");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListTransferInitiationsRequest req = ListTransferInitiationsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .sort(List.of(
                    "date:asc",
                    "status:desc"))
                .build();

        ListTransferInitiationsResponse res = sdk.payments().v1().listTransferInitiations()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TransferInitiationsCursor.builder()
            .cursor(TransferInitiationsCursorCursor.builder()
                .data(List.of(
                    TransferInitiation.builder()
                        .amount(new BigInteger("27378"))
                        .asset("USD")
                        .connectorID("<id>")
                        .createdAt(OffsetDateTime.parse("2024-04-12T17:55:51.446Z"))
                        .description("shovel aw scrutinise delicious a machine provided thongs eek pfft")
                        .destinationAccountID("<id>")
                        .error("<value>")
                        .id("XXX")
                        .initialAmount(new BigInteger("955636"))
                        .reference("<value>")
                        .scheduledAt(OffsetDateTime.parse("2025-12-22T21:51:13.393Z"))
                        .sourceAccountID("<id>")
                        .status(TransferInitiationStatus.ASK_REVERSED)
                        .type(TransferInitiationType.TRANSFER)
                        .build(),
                    TransferInitiation.builder()
                        .amount(new BigInteger("99452"))
                        .asset("USD")
                        .connectorID("<id>")
                        .createdAt(OffsetDateTime.parse("2024-05-14T08:21:14.101Z"))
                        .description("vice programme downchange lucky")
                        .destinationAccountID("<id>")
                        .error("<value>")
                        .id("XXX")
                        .initialAmount(new BigInteger("418039"))
                        .reference("<value>")
                        .scheduledAt(OffsetDateTime.parse("2024-05-12T21:20:56.584Z"))
                        .sourceAccountID("<id>")
                        .status(TransferInitiationStatus.PROCESSED)
                        .type(TransferInitiationType.TRANSFER)
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.transferInitiationsCursor().get());
    }

    @Test
    public void testSDKPaymentsV1_PaymentsgetAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("paymentsgetAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        PaymentsgetAccountRequest req = PaymentsgetAccountRequest.builder()
                .accountId("XXX")
                .build();

        PaymentsgetAccountResponse res = sdk.payments().v1().paymentsgetAccount()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            PaymentsAccountResponse.builder()
            .data(PaymentsAccount.builder()
                .accountName("<value>")
                .connectorID("<id>")
                .createdAt(OffsetDateTime.parse("2024-11-12T03:25:46.461Z"))
                .defaultAsset("<value>")
                .defaultCurrency("<value>")
                .id("<id>")
                .metadata(Map.ofEntries(
                    Map.entry("key", "<value>"),
                    Map.entry("key1", "<value>")))
                .raw(PaymentsAccountRaw.builder()
                    .build())
                .reference("<value>")
                .type(AccountType.UNKNOWN)
                .build())
            .build(),
            res.paymentsAccountResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_PaymentsgetServerInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("paymentsgetServerInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        PaymentsgetServerInfoResponse res = sdk.payments().v1().paymentsgetServerInfo()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ServerInfo.builder()
            .version("<value>")
            .build(),
            res.serverInfo().get());
    }

    @Test
    public void testSDKPaymentsV1_PaymentslistAccounts() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("paymentslistAccounts");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        PaymentslistAccountsRequest req = PaymentslistAccountsRequest.builder()
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .sort(List.of(
                    "date:asc",
                    "status:desc"))
                .build();

        PaymentslistAccountsResponse res = sdk.payments().v1().paymentslistAccounts()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            AccountsCursor.builder()
            .cursor(Cursor.builder()
                .data(List.of(
                ))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.accountsCursor().get());
    }

    @Test
    public void testSDKPaymentsV1_ReadConnectorConfig() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("readConnectorConfig");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ReadConnectorConfigRequest req = ReadConnectorConfigRequest.builder()
                .connector(Connector.GENERIC)
                .build();

        ReadConnectorConfigResponse res = sdk.payments().v1().readConnectorConfig()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ConnectorConfigResponse.builder()
            .data(ConnectorConfig.of(AtlarConfig.builder()
                .accessKey("XXX")
                .name("My Atlar Account")
                .secret("XXX")
                .baseUrl("https://api.example.com")
                .pageSize(50L)
                .pollingPeriod("60s")
                .transferInitiationStatusPollingPeriod("60s")
                .build()))
            .build(),
            res.connectorConfigResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_ReadConnectorConfigV1() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("readConnectorConfigV1");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ReadConnectorConfigV1Request req = ReadConnectorConfigV1Request.builder()
                .connector(Connector.CURRENCY_CLOUD)
                .connectorId("XXX")
                .build();

        ReadConnectorConfigV1Response res = sdk.payments().v1().readConnectorConfigV1()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ConnectorConfigResponse.builder()
            .data(ConnectorConfig.of(ModulrConfig.builder()
                .apiKey("XXX")
                .apiSecret("XXX")
                .name("My Modulr Account")
                .endpoint("XXX")
                .pollingPeriod("120s")
                .build()))
            .build(),
            res.connectorConfigResponse().get());
    }

    @Test
    public void testSDKPaymentsV1_RemoveAccountFromPool() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("removeAccountFromPool");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        RemoveAccountFromPoolRequest req = RemoveAccountFromPoolRequest.builder()
                .accountId("XXX")
                .poolId("XXX")
                .build();

        RemoveAccountFromPoolResponse res = sdk.payments().v1().removeAccountFromPool()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_ResetConnector() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("resetConnector");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ResetConnectorRequest req = ResetConnectorRequest.builder()
                .connector(Connector.ATLAR)
                .build();

        ResetConnectorResponse res = sdk.payments().v1().resetConnector()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_ResetConnectorV1() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("resetConnectorV1");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ResetConnectorV1Request req = ResetConnectorV1Request.builder()
                .connector(Connector.GENERIC)
                .connectorId("XXX")
                .build();

        ResetConnectorV1Response res = sdk.payments().v1().resetConnectorV1()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_RetryTransferInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("retryTransferInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        RetryTransferInitiationRequest req = RetryTransferInitiationRequest.builder()
                .transferId("XXX")
                .build();

        RetryTransferInitiationResponse res = sdk.payments().v1().retryTransferInitiation()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_ReverseTransferInitiation() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("reverseTransferInitiation");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ReverseTransferInitiationRequest req = ReverseTransferInitiationRequest.builder()
                .reverseTransferInitiationRequest(com.formance.formance_sdk.models.shared.ReverseTransferInitiationRequest.builder()
                    .amount(new BigInteger("327549"))
                    .asset("USD")
                    .description("till gosh how proselytise worriedly whoa")
                    .metadata(Map.ofEntries(
                        Map.entry("key", "<value>")))
                    .reference("XXX")
                    .build())
                .transferId("XXX")
                .build();

        ReverseTransferInitiationResponse res = sdk.payments().v1().reverseTransferInitiation()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_UdpateTransferInitiationStatus() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("udpateTransferInitiationStatus");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        UdpateTransferInitiationStatusRequest req = UdpateTransferInitiationStatusRequest.builder()
                .updateTransferInitiationStatusRequest(UpdateTransferInitiationStatusRequest.builder()
                    .status(Status.VALIDATED)
                    .build())
                .transferId("XXX")
                .build();

        UdpateTransferInitiationStatusResponse res = sdk.payments().v1().udpateTransferInitiationStatus()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_UninstallConnector() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("uninstallConnector");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        UninstallConnectorRequest req = UninstallConnectorRequest.builder()
                .connector(Connector.MODULR)
                .build();

        UninstallConnectorResponse res = sdk.payments().v1().uninstallConnector()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_UninstallConnectorV1() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("uninstallConnectorV1");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        UninstallConnectorV1Request req = UninstallConnectorV1Request.builder()
                .connector(Connector.GENERIC)
                .connectorId("XXX")
                .build();

        UninstallConnectorV1Response res = sdk.payments().v1().uninstallConnectorV1()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_UpdateBankAccountMetadata() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("updateBankAccountMetadata");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        UpdateBankAccountMetadataRequest req = UpdateBankAccountMetadataRequest.builder()
                .updateBankAccountMetadataRequest(com.formance.formance_sdk.models.shared.UpdateBankAccountMetadataRequest.builder()
                    .metadata(Map.ofEntries(
                        Map.entry("key", "<value>")))
                    .build())
                .bankAccountId("XXX")
                .build();

        UpdateBankAccountMetadataResponse res = sdk.payments().v1().updateBankAccountMetadata()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_UpdateConnectorConfigV1() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("updateConnectorConfigV1");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        UpdateConnectorConfigV1Request req = UpdateConnectorConfigV1Request.builder()
                .connectorConfig(ConnectorConfig.of(StripeConfig.builder()
                    .apiKey("XXX")
                    .name("My Stripe Account")
                    .build()))
                .connector(Connector.ADYEN)
                .connectorId("XXX")
                .build();

        UpdateConnectorConfigV1Response res = sdk.payments().v1().updateConnectorConfigV1()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKPaymentsV1_UpdateMetadata() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("updateMetadata");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        UpdateMetadataRequest req = UpdateMetadataRequest.builder()
                .requestBody(Map.ofEntries(
                    Map.entry("key", "<value>"),
                    Map.entry("key1", "<value>")))
                .paymentId("XXX")
                .build();

        UpdateMetadataResponse res = sdk.payments().v1().updateMetadata()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }
}