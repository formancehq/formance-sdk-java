/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.formance.formance_sdk.models.operations.ActivateConfigRequest;
import com.formance.formance_sdk.models.operations.ActivateConfigResponse;
import com.formance.formance_sdk.models.operations.ChangeConfigSecretRequest;
import com.formance.formance_sdk.models.operations.ChangeConfigSecretResponse;
import com.formance.formance_sdk.models.operations.DeactivateConfigRequest;
import com.formance.formance_sdk.models.operations.DeactivateConfigResponse;
import com.formance.formance_sdk.models.operations.DeleteConfigRequest;
import com.formance.formance_sdk.models.operations.DeleteConfigResponse;
import com.formance.formance_sdk.models.operations.GetManyConfigsRequest;
import com.formance.formance_sdk.models.operations.GetManyConfigsResponse;
import com.formance.formance_sdk.models.operations.InsertConfigResponse;
import com.formance.formance_sdk.models.operations.TestConfigRequest;
import com.formance.formance_sdk.models.operations.TestConfigResponse;
import com.formance.formance_sdk.models.operations.UpdateConfigRequest;
import com.formance.formance_sdk.models.operations.UpdateConfigResponse;
import com.formance.formance_sdk.models.shared.Attempt;
import com.formance.formance_sdk.models.shared.AttemptResponse;
import com.formance.formance_sdk.models.shared.ConfigChangeSecret;
import com.formance.formance_sdk.models.shared.ConfigResponse;
import com.formance.formance_sdk.models.shared.ConfigUser;
import com.formance.formance_sdk.models.shared.ConfigsResponse;
import com.formance.formance_sdk.models.shared.ConfigsResponseCursor;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.WebhooksConfig;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.time.OffsetDateTime;
import java.util.List;
import org.junit.jupiter.api.Test;

public class SDKWebhooksV1Tests {

    @Test
    public void testSDKWebhooksV1_ActivateConfig() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("activateConfig");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ActivateConfigRequest req = ActivateConfigRequest.builder()
                .id("4997257d-dfb6-445b-929c-cbe2ab182818")
                .build();

        ActivateConfigResponse res = sdk.webhooks().v1().activateConfig()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ConfigResponse.builder()
            .data(WebhooksConfig.builder()
                .active(true)
                .createdAt(OffsetDateTime.parse("2025-04-13T00:54:15.165Z"))
                .endpoint("https://example.com")
                .eventTypes(List.of(
                    "TYPE1"))
                .id("614a5830-bda0-4680-b1ea-6090dd8532c6")
                .secret("V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3")
                .updatedAt(OffsetDateTime.parse("2023-07-24T14:37:40.680Z"))
                .build())
            .build(),
            res.configResponse().get());
    }

    @Test
    public void testSDKWebhooksV1_ChangeConfigSecret() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("changeConfigSecret");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ChangeConfigSecretRequest req = ChangeConfigSecretRequest.builder()
                .id("4997257d-dfb6-445b-929c-cbe2ab182818")
                .configChangeSecret(ConfigChangeSecret.builder()
                    .secret("V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3")
                    .build())
                .build();

        ChangeConfigSecretResponse res = sdk.webhooks().v1().changeConfigSecret()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ConfigResponse.builder()
            .data(WebhooksConfig.builder()
                .active(true)
                .createdAt(OffsetDateTime.parse("2023-12-07T06:10:53.379Z"))
                .endpoint("https://example.com")
                .eventTypes(List.of(
                    "TYPE1"))
                .id("8470f220-7a70-4ef7-9be4-3432827b4f03")
                .secret("V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3")
                .updatedAt(OffsetDateTime.parse("2023-11-27T20:14:58.331Z"))
                .build())
            .build(),
            res.configResponse().get());
    }

    @Test
    public void testSDKWebhooksV1_DeactivateConfig() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("deactivateConfig");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        DeactivateConfigRequest req = DeactivateConfigRequest.builder()
                .id("4997257d-dfb6-445b-929c-cbe2ab182818")
                .build();

        DeactivateConfigResponse res = sdk.webhooks().v1().deactivateConfig()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ConfigResponse.builder()
            .data(WebhooksConfig.builder()
                .active(true)
                .createdAt(OffsetDateTime.parse("2023-11-29T11:20:57.032Z"))
                .endpoint("https://example.com")
                .eventTypes(List.of(
                    "TYPE1"))
                .id("85e5b25b-022b-4bd7-8c33-fbf5950d0f8f")
                .secret("V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3")
                .updatedAt(OffsetDateTime.parse("2024-05-26T16:43:50.510Z"))
                .build())
            .build(),
            res.configResponse().get());
    }

    @Test
    public void testSDKWebhooksV1_DeleteConfig() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("deleteConfig");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        DeleteConfigRequest req = DeleteConfigRequest.builder()
                .id("4997257d-dfb6-445b-929c-cbe2ab182818")
                .build();

        DeleteConfigResponse res = sdk.webhooks().v1().deleteConfig()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testSDKWebhooksV1_GetManyConfigs() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getManyConfigs");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetManyConfigsRequest req = GetManyConfigsRequest.builder()
                .endpoint("https://example.com")
                .id("4997257d-dfb6-445b-929c-cbe2ab182818")
                .build();

        GetManyConfigsResponse res = sdk.webhooks().v1().getManyConfigs()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ConfigsResponse.builder()
            .cursor(ConfigsResponseCursor.builder()
                .data(List.of(
                    WebhooksConfig.builder()
                        .active(true)
                        .createdAt(OffsetDateTime.parse("2023-10-03T21:24:00.401Z"))
                        .endpoint("https://example.com")
                        .eventTypes(List.of(
                            "TYPE1"))
                        .id("f1f67d72-d5d3-4e22-8f79-851fcbdc0d83")
                        .secret("V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3")
                        .updatedAt(OffsetDateTime.parse("2023-02-14T18:49:51.264Z"))
                        .build()))
                .hasMore(false)
                .build())
            .build(),
            res.configsResponse().get());
    }

    @Test
    public void testSDKWebhooksV1_InsertConfig() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("insertConfig");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ConfigUser req = ConfigUser.builder()
                .endpoint("https://example.com")
                .eventTypes(List.of(
                    "TYPE1"))
                .name("customer_payment")
                .secret("V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3")
                .build();

        InsertConfigResponse res = sdk.webhooks().v1().insertConfig()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ConfigResponse.builder()
            .data(WebhooksConfig.builder()
                .active(true)
                .createdAt(OffsetDateTime.parse("2025-08-30T14:01:19.887Z"))
                .endpoint("https://example.com")
                .eventTypes(List.of(
                    "TYPE1"))
                .id("0f756b09-5b38-465b-b8f2-983f240d4f5c")
                .secret("V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3")
                .updatedAt(OffsetDateTime.parse("2024-08-09T10:29:51.537Z"))
                .build())
            .build(),
            res.configResponse().get());
    }

    @Test
    public void testSDKWebhooksV1_TestConfig() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("testConfig");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        TestConfigRequest req = TestConfigRequest.builder()
                .id("4997257d-dfb6-445b-929c-cbe2ab182818")
                .build();

        TestConfigResponse res = sdk.webhooks().v1().testConfig()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            AttemptResponse.builder()
            .data(Attempt.builder()
                .config(WebhooksConfig.builder()
                    .active(true)
                    .createdAt(OffsetDateTime.parse("2024-05-29T09:53:58.891Z"))
                    .endpoint("https://example.com")
                    .eventTypes(List.of(
                        "TYPE1"))
                    .id("86054b6d-7f7e-4fb8-8f2f-b6a855cea0c7")
                    .secret("V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3")
                    .updatedAt(OffsetDateTime.parse("2023-04-25T07:02:46.380Z"))
                    .build())
                .createdAt(OffsetDateTime.parse("2025-06-16T21:37:32.643Z"))
                .id("c7827ed3-469f-4c48-a7d1-c853b7f1271e")
                .payload("{\"data\":\"test\"}")
                .retryAttempt(1L)
                .status("success")
                .statusCode(200L)
                .updatedAt(OffsetDateTime.parse("2024-10-18T10:47:20.940Z"))
                .webhookID("05f47970-be91-4384-9266-38e01d5768d6")
                .build())
            .build(),
            res.attemptResponse().get());
    }

    @Test
    public void testSDKWebhooksV1_UpdateConfig() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("updateConfig");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        UpdateConfigRequest req = UpdateConfigRequest.builder()
                .configUser(ConfigUser.builder()
                    .endpoint("https://example.com")
                    .eventTypes(List.of(
                        "TYPE1"))
                    .name("customer_payment")
                    .secret("V0bivxRWveaoz08afqjU6Ko/jwO0Cb+3")
                    .build())
                .id("4997257d-dfb6-445b-929c-cbe2ab182818")
                .build();

        UpdateConfigResponse res = sdk.webhooks().v1().updateConfig()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }
}