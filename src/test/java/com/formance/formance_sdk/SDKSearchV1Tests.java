/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.formance.formance_sdk.models.operations.SearchResponse;
import com.formance.formance_sdk.models.operations.SearchgetServerInfoResponse;
import com.formance.formance_sdk.models.shared.Query;
import com.formance.formance_sdk.models.shared.Response;
import com.formance.formance_sdk.models.shared.ResponseCursor;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.ServerInfo;
import com.formance.formance_sdk.models.shared.Total;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.util.List;
import org.junit.jupiter.api.Test;

public class SDKSearchV1Tests {

    @Test
    public void testSDKSearchV1_Search() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("search");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        Query req = Query.builder()
                .after(List.of(
                    "users:002"))
                .cursor("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .ledgers(List.of(
                    "quickstart"))
                .policy("OR")
                .sort("id:asc")
                .terms(List.of(
                    "destination=central_bank1"))
                .build();

        SearchResponse res = sdk.search().v1().search()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            Response.builder()
            .cursor(ResponseCursor.builder()
                .next("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .total(Total.builder()
                    .relation("eq")
                    .value(1L)
                    .build())
                .build())
            .build(),
            res.response().get());
    }

    @Test
    public void testSDKSearchV1_SearchgetServerInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("searchgetServerInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        SearchgetServerInfoResponse res = sdk.search().v1().searchgetServerInfo()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ServerInfo.builder()
            .version("<value>")
            .build(),
            res.serverInfo().get());
    }
}