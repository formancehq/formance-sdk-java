/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.formance.formance_sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.formance.formance_sdk.models.operations.AddMetadataOnTransactionRequest;
import com.formance.formance_sdk.models.operations.AddMetadataOnTransactionResponse;
import com.formance.formance_sdk.models.operations.CountAccountsRequest;
import com.formance.formance_sdk.models.operations.CountAccountsResponse;
import com.formance.formance_sdk.models.operations.CountTransactionsRequest;
import com.formance.formance_sdk.models.operations.CountTransactionsResponse;
import com.formance.formance_sdk.models.operations.CreateTransactionRequest;
import com.formance.formance_sdk.models.operations.CreateTransactionResponse;
import com.formance.formance_sdk.models.operations.CreateTransactionsRequest;
import com.formance.formance_sdk.models.operations.CreateTransactionsResponse;
import com.formance.formance_sdk.models.operations.GetAccountRequest;
import com.formance.formance_sdk.models.operations.GetAccountResponse;
import com.formance.formance_sdk.models.operations.GetBalancesAggregatedRequest;
import com.formance.formance_sdk.models.operations.GetBalancesAggregatedResponse;
import com.formance.formance_sdk.models.operations.GetBalancesRequest;
import com.formance.formance_sdk.models.operations.GetBalancesResponse;
import com.formance.formance_sdk.models.operations.GetInfoResponse;
import com.formance.formance_sdk.models.operations.GetLedgerInfoRequest;
import com.formance.formance_sdk.models.operations.GetLedgerInfoResponse;
import com.formance.formance_sdk.models.operations.GetMappingRequest;
import com.formance.formance_sdk.models.operations.GetMappingResponse;
import com.formance.formance_sdk.models.operations.GetTransactionRequest;
import com.formance.formance_sdk.models.operations.GetTransactionResponse;
import com.formance.formance_sdk.models.operations.ListAccountsRequest;
import com.formance.formance_sdk.models.operations.ListAccountsResponse;
import com.formance.formance_sdk.models.operations.ListLogsRequest;
import com.formance.formance_sdk.models.operations.ListLogsResponse;
import com.formance.formance_sdk.models.operations.ListTransactionsRequest;
import com.formance.formance_sdk.models.operations.ListTransactionsResponse;
import com.formance.formance_sdk.models.operations.Metadata;
import com.formance.formance_sdk.models.operations.ReadStatsRequest;
import com.formance.formance_sdk.models.operations.ReadStatsResponse;
import com.formance.formance_sdk.models.operations.RevertTransactionRequest;
import com.formance.formance_sdk.models.operations.RevertTransactionResponse;
import com.formance.formance_sdk.models.operations.RunScriptRequest;
import com.formance.formance_sdk.models.operations.RunScriptResponse;
import com.formance.formance_sdk.models.operations.UpdateMappingRequest;
import com.formance.formance_sdk.models.operations.UpdateMappingResponse;
import com.formance.formance_sdk.models.shared.Account;
import com.formance.formance_sdk.models.shared.AccountResponse;
import com.formance.formance_sdk.models.shared.AccountWithVolumesAndBalances;
import com.formance.formance_sdk.models.shared.AccountsCursorResponse;
import com.formance.formance_sdk.models.shared.AccountsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.AggregateBalancesResponse;
import com.formance.formance_sdk.models.shared.BalancesCursorResponse;
import com.formance.formance_sdk.models.shared.BalancesCursorResponseCursor;
import com.formance.formance_sdk.models.shared.Config;
import com.formance.formance_sdk.models.shared.ConfigInfo;
import com.formance.formance_sdk.models.shared.ConfigInfoResponse;
import com.formance.formance_sdk.models.shared.Contract;
import com.formance.formance_sdk.models.shared.ErrorsEnum;
import com.formance.formance_sdk.models.shared.Expr;
import com.formance.formance_sdk.models.shared.LedgerInfo;
import com.formance.formance_sdk.models.shared.LedgerInfoResponse;
import com.formance.formance_sdk.models.shared.LedgerStorage;
import com.formance.formance_sdk.models.shared.Log;
import com.formance.formance_sdk.models.shared.LogsCursorResponse;
import com.formance.formance_sdk.models.shared.LogsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.Mapping;
import com.formance.formance_sdk.models.shared.MappingResponse;
import com.formance.formance_sdk.models.shared.MigrationInfo;
import com.formance.formance_sdk.models.shared.PostTransaction;
import com.formance.formance_sdk.models.shared.PostTransactionScript;
import com.formance.formance_sdk.models.shared.Posting;
import com.formance.formance_sdk.models.shared.Script;
import com.formance.formance_sdk.models.shared.ScriptResponse;
import com.formance.formance_sdk.models.shared.Security;
import com.formance.formance_sdk.models.shared.Stats;
import com.formance.formance_sdk.models.shared.StatsResponse;
import com.formance.formance_sdk.models.shared.Storage;
import com.formance.formance_sdk.models.shared.Transaction;
import com.formance.formance_sdk.models.shared.TransactionData;
import com.formance.formance_sdk.models.shared.TransactionResponse;
import com.formance.formance_sdk.models.shared.Transactions;
import com.formance.formance_sdk.models.shared.TransactionsCursorResponse;
import com.formance.formance_sdk.models.shared.TransactionsCursorResponseCursor;
import com.formance.formance_sdk.models.shared.TransactionsResponse;
import com.formance.formance_sdk.models.shared.Type;
import com.formance.formance_sdk.models.shared.Volume;
import com.formance.formance_sdk.utils.Utils;
import java.lang.Exception;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.Test;

public class SDKV1Tests {

    @Test
    public void testSDKV1_CreateTransactions() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("CreateTransactions");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        CreateTransactionsRequest req = CreateTransactionsRequest.builder()
                .transactions(Transactions.builder()
                    .transactions(List.of(
                        TransactionData.builder()
                            .postings(List.of(
                                Posting.builder()
                                    .amount(new BigInteger("100"))
                                    .asset("COIN")
                                    .destination("users:002")
                                    .source("users:001")
                                    .build(),
                                Posting.builder()
                                    .amount(new BigInteger("100"))
                                    .asset("COIN")
                                    .destination("users:002")
                                    .source("users:001")
                                    .build(),
                                Posting.builder()
                                    .amount(new BigInteger("100"))
                                    .asset("COIN")
                                    .destination("users:002")
                                    .source("users:001")
                                    .build()))
                            .reference("ref:001")
                            .build()))
                    .build())
                .ledger("ledger001")
                .build();

        CreateTransactionsResponse res = sdk.ledger().v1().createTransactions()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TransactionsResponse.builder()
            .data(List.of(
                Transaction.builder()
                    .postings(List.of(
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build(),
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build()))
                    .timestamp(OffsetDateTime.parse("2024-03-05T12:58:17.302Z"))
                    .txid(new BigInteger("969224"))
                    .postCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .preCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .reference("ref:001")
                    .build(),
                Transaction.builder()
                    .postings(List.of(
                    ))
                    .timestamp(OffsetDateTime.parse("2023-01-13T12:20:33.284Z"))
                    .txid(new BigInteger("808159"))
                    .postCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .preCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .reference("ref:001")
                    .build(),
                Transaction.builder()
                    .postings(List.of(
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build(),
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build()))
                    .timestamp(OffsetDateTime.parse("2025-12-27T01:08:16.828Z"))
                    .txid(new BigInteger("117566"))
                    .postCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .preCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .reference("ref:001")
                    .build()))
            .build(),
            res.transactionsResponse().get());
    }

    @Test
    public void testSDKV1_AddMetadataOnTransaction() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("addMetadataOnTransaction");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        AddMetadataOnTransactionRequest req = AddMetadataOnTransactionRequest.builder()
                .requestBody(Map.ofEntries(
                    Map.entry("key", "<value>")))
                .ledger("ledger001")
                .txid(new BigInteger("1234"))
                .build();

        AddMetadataOnTransactionResponse res = sdk.ledger().v1().addMetadataOnTransaction()
                .request(req)
                .call();
        assertEquals(204, res.statusCode());
    }

    @Test
    public void testSDKV1_AddMetadataToAccount() throws Exception {
        Assumptions.assumeTrue(false, "incomplete test found please make sure to address the following errors: [`workflow step addMetadataToAccount.test referencing operation addMetadataToAccount is missing required request body`]");
    }

    @Test
    public void testSDKV1_CountAccounts() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("countAccounts");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        CountAccountsRequest req = CountAccountsRequest.builder()
                .ledger("ledger001")
                .address("users:.+")
                .metadata(Map.ofEntries(
                    Map.entry("0", "m"),
                    Map.entry("1", "e"),
                    Map.entry("2", "t"),
                    Map.entry("3", "a"),
                    Map.entry("4", "d"),
                    Map.entry("5", "a"),
                    Map.entry("6", "t"),
                    Map.entry("7", "a"),
                    Map.entry("8", "["),
                    Map.entry("9", "k"),
                    Map.entry("10", "e"),
                    Map.entry("11", "y"),
                    Map.entry("12", "]"),
                    Map.entry("13", "="),
                    Map.entry("14", "v"),
                    Map.entry("15", "a"),
                    Map.entry("16", "l"),
                    Map.entry("17", "u"),
                    Map.entry("18", "e"),
                    Map.entry("19", "1"),
                    Map.entry("20", "&"),
                    Map.entry("21", "m"),
                    Map.entry("22", "e"),
                    Map.entry("23", "t"),
                    Map.entry("24", "a"),
                    Map.entry("25", "d"),
                    Map.entry("26", "a"),
                    Map.entry("27", "t"),
                    Map.entry("28", "a"),
                    Map.entry("29", "["),
                    Map.entry("30", "a"),
                    Map.entry("31", "."),
                    Map.entry("32", "n"),
                    Map.entry("33", "e"),
                    Map.entry("34", "s"),
                    Map.entry("35", "t"),
                    Map.entry("36", "e"),
                    Map.entry("37", "d"),
                    Map.entry("38", "."),
                    Map.entry("39", "k"),
                    Map.entry("40", "e"),
                    Map.entry("41", "y"),
                    Map.entry("42", "]"),
                    Map.entry("43", "="),
                    Map.entry("44", "v"),
                    Map.entry("45", "a"),
                    Map.entry("46", "l"),
                    Map.entry("47", "u"),
                    Map.entry("48", "e"),
                    Map.entry("49", "2")))
                .build();

        CountAccountsResponse res = sdk.ledger().v1().countAccounts()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testSDKV1_CountTransactions() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("countTransactions");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        CountTransactionsRequest req = CountTransactionsRequest.builder()
                .ledger("ledger001")
                .account("users:001")
                .destination("users:001")
                .metadata(Metadata.builder()
                    .build())
                .reference("ref:001")
                .source("users:001")
                .build();

        CountTransactionsResponse res = sdk.ledger().v1().countTransactions()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
    }

    @Test
    public void testSDKV1_CreateTransaction() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("createTransaction");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        CreateTransactionRequest req = CreateTransactionRequest.builder()
                .postTransaction(PostTransaction.builder()
                    .postings(List.of(
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build(),
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build(),
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build()))
                    .reference("ref:001")
                    .script(PostTransactionScript.builder()
                        .plain("vars {\naccount $user\n}\nsend [COIN 10] (\n	source = @world\n	destination = $user\n)\n")
                        .vars(Map.ofEntries(
                            Map.entry("user", "users:042")))
                        .build())
                    .build())
                .ledger("ledger001")
                .preview(true)
                .build();

        CreateTransactionResponse res = sdk.ledger().v1().createTransaction()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TransactionsResponse.builder()
            .data(List.of(
                Transaction.builder()
                    .postings(List.of(
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build()))
                    .timestamp(OffsetDateTime.parse("2025-10-22T08:35:30.999Z"))
                    .txid(new BigInteger("339139"))
                    .postCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .preCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .reference("ref:001")
                    .build(),
                Transaction.builder()
                    .postings(List.of(
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build(),
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build(),
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build()))
                    .timestamp(OffsetDateTime.parse("2023-04-14T18:14:42.519Z"))
                    .txid(new BigInteger("159068"))
                    .postCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .preCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .reference("ref:001")
                    .build(),
                Transaction.builder()
                    .postings(List.of(
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build(),
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build(),
                        Posting.builder()
                            .amount(new BigInteger("100"))
                            .asset("COIN")
                            .destination("users:002")
                            .source("users:001")
                            .build()))
                    .timestamp(OffsetDateTime.parse("2025-12-15T14:36:30.627Z"))
                    .txid(new BigInteger("992364"))
                    .postCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .preCommitVolumes(Map.ofEntries(
                        Map.entry("orders:1", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()))),
                        Map.entry("orders:2", Map.ofEntries(
                            Map.entry("USD", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build()),
                            Map.entry("EUR", Volume.builder()
                                .input(new BigInteger("100"))
                                .output(new BigInteger("20"))
                                .balance(new BigInteger("80"))
                                .build())))))
                    .reference("ref:001")
                    .build()))
            .build(),
            res.transactionsResponse().get());
    }

    @Test
    public void testSDKV1_GetAccount() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getAccount");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetAccountRequest req = GetAccountRequest.builder()
                .address("users:001")
                .ledger("ledger001")
                .build();

        GetAccountResponse res = sdk.ledger().v1().getAccount()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            AccountResponse.builder()
            .data(AccountWithVolumesAndBalances.builder()
                .address("users:001")
                .balances(Map.ofEntries(
                    Map.entry("COIN", new BigInteger("100"))))
                .metadata(Map.ofEntries(
                    Map.entry("admin", true),
                    Map.entry("a", Map.ofEntries(
                        Map.entry("nested", Map.ofEntries(
                            Map.entry("key", "value")))))))
                .type("virtual")
                .volumes(Map.ofEntries(
                    Map.entry("USD", Volume.builder()
                        .input(new BigInteger("100"))
                        .output(new BigInteger("20"))
                        .balance(new BigInteger("80"))
                        .build()),
                    Map.entry("EUR", Volume.builder()
                        .input(new BigInteger("100"))
                        .output(new BigInteger("20"))
                        .balance(new BigInteger("80"))
                        .build())))
                .build())
            .build(),
            res.accountResponse().get());
    }

    @Test
    public void testSDKV1_GetBalances() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getBalances");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetBalancesRequest req = GetBalancesRequest.builder()
                .ledger("ledger001")
                .address("users:001")
                .after("users:003")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .build();

        GetBalancesResponse res = sdk.ledger().v1().getBalances()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            BalancesCursorResponse.builder()
            .cursor(BalancesCursorResponseCursor.builder()
                .data(List.of(
                    Map.ofEntries(
                        Map.entry("account1", Map.ofEntries(
                            Map.entry("USD", 100L),
                            Map.entry("EUR", 23L))),
                        Map.entry("account2", Map.ofEntries(
                            Map.entry("CAD", 20L),
                            Map.entry("JPY", 21L))))))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.balancesCursorResponse().get());
    }

    @Test
    public void testSDKV1_GetBalancesAggregated() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getBalancesAggregated");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetBalancesAggregatedRequest req = GetBalancesAggregatedRequest.builder()
                .ledger("ledger001")
                .address("users:001")
                .build();

        GetBalancesAggregatedResponse res = sdk.ledger().v1().getBalancesAggregated()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            AggregateBalancesResponse.builder()
            .data(Map.ofEntries(
                Map.entry("USD", 100L),
                Map.entry("EUR", 12L)))
            .build(),
            res.aggregateBalancesResponse().get());
    }

    @Test
    public void testSDKV1_GetInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetInfoResponse res = sdk.ledger().v1().getInfo()
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ConfigInfoResponse.builder()
            .data(ConfigInfo.builder()
                .config(Config.builder()
                    .storage(LedgerStorage.builder()
                        .driver("<value>")
                        .ledgers(List.of(
                            "<value>",
                            "<value>"))
                        .build())
                    .build())
                .server("<value>")
                .version("<value>")
                .build())
            .build(),
            res.configInfoResponse().get());
    }

    @Test
    public void testSDKV1_GetLedgerInfo() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getLedgerInfo");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetLedgerInfoRequest req = GetLedgerInfoRequest.builder()
                .ledger("ledger001")
                .build();

        GetLedgerInfoResponse res = sdk.ledger().v1().getLedgerInfo()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            LedgerInfoResponse.builder()
            .data(LedgerInfo.builder()
                .name("ledger001")
                .storage(Storage.builder()
                    .migrations(List.of(
                        MigrationInfo.builder()
                            .name("migrations:001")
                            .version("11")
                            .build()))
                    .build())
                .build())
            .build(),
            res.ledgerInfoResponse().get());
    }

    @Test
    public void testSDKV1_GetMapping() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getMapping");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetMappingRequest req = GetMappingRequest.builder()
                .ledger("ledger001")
                .build();

        GetMappingResponse res = sdk.ledger().v1().getMapping()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            MappingResponse.builder()
            .data(Mapping.builder()
                .contracts(List.of(
                ))
                .build())
            .build(),
            res.mappingResponse().get());
    }

    @Test
    public void testSDKV1_GetTransaction() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("getTransaction");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        GetTransactionRequest req = GetTransactionRequest.builder()
                .ledger("ledger001")
                .txid(new BigInteger("1234"))
                .build();

        GetTransactionResponse res = sdk.ledger().v1().getTransaction()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TransactionResponse.builder()
            .data(Transaction.builder()
                .postings(List.of(
                    Posting.builder()
                        .amount(new BigInteger("100"))
                        .asset("COIN")
                        .destination("users:002")
                        .source("users:001")
                        .build()))
                .timestamp(OffsetDateTime.parse("2024-01-23T03:49:23.782Z"))
                .txid(new BigInteger("921043"))
                .postCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .preCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .reference("ref:001")
                .build())
            .build(),
            res.transactionResponse().get());
    }

    @Test
    public void testSDKV1_ListAccounts() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listAccounts");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListAccountsRequest req = ListAccountsRequest.builder()
                .ledger("ledger001")
                .address("users:.+")
                .after("users:003")
                .balance(2400L)
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .metadata(Map.ofEntries(
                    Map.entry("0", "m"),
                    Map.entry("1", "e"),
                    Map.entry("2", "t"),
                    Map.entry("3", "a"),
                    Map.entry("4", "d"),
                    Map.entry("5", "a"),
                    Map.entry("6", "t"),
                    Map.entry("7", "a"),
                    Map.entry("8", "["),
                    Map.entry("9", "k"),
                    Map.entry("10", "e"),
                    Map.entry("11", "y"),
                    Map.entry("12", "]"),
                    Map.entry("13", "="),
                    Map.entry("14", "v"),
                    Map.entry("15", "a"),
                    Map.entry("16", "l"),
                    Map.entry("17", "u"),
                    Map.entry("18", "e"),
                    Map.entry("19", "1"),
                    Map.entry("20", "&"),
                    Map.entry("21", "m"),
                    Map.entry("22", "e"),
                    Map.entry("23", "t"),
                    Map.entry("24", "a"),
                    Map.entry("25", "d"),
                    Map.entry("26", "a"),
                    Map.entry("27", "t"),
                    Map.entry("28", "a"),
                    Map.entry("29", "["),
                    Map.entry("30", "a"),
                    Map.entry("31", "."),
                    Map.entry("32", "n"),
                    Map.entry("33", "e"),
                    Map.entry("34", "s"),
                    Map.entry("35", "t"),
                    Map.entry("36", "e"),
                    Map.entry("37", "d"),
                    Map.entry("38", "."),
                    Map.entry("39", "k"),
                    Map.entry("40", "e"),
                    Map.entry("41", "y"),
                    Map.entry("42", "]"),
                    Map.entry("43", "="),
                    Map.entry("44", "v"),
                    Map.entry("45", "a"),
                    Map.entry("46", "l"),
                    Map.entry("47", "u"),
                    Map.entry("48", "e"),
                    Map.entry("49", "2")))
                .pageSize(100L)
                .paginationToken("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .build();

        ListAccountsResponse res = sdk.ledger().v1().listAccounts()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            AccountsCursorResponse.builder()
            .cursor(AccountsCursorResponseCursor.builder()
                .data(List.of(
                    Account.builder()
                        .address("users:001")
                        .metadata(Map.ofEntries(
                            Map.entry("admin", true),
                            Map.entry("a", Map.ofEntries(
                                Map.entry("nested", Map.ofEntries(
                                    Map.entry("key", "value")))))))
                        .type("virtual")
                        .build(),
                    Account.builder()
                        .address("users:001")
                        .metadata(Map.ofEntries(
                            Map.entry("admin", true),
                            Map.entry("a", Map.ofEntries(
                                Map.entry("nested", Map.ofEntries(
                                    Map.entry("key", "value")))))))
                        .type("virtual")
                        .build(),
                    Account.builder()
                        .address("users:001")
                        .metadata(Map.ofEntries(
                            Map.entry("admin", true),
                            Map.entry("a", Map.ofEntries(
                                Map.entry("nested", Map.ofEntries(
                                    Map.entry("key", "value")))))))
                        .type("virtual")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.accountsCursorResponse().get());
    }

    @Test
    public void testSDKV1_ListLogs() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listLogs");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListLogsRequest req = ListLogsRequest.builder()
                .ledger("ledger001")
                .after("1234")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .pageSize(100L)
                .build();

        ListLogsResponse res = sdk.ledger().v1().listLogs()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            LogsCursorResponse.builder()
            .cursor(LogsCursorResponseCursor.builder()
                .data(List.of(
                    Log.builder()
                        .data(Map.ofEntries(
                            Map.entry("key", "<value>")))
                        .date(OffsetDateTime.parse("2023-01-03T01:52:56.946Z"))
                        .hash("9ee060170400f556b7e1575cb13f9db004f150a08355c7431c62bc639166431e")
                        .id(1234L)
                        .type(Type.SET_METADATA)
                        .build(),
                    Log.builder()
                        .data(Map.ofEntries(
                            Map.entry("key", "<value>")))
                        .date(OffsetDateTime.parse("2025-08-25T01:03:57.835Z"))
                        .hash("9ee060170400f556b7e1575cb13f9db004f150a08355c7431c62bc639166431e")
                        .id(1234L)
                        .type(Type.NEW_TRANSACTION)
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.logsCursorResponse().get());
    }

    @Test
    public void testSDKV1_ListTransactions() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("listTransactions");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ListTransactionsRequest req = ListTransactionsRequest.builder()
                .ledger("ledger001")
                .account("users:001")
                .after("1234")
                .cursor("aHR0cHM6Ly9nLnBhZ2UvTmVrby1SYW1lbj9zaGFyZQ==")
                .destination("users:001")
                .pageSize(100L)
                .reference("ref:001")
                .source("users:001")
                .build();

        ListTransactionsResponse res = sdk.ledger().v1().listTransactions()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            TransactionsCursorResponse.builder()
            .cursor(TransactionsCursorResponseCursor.builder()
                .data(List.of(
                    Transaction.builder()
                        .postings(List.of(
                            Posting.builder()
                                .amount(new BigInteger("100"))
                                .asset("COIN")
                                .destination("users:002")
                                .source("users:001")
                                .build(),
                            Posting.builder()
                                .amount(new BigInteger("100"))
                                .asset("COIN")
                                .destination("users:002")
                                .source("users:001")
                                .build()))
                        .timestamp(OffsetDateTime.parse("2023-03-19T19:47:16.768Z"))
                        .txid(new BigInteger("533792"))
                        .postCommitVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .preCommitVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .reference("ref:001")
                        .build(),
                    Transaction.builder()
                        .postings(List.of(
                            Posting.builder()
                                .amount(new BigInteger("100"))
                                .asset("COIN")
                                .destination("users:002")
                                .source("users:001")
                                .build(),
                            Posting.builder()
                                .amount(new BigInteger("100"))
                                .asset("COIN")
                                .destination("users:002")
                                .source("users:001")
                                .build(),
                            Posting.builder()
                                .amount(new BigInteger("100"))
                                .asset("COIN")
                                .destination("users:002")
                                .source("users:001")
                                .build()))
                        .timestamp(OffsetDateTime.parse("2025-01-29T15:40:15.458Z"))
                        .txid(new BigInteger("711700"))
                        .postCommitVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .preCommitVolumes(Map.ofEntries(
                            Map.entry("orders:1", Map.ofEntries(
                                Map.entry("USD", Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build()))),
                            Map.entry("orders:2", Map.ofEntries(
                                Map.entry("USD", Volume.builder()
                                    .input(new BigInteger("100"))
                                    .output(new BigInteger("10"))
                                    .balance(new BigInteger("90"))
                                    .build())))))
                        .reference("ref:001")
                        .build()))
                .hasMore(false)
                .pageSize(15L)
                .next("")
                .previous("YXVsdCBhbmQgYSBtYXhpbXVtIG1heF9yZXN1bHRzLol=")
                .build())
            .build(),
            res.transactionsCursorResponse().get());
    }

    @Test
    public void testSDKV1_ReadStats() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("readStats");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        ReadStatsRequest req = ReadStatsRequest.builder()
                .ledger("ledger001")
                .build();

        ReadStatsResponse res = sdk.ledger().v1().readStats()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            StatsResponse.builder()
            .data(Stats.builder()
                .accounts(939446L)
                .transactions(895732L)
                .build())
            .build(),
            res.statsResponse().get());
    }

    @Test
    public void testSDKV1_RevertTransaction() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("revertTransaction");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        RevertTransactionRequest req = RevertTransactionRequest.builder()
                .ledger("ledger001")
                .txid(new BigInteger("1234"))
                .build();

        RevertTransactionResponse res = sdk.ledger().v1().revertTransaction()
                .request(req)
                .call();
        assertEquals(201, res.statusCode());
        assertEquals(
            TransactionResponse.builder()
            .data(Transaction.builder()
                .postings(List.of(
                    Posting.builder()
                        .amount(new BigInteger("100"))
                        .asset("COIN")
                        .destination("users:002")
                        .source("users:001")
                        .build(),
                    Posting.builder()
                        .amount(new BigInteger("100"))
                        .asset("COIN")
                        .destination("users:002")
                        .source("users:001")
                        .build(),
                    Posting.builder()
                        .amount(new BigInteger("100"))
                        .asset("COIN")
                        .destination("users:002")
                        .source("users:001")
                        .build()))
                .timestamp(OffsetDateTime.parse("2024-09-05T21:38:55.965Z"))
                .txid(new BigInteger("107968"))
                .postCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .preCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .reference("ref:001")
                .build())
            .build(),
            res.transactionResponse().get());
    }

    @Test
    public void testSDKV1_RunScript() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("runScript");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        RunScriptRequest req = RunScriptRequest.builder()
                .script(Script.builder()
                    .plain("vars {\naccount $user\n}\nsend [COIN 10] (\n	source = @world\n	destination = $user\n)\n")
                    .reference("order_1234")
                    .vars(Map.ofEntries(
                        Map.entry("user", "users:042")))
                    .build())
                .ledger("ledger001")
                .preview(true)
                .build();

        RunScriptResponse res = sdk.ledger().v1().runScript()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            ScriptResponse.builder()
            .details("https://play.numscript.org/?payload=eyJlcnJvciI6ImFjY291bnQgaGFkIGluc3VmZmljaWVudCBmdW5kcyJ9")
            .errorCode(ErrorsEnum.INSUFFICIENT_FUND)
            .errorMessage("account had insufficient funds")
            .transaction(Transaction.builder()
                .postings(List.of(
                ))
                .timestamp(OffsetDateTime.parse("2024-11-04T15:22:00.380Z"))
                .txid(new BigInteger("737293"))
                .postCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .preCommitVolumes(Map.ofEntries(
                    Map.entry("orders:1", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()))),
                    Map.entry("orders:2", Map.ofEntries(
                        Map.entry("USD", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build()),
                        Map.entry("EUR", Volume.builder()
                            .input(new BigInteger("100"))
                            .output(new BigInteger("20"))
                            .balance(new BigInteger("80"))
                            .build())))))
                .reference("ref:001")
                .build())
            .build(),
            res.scriptResponse().get());
    }

    @Test
    public void testSDKV1_UpdateMapping() throws Exception {

        var testHttpClient = Utils.createTestHTTPClient("updateMapping");
        SDK sdk = SDK.builder()
                .serverURL(Utils.environmentVariable("TEST_SERVER_URL", "http://localhost:18080"))
                .client(testHttpClient)
                .security(Security.builder()
                    .clientID("<YOUR_CLIENT_ID_HERE>")
                    .clientSecret("<YOUR_CLIENT_SECRET_HERE>")
                    .build())
            .build();

        UpdateMappingRequest req = UpdateMappingRequest.builder()
                .mapping(Mapping.builder()
                    .contracts(List.of(
                        Contract.builder()
                            .expr(Expr.builder()
                                .build())
                            .account("users:001")
                            .build(),
                        Contract.builder()
                            .expr(Expr.builder()
                                .build())
                            .account("users:001")
                            .build()))
                    .build())
                .ledger("ledger001")
                .build();

        UpdateMappingResponse res = sdk.ledger().v1().updateMapping()
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(
            MappingResponse.builder()
            .data(Mapping.builder()
                .contracts(List.of(
                    Contract.builder()
                        .expr(Expr.builder()
                            .build())
                        .account("users:001")
                        .build(),
                    Contract.builder()
                        .expr(Expr.builder()
                            .build())
                        .account("users:001")
                        .build()))
                .build())
            .build(),
            res.mappingResponse().get());
    }
}